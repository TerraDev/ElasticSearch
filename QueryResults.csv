Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate,ContentLicense
11227809,1,11227902,,6/27/2012 13:51,,26689,1761310,"<p>Here is a piece of C++ code that shows some very peculiar behavior.</p>
<p>For some reason, sorting the data (<em>before</em> the timed region) miraculously makes the primary loop almost six times faster:</p>
<pre class=""lang-cpp prettyprint-override""><code>#include &lt;algorithm&gt;
#include &lt;ctime&gt;
#include &lt;iostream&gt;

int main()
{
    // Generate data
    const unsigned arraySize = 32768;
    int data[arraySize];

    for (unsigned c = 0; c &lt; arraySize; ++c)
        data[c] = std::rand() % 256;

    // !!! With this, the next loop runs faster.
    std::sort(data, data + arraySize);

    // Test
    clock_t start = clock();
    long long sum = 0;
    for (unsigned i = 0; i &lt; 100000; ++i)
    {
        for (unsigned c = 0; c &lt; arraySize; ++c)
        {   // Primary loop.
            if (data[c] &gt;= 128)
                sum += data[c];
        }
    }

    double elapsedTime = static_cast&lt;double&gt;(clock()-start) / CLOCKS_PER_SEC;

    std::cout &lt;&lt; elapsedTime &lt;&lt; '\n';
    std::cout &lt;&lt; &quot;sum = &quot; &lt;&lt; sum &lt;&lt; '\n';
}
</code></pre>
<ul>
<li>Without <code>std::sort(data, data + arraySize);</code>, the code runs in 11.54 seconds.</li>
<li>With the sorted data, the code runs in 1.93 seconds.</li>
</ul>
<p>(Sorting itself takes more time than this one pass over the array, so it's not actually worth doing if we needed to calculate this for an unknown array.)</p>
<hr />
<p>Initially, I thought this might be just a language or compiler anomaly, so I tried Java:</p>
<pre class=""lang-java prettyprint-override""><code>import java.util.Arrays;
import java.util.Random;

public class Main
{
    public static void main(String[] args)
    {
        // Generate data
        int arraySize = 32768;
        int data[] = new int[arraySize];

        Random rnd = new Random(0);
        for (int c = 0; c &lt; arraySize; ++c)
            data[c] = rnd.nextInt() % 256;

        // !!! With this, the next loop runs faster
        Arrays.sort(data);

        // Test
        long start = System.nanoTime();
        long sum = 0;
        for (int i = 0; i &lt; 100000; ++i)
        {
            for (int c = 0; c &lt; arraySize; ++c)
            {   // Primary loop.
                if (data[c] &gt;= 128)
                    sum += data[c];
            }
        }

        System.out.println((System.nanoTime() - start) / 1000000000.0);
        System.out.println(&quot;sum = &quot; + sum);
    }
}
</code></pre>
<p>With a similar but less extreme result.</p>
<hr />
<p>My first thought was that sorting brings the data into the <a href=""https://en.wikipedia.org/wiki/CPU_cache"" rel=""noreferrer"">cache</a>, but that's silly because the array was just generated.</p>
<ul>
<li>What is going on?</li>
<li>Why is processing a sorted array faster than processing an unsorted array?</li>
</ul>
<p>The code is summing up some independent terms, so the order should not matter.</p>
<hr />
<p><strong>Related / follow-up Q&amp;As</strong> about the same effect with different/later compilers and options:</p>
<ul>
<li><a href=""https://stackoverflow.com/q/66521344"">Why is processing an unsorted array the same speed as processing a sorted array with modern x86-64 clang?</a></li>
<li><a href=""https://stackoverflow.com/q/28875325"">gcc optimization flag -O3 makes code slower than -O2</a></li>
</ul>
",87234,,87234,,10/12/2022 18:56,10/17/2022 9:36,Why is processing a sorted array faster than processing an unsorted array?,<java><c++><performance><cpu-architecture><branch-prediction>,27,9,11656,,,CC BY-SA 4.0
6841479,2,,6841333,7/27/2011 8:31,,11694,,"<p>It's a time zone change on December 31st in Shanghai.</p>

<p>See <a href=""http://www.timeanddate.com/worldclock/clockchange.html?n=237&amp;year=1927"" rel=""noreferrer"">this page</a> for details of 1927 in Shanghai. Basically at midnight at the end of 1927, the clocks went back 5 minutes and 52 seconds. So ""1927-12-31 23:54:08"" actually happened twice, and it looks like Java is parsing it as the <em>later</em> possible instant for that local date/time - hence the difference.</p>

<p>Just another episode in the often weird and wonderful world of time zones.</p>

<p><strong>EDIT:</strong> Stop press! History changes...</p>

<p>The original question would no longer demonstrate quite the same behaviour, if rebuilt with version 2013a of <a href=""https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68"" rel=""noreferrer"">TZDB</a>. In 2013a, the result would be 358 seconds, with a transition time of 23:54:03 instead of 23:54:08.</p>

<p>I only noticed this because I'm collecting questions like this in Noda Time, in the form of <a href=""https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68"" rel=""noreferrer"">unit tests</a>... The test has now been changed, but it just goes to show - not even historical data is safe.</p>

<p><strong>EDIT:</strong> History has changed again...</p>

<p>In TZDB 2014f, the time of the change has moved to 1900-12-31, and it's now a mere 343 second change (so the time between <code>t</code> and <code>t+1</code> is 344 seconds, if you see what I mean).</p>

<p><strong>EDIT:</strong> To answer a question around a transition at 1900... it looks like the Java timezone implementation treats <em>all</em> time zones as simply being in their standard time for any instant before the start of 1900 UTC:</p>

<pre><code>import java.util.TimeZone;

public class Test {
    public static void main(String[] args) throws Exception {
        long startOf1900Utc = -2208988800000L;
        for (String id : TimeZone.getAvailableIDs()) {
            TimeZone zone = TimeZone.getTimeZone(id);
            if (zone.getRawOffset() != zone.getOffset(startOf1900Utc - 1)) {
                System.out.println(id);
            }
        }
    }
}
</code></pre>

<p>The code above produces no output on my Windows machine. So any time zone which has any offset other than its standard one at the start of 1900 will count that as a transition. TZDB itself has some data going back earlier than that, and doesn't rely on any idea of a ""fixed"" standard time (which is what <code>getRawOffset</code> assumes to be a valid concept) so other libraries needn't introduce this artificial transition.</p>
",22656,,22656,,2/7/2019 9:29,2/7/2019 9:29,,,,0,,,,CC BY-SA 3.0
29479702,6,,,4/6/2015 21:07,,10786,,"<p><strong><a href=""http://meta.stackoverflow.com/a/290185"">Martijn Pieters's answers to your questions</a></strong></p>

<hr>

<p>Hello, my name is Martijn Pieters and I am a Stack Overflow Ninja.</p>

<p>I've been <a href=""https://meta.stackoverflow.com/users/100297"">active on Meta</a> since <a href=""https://meta.stackexchange.com/users/140890"">before we had our own Meta</a>; you may have seen me active there <a href=""https://meta.stackoverflow.com/tags/support/topusers"">providing support</a>. As such I am already devoting quite some time to help run this place, next to my <a href=""https://stackoverflow.com/tags/python/topusers"">other Stack Overflow activities</a>.</p>

<p>And I am addicted to it. I ask you to help me <em>feed</em> this addiction, and elect me moderator so that I can help more, clean up more, support more.</p>

<p>I've always been the quiet admin in the background, gardening the system and keeping out the cruft, the garbage and the critters. I've been a moderator of various groups, forums and bulletin board sites, and I've naturally extended this to Stack Overflow. I <a href=""https://stackoverflow.com/users/100297/martijn-pieters?tab=activity"">edit almost any question I open</a>, resulting in a <a href=""http://data.stackexchange.com/stackoverflow/query/228741"" rel=""nofollow"">top illuminator spot</a> and better questions. </p>

<p>Make me mod, and I'll extend that drive to the flag queue!</p>
",100297,,811,,4/17/2015 19:32,4/17/2015 19:32,,,,115,,,4/6/2015 21:07,CC BY-SA 3.0
54994793,6,,,3/5/2019 3:01,,10523,,"<p>Hello I'm <a href=""https://stackoverflow.com/users/6451573/jean-fran%C3%A7ois-fabre"">Jean-Fran√ßois Fabre</a>, 47 y/o from France.</p>

<p>Since I joined in 2016, I'm doing my best to moderate the site given my 40k+ reputation (so max of 30 delete votes) and gold badges.</p>

<p>I've voted 10000+ times to close and 14000+ times to delete for a total of 37000+ votes.</p>

<p>I'm also 15th all-time reviewer in <a href=""https://stackoverflow.com/review/low-quality-posts/stats"">NAA queue</a>, contributor at <a href=""https://chat.stackoverflow.com/rooms/41570/so-close-vote-reviewers"">SOCVR</a> (not only for the jokes), and
avid reader / occasional answerer on meta (70+ answers).</p>

<p>How I'd see my moderator duties:</p>

<ul>
<li>Fight spam &amp; non-answers</li>
<li>block unclear/off-topic questions &amp; useless duplicates</li>
<li>Counter rude &amp; abusive comments, enforce mutual respect</li>
<li>Keep the site useable by minimizing noise</li>
<li>Fight voting fraud</li>
<li>Justify my actions when needed on meta</li>
</ul>

<p>That, without losing touch of the reality of the main site: keep on asking &amp; answering questions on my favourite Python &amp; C tags</p>

<p><a href=""https://meta.stackoverflow.com/a/380897/6451573"">I answer your questions</a></p>
",6451573,,6451573,,3/8/2019 20:57,3/8/2019 20:57,,,,40,,,3/5/2019 3:01,CC BY-SA 4.0
1642028,1,1642035,,10/29/2009 6:57,,9879,944096,"<p>After reading <a href=""http://groups.google.com/group/comp.lang.c++.moderated/msg/33f173780d58dd20"" rel=""noreferrer"">Hidden Features and Dark Corners of C++/STL</a> on <code>comp.lang.c++.moderated</code>, I was completely surprised that the following snippet compiled and worked in both Visual Studio 2008 and G++ 4.4.</p>
<p>Here's the code:</p>
<pre><code>#include &lt;stdio.h&gt;
int main()
{
    int x = 10;
    while (x --&gt; 0) // x goes to 0
    {
        printf(&quot;%d &quot;, x);
    }
}
</code></pre>
<p>Output:</p>
<pre><code>9 8 7 6 5 4 3 2 1 0
</code></pre>
<p>I'd assume this is C, since it works in GCC as well. Where is this defined in the standard, and where has it come from?</p>
",87234,,205955,,7/16/2022 21:18,9/23/2022 5:54,"What is the ""-->"" operator in C++?",<c++><c><operators><code-formatting><standards-compliance>,28,0,2229,,12/31/2009 4:17,CC BY-SA 4.0
45237399,6,,,7/21/2017 12:13,,9474,,"<p>I'm Cody Gray, and I'd like to nominate myself as a candidate for moderator.</p>

<p>I feel the most serious issue facing Stack Overflow is <strong>a constant deluge of garbage that crowds out useful and interesting content</strong>. This problem truly affects everyone: answerers, askers, and even infrequent browsers.</p>

<p>Although everyone has a role to play in helping to keep the site clean, that often isn't enough. We have too much cleaning to do, and too few people with the tools to handle it. <strong>I'm asking for you to entrust me with more and better ‚ô¶ tools, so I can get out there and work on this problem</strong> (and others, as they arise, of course).</p>

<p>I've been contributing here for a long time, monitoring a diverse (and changing) array of tags, and doing my best to moderate. I edit a <em>lot</em> of posts and thoroughly exercise my current privileges. I'm well-acquainted with our standards, and I have an excellent eye for quality. I'm also fair, reasonable, and committed.</p>

<p>As an active participant on Meta, my posts there speak for themselves. Anyone who frequents Meta knows me and what I stand for. Anyone who doesn't should <a href=""https://meta.stackoverflow.com/a/352628/"">see <strong>my answers to your questions</strong></a>.</p>
",366904,,366904,,7/21/2017 12:21,7/21/2017 12:21,,,,24,,,7/21/2017 12:13,CC BY-SA 3.0
40505467,6,,,11/9/2016 11:06,,8380,,"<p>Hi, I'm David C. Zentgraf, web developer from Germany.</p>

<p>I've been here a while and have seen Stack Overflow grow from its beta stage to fulfilling its declared goal of being the de facto standard place to find solutions for programming problems. It has absolutely revolutionised this little corner of the internet, and it is truly important to preserve it and its original goal of being a knowledge base for everyone. There truly is no viable alternative anywhere close, Stack Overflow has become an institution almost inseparable from the profession of programming at this point in time.</p>

<p>Through the years I've witnessed the ups and downs and policy changes the site went through, and I'm pretty optimistic about the current relatively stable state the community has reached. The overall mood is generally productive, and although there's a constant need for moderation, this is typically happening smoothly and efficiently. I'd like to help keep it that way and keep improving and tweaking the formula wherever possible and necessary.</p>

<p>You'll find my in-depth answers to the questionnaire here: <a href=""http://meta.stackoverflow.com/a/337653/476"">http://meta.stackoverflow.com/a/337653/476</a></p>
",476,,476,,11/9/2016 11:58,11/9/2016 11:58,,,,37,,,11/9/2016 11:06,CC BY-SA 3.0
9329476,2,,9329446,2/17/2012 13:53,,8126,,"
<p><strong>TL;DR</strong></p>
<ul>
<li><p><strong>Your best bets</strong> are usually</p>
<ul>
<li>a <code>for-of</code> loop (ES2015+ only; <a href=""https://tc39.es/ecma262/#sec-for-in-and-for-of-statements"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"" rel=""noreferrer"">MDN</a>) - simple and <code>async</code>-friendly
<pre class=""lang-js prettyprint-override""><code>for (const element of theArray) {
    // ...use `element`...
}
</code></pre>
</li>
<li><code>forEach</code> (ES5+ only; <a href=""https://tc39.es/ecma262/#sec-array.prototype.foreach"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""noreferrer"">MDN</a>) (or its relatives <code>some</code> and such) - <strong>not</strong> <code>async</code>-friendly (but see details)
<pre class=""lang-js prettyprint-override""><code>theArray.forEach(element =&gt; {
    // ...use `element`...
});
</code></pre>
</li>
<li>a simple old-fashioned <code>for</code> loop - <code>async</code>-friendly
<pre class=""lang-js prettyprint-override""><code>for (let index = 0; index &lt; theArray.length; ++index) {
    const element = theArray[index];
    // ...use `element`...
}
</code></pre>
</li>
<li><em>(rarely)</em> <code>for-in</code> <em>with safeguards</em> - <code>async</code>-friendly
<pre class=""lang-js prettyprint-override""><code>for (const propertyName in theArray) {
    if (/*...is an array element property (see below)...*/) {
        const element = theArray[propertyName];
        // ...use `element`...
    }
}
</code></pre>
</li>
</ul>
</li>
<li><p>Some quick &quot;don't&quot;s:</p>
<ul>
<li><strong>Don't use <code>for-in</code></strong> unless you use it with safeguards or are at least aware of why it might bite you.</li>
<li><strong>Don't use <code>map</code> if you're not using its return value</strong>.<br><em>(There's sadly someone out there teaching <code>map</code> [<a href=""https://tc39.es/ecma262/#sec-array.prototype.map"" rel=""noreferrer"">spec</a> / <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""noreferrer"">MDN</a>] as though it were <code>forEach</code>¬†‚Äî but as I write on my blog, <a href=""https://thenewtoys.dev/blog/2021/04/17/misusing-map/"" rel=""noreferrer"">that's not what it's for</a>. If you aren't using the array it creates, don't use <code>map</code>.)</em></li>
<li><strong>Don't use <code>forEach</code></strong> if the callback does asynchronous work and you want the <code>forEach</code> to wait until that work is done (because it won't).</li>
</ul>
</li>
</ul>
<p>But there's <strong>lots</strong> more to explore, read on...</p>
<hr />
<p>JavaScript has powerful semantics for looping through arrays and array-like objects. I've split the answer into two parts: Options for genuine arrays, and options for things that are just array-<em>like</em>, such as the <code>arguments</code> object, other iterable objects (ES2015+), DOM collections, and so on.</p>
<p>Okay, let's look at our options:</p>
<h2>For Actual Arrays</h2>
<p>You have five options (two supported basically forever, another added by ECMAScript¬†5 [&quot;ES5&quot;], and two more added in ECMAScript¬†2015 (&quot;ES2015&quot;, aka &quot;ES6&quot;):</p>
<ol>
<li>Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</li>
<li>Use <code>forEach</code> and related (ES5+)</li>
<li>Use a simple <code>for</code> loop</li>
<li>Use <code>for-in</code> <em>correctly</em></li>
<li>Use an iterator explicitly (ES2015+)</li>
</ol>
<p>(You can see those old specs here: <a href=""http://ecma-international.org/ecma-262/5.1/"" rel=""noreferrer"">ES5</a>, <a href=""http://www.ecma-international.org/ecma-262/6.0/index.html"" rel=""noreferrer"">ES2015</a>, but both have been superceded; the current editor's draft is always <a href=""https://tc39.github.io/ecma262/"" rel=""noreferrer"">here</a>.)</p>
<p>Details:</p>
<h3>1. Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</h3>
<p>ES2015 added <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"" rel=""noreferrer""><em>iterators and iterables</em></a> to JavaScript. Arrays are iterable (so are strings, <code>Map</code>s, and <code>Set</code>s, as well as DOM collections and lists, as you'll see later). Iterable objects provide iterators for their values. The new <code>for-of</code> statement loops through the values returned by an iterator:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [""a"", ""b"", ""c""];
for (const element of a) { // You can use `let` instead of `const` if you like
    console.log(element);
}
// a
// b
// c</code></pre>
</div>
</div>
</p>
<p>It doesn't get simpler than that! Under the covers, that gets an iterator from the array and loops through the values the iterator returns. The iterator provided by arrays provides the values of the array elements, in order beginning to end.</p>
<p>Notice how <code>element</code> is scoped to each loop iteration; trying to use <code>element</code> after the end of the loop would fail because it doesn't exist outside the loop body.</p>
<p>In theory, a <code>for-of</code> loop involves several function calls (one to get the iterator, then one to get each value from it). Even when that's true, it's nothing to worry about, function calls are <em><strong>very</strong></em> cheap in modern JavaScript engines (it bothered me for <code>forEach</code> [below] until I looked into it; <a href=""http://blog.niftysnippets.org/2012/02/foreach-and-runtime-cost.html"" rel=""noreferrer"">details</a>). But additionally, JavaScript engines optimize those calls away (in performance-critical code) when dealing with native iterators for things like arrays.</p>
<p><code>for-of</code> is entirely <code>async</code>-friendly. If you need the work in a loop body to be done in series (not in parallel), an <code>await</code> in the loop body will wait for the promise to settle before continuing. Here's a silly example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function delay(ms) {
    return new Promise(resolve =&gt; {
        setTimeout(resolve, ms);
    });
}

async function showSlowly(messages) {
    for (const message of messages) {
        await delay(400);
        console.log(message);
    }
}

showSlowly([
    ""So"", ""long"", ""and"", ""thanks"", ""for"", ""all"", ""the"", ""fish!""
]);
// `.catch` omitted because we know it never rejects</code></pre>
</div>
</div>
</p>
<p>Note how the words appear with a delay before each one.</p>
<p>It's a matter of coding style, but <code>for-of</code> is the first thing I reach for when looping through anything iterable.</p>
<h3>2. Use <code>forEach</code> and related</h3>
<p>In any even vaguely-modern environment (so, not IE8) where you have access to the <code>Array</code> features added by ES5, you can use <code>forEach</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.foreach"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""noreferrer"">MDN</a>) if you're only dealing with synchronous code (or you don't need to wait for an asynchronous process to finish during the loop):</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [""a"", ""b"", ""c""];
a.forEach((element) =&gt; {
    console.log(element);
});</code></pre>
</div>
</div>
</p>
<p><code>forEach</code> accepts a callback function and, optionally, a value to use as <code>this</code> when calling that callback (not used above). The callback is called for each element in the array, in order, skipping non-existent elements in sparse arrays. Although I only used one parameter above, the callback is called with three arguments: The element for that iteration, the index of that element, and a reference to the array you're iterating over (in case your function doesn't already have it handy).</p>
<p>Like <code>for-of</code>, <code>forEach</code> has the advantage that you don't have to declare indexing and value variables in the containing scope; in this case, they're supplied as arguments to the iteration function, and so nicely scoped to just that iteration.</p>
<p>Unlike <code>for-of</code>, <code>forEach</code> has the disadvantage that it doesn't understand <code>async</code> functions and <code>await</code>. If you use an <code>async</code> function as the callback, <code>forEach</code> does <strong>not</strong> wait for that function's promise to settle before continuing. Here's the <code>async</code> example from <code>for-of</code> using <code>forEach</code> instead¬†‚Äî notice how there's an initial delay, but then all the text appears right away instead of waiting:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function delay(ms) {
    return new Promise(resolve =&gt; {
        setTimeout(resolve, ms);
    });
}

async function showSlowly(messages) {
    // INCORRECT, doesn't wait before continuing,
    // doesn't handle promise rejections
    messages.forEach(async message =&gt; {
        await delay(400);
        console.log(message);
    });
}

showSlowly([
    ""So"", ""long"", ""and"", ""thanks"", ""for"", ""all"", ""the"", ""fish!""
]);
// `.catch` omitted because we know it never rejects</code></pre>
</div>
</div>
</p>
<p><code>forEach</code> is the &quot;loop through them all&quot; function, but ES5 defined several other useful &quot;work your way through the array and do things&quot; functions, including:</p>
<ul>
<li><code>every</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.every"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every"" rel=""noreferrer"">MDN</a>) - stops looping the first time the callback returns a falsy value</li>
<li><code>some</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.some"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"" rel=""noreferrer"">MDN</a>) - stops looping the first time the callback returns a truthy value</li>
<li><code>filter</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.filter"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"" rel=""noreferrer"">MDN</a>) - creates a new array including elements where the callback returns a truthy value, omitting the ones where it doesn't</li>
<li><code>map</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.map"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""noreferrer"">MDN</a>) - creates a new array from the values returned by the callback</li>
<li><code>reduce</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.reduce"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"" rel=""noreferrer"">MDN</a>) - builds up a value by repeatedly calling the callback, passing in previous values; see the spec for the details</li>
<li><code>reduceRight</code> (<a href=""https://tc39.es/ecma262/#sec-array.prototype.reduceright"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight"" rel=""noreferrer"">MDN</a>) - like <code>reduce</code>, but works in descending rather than ascending order</li>
</ul>
<p>As with <code>forEach</code>, if you use an <code>async</code> function as your callback, none of those waits for the function's promise to settle. That means:</p>
<ul>
<li>Using an <code>async</code> function callback is never appropriate with <code>every</code>, <code>some</code>, and <code>filter</code> since they will treat the returned promise as though it were a truthy value; they <strong>don't</strong> wait for the promise to settle and then use the fulfillment value.</li>
<li>Using an <code>async</code> function callback is often appropriate with <code>map</code>, <strong>if</strong> the goal is to turn an array of something into an array of <em>promises</em>, perhaps for passing to one of the promise combinator functions (<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all"" rel=""noreferrer""><code>Promise.all</code></a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race"" rel=""noreferrer""><code>Promise.race</code></a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled"" rel=""noreferrer""><code>promise.allSettled</code></a>, or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any"" rel=""noreferrer""><code>Promise.any</code></a>).</li>
<li>Using an <code>async</code> function callback is rarely appropriate with <code>reduce</code> or <code>reduceRight</code>, because (again) the callback will always return a promise. But there is an idiom of building a chain of promises from an array that uses <code>reduce</code> (<code>const promise = array.reduce((p, element) =&gt; p.then(/*...something using `element`...*/));</code>), but usually in those cases a <code>for-of</code> or <code>for</code> loop in an <code>async</code> function will be clearer and easier to debug.</li>
</ul>
<h3>3. Use a simple <code>for</code> loop</h3>
<p>Sometimes the old ways are the best:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [""a"", ""b"", ""c""];
for (let index = 0; index &lt; a.length; ++index) {
    const element = a[index];
    console.log(element);
}</code></pre>
</div>
</div>
</p>
<p>If the length of the array won't change during the loop, and it's in highly performance-sensitive code, a slightly more complicated version grabbing the length up front might be a <em><strong>tiny</strong></em> bit faster:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [""a"", ""b"", ""c""];
for (let index = 0, len = a.length; index &lt; len; ++index) {
    const element = a[index];
    console.log(element);
}</code></pre>
</div>
</div>
</p>
<p>And/or counting backward:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [""a"", ""b"", ""c""];
for (let index = a.length - 1; index &gt;= 0; --index) {
    const element = a[index];
    console.log(element);
}</code></pre>
</div>
</div>
</p>
<p>But with modern JavaScript engines, it's rare you need to eke out that last bit of juice.</p>
<p>Before ES2015, the loop variable had to exist in the containing scope, because <code>var</code> only has function-level scope, not block-level scope. But as you saw in the examples above, you can use <code>let</code> within the <code>for</code> to scope the variables to just the loop. And when you do that, the <code>index</code> variable is recreated for each loop iteration, meaning closures created in the loop body keep a reference to the <code>index</code> for that specific iteration, which solves the old &quot;closures in loops&quot; problem:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// (The `NodeList` from `querySelectorAll` is array-like)
const divs = document.querySelectorAll(""div"");
for (let index = 0; index &lt; divs.length; ++index) {
    divs[index].addEventListener('click', e =&gt; {
        console.log(""Index is: "" + index);
    });
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;zero&lt;/div&gt;
&lt;div&gt;one&lt;/div&gt;
&lt;div&gt;two&lt;/div&gt;
&lt;div&gt;three&lt;/div&gt;
&lt;div&gt;four&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p>In the above, you get &quot;Index is: 0&quot; if you click the first and &quot;Index is: 4&quot; if you click the last. This does <strong>not</strong> work if you use <code>var</code> instead of <code>let</code> (you'd always see &quot;Index is: 5&quot;).</p>
<p>Like <code>for-of</code>, <code>for</code> loops work well in <code>async</code> functions. Here's the earlier example using a <code>for</code> loop:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function delay(ms) {
    return new Promise(resolve =&gt; {
        setTimeout(resolve, ms);
    });
}

async function showSlowly(messages) {
    for (let i = 0; i &lt; messages.length; ++i) {
        const message = messages[i];
        await delay(400);
        console.log(message);
    }
}

showSlowly([
    ""So"", ""long"", ""and"", ""thanks"", ""for"", ""all"", ""the"", ""fish!""
]);
// `.catch` omitted because we know it never rejects</code></pre>
</div>
</div>
</p>
<h3>4. Use <code>for-in</code> <em>correctly</em></h3>
<p><code>for-in</code> isn't for looping through arrays, it's for looping through the names of an object's properties. It does often seem to work for looping through arrays as a by-product of the fact that arrays are objects, but it doesn't just loop through the array indexes, it loops through <strong>all</strong> enumerable properties of the object (including inherited ones). (It also used to be that the order wasn't specified; it is now [details in <a href=""https://stackoverflow.com/a/30919039/157247"">this other answer</a>], but even though the order is specified now, the rules are complex, there are exceptions, and relying on the order is not best practice.)</p>
<p>The only real use cases for <code>for-in</code> on an array are:</p>
<ul>
<li>It's a <a href=""http://en.wikipedia.org/wiki/Sparse_array"" rel=""noreferrer""><em>sparse</em> array</a> with <strong>massive</strong> gaps in it, or</li>
<li>You're using non-element properties on the array object and you want to include them in the loop</li>
</ul>
<p>Looking only at that first example: You can use <code>for-in</code> to visit those sparse array elements if you use appropriate safeguards:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// `a` is a sparse array
const a = [];
a[0] = ""a"";
a[10] = ""b"";
a[10000] = ""c"";
for (const name in a) {
    if (Object.hasOwn(a, name) &amp;&amp;       // These checks are
        /^0$|^[1-9]\d*$/.test(name) &amp;&amp;  // explained
        name &lt;= 4294967294              // below
       ) {
        const element = a[name];
        console.log(a[name]);
    }
}</code></pre>
</div>
</div>
</p>
<p>Note the three checks:</p>
<ol>
<li><p>That the object has its <em>own</em> property by that name (not one it inherits from its prototype; this check is also often written as <code>a.hasOwnProperty(name)</code> but ES2022 adds <a href=""https://github.com/tc39/proposal-accessible-object-hasownproperty"" rel=""noreferrer""><code>Object.hasOwn</code></a> which can be more reliable), and</p>
</li>
<li><p>That the name is all decimal digits (e.g., normal string form, not scientific notation), and</p>
</li>
<li><p>That the name's value when coerced to a number is &lt;= 2^32 - 2 (which is 4,294,967,294). Where does that number come from? It's part of the definition of an array index <a href=""https://tc39.es/ecma262/#array-index"" rel=""noreferrer"">in the specification</a>. Other numbers (non-integers, negative numbers, numbers greater than 2^32 - 2) are not array indexes. The reason it's 2^32 - <strong>2</strong> is that that makes the greatest index value one lower than 2^32 - <strong>1</strong>, which is the maximum value an array's <code>length</code> can have. (E.g., an array's length fits in a 32-bit unsigned integer.)</p>
</li>
</ol>
<p>...although with that said, most code only does the <code>hasOwnProperty</code> check.</p>
<p>You wouldn't do that in inline code, of course. You'd write a utility function. Perhaps:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Utility function for antiquated environments without `forEach`
const hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);
const rexNum = /^0$|^[1-9]\d*$/;
function sparseEach(array, callback, thisArg) {
    for (const name in array) {
        const index = +name;
        if (hasOwn(a, name) &amp;&amp;
            rexNum.test(name) &amp;&amp;
            index &lt;= 4294967294
           ) {
            callback.call(thisArg, array[name], index, array);
        }
    }
}

const a = [];
a[5] = ""five"";
a[10] = ""ten"";
a[100000] = ""one hundred thousand"";
a.b = ""bee"";

sparseEach(a, (value, index) =&gt; {
    console.log(""Value at "" + index + "" is "" + value);
});</code></pre>
</div>
</div>
</p>
<p>Like <code>for</code>, <code>for-in</code> works well in asynchronous functions if the work within it needs to be done in series.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function delay(ms) {
    return new Promise(resolve =&gt; {
        setTimeout(resolve, ms);
    });
}

async function showSlowly(messages) {
    for (const name in messages) {
        if (messages.hasOwnProperty(name)) { // Almost always this is the only check people do
            const message = messages[name];
            await delay(400);
            console.log(message);
        }
    }
}

showSlowly([
    ""So"", ""long"", ""and"", ""thanks"", ""for"", ""all"", ""the"", ""fish!""
]);
// `.catch` omitted because we know it never rejects</code></pre>
</div>
</div>
</p>
<h3>5. Use an iterator explicitly (ES2015+)</h3>
<p><code>for-of</code> uses an iterator implicitly, doing all the scut work for you. Sometimes, you might want to use an iterator <em>explicitly</em>. It looks like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = [""a"", ""b"", ""c""];
const it = a.values(); // Or `const it = a[Symbol.iterator]();` if you like
let entry;
while (!(entry = it.next()).done) {
    const element = entry.value;
    console.log(element);
}</code></pre>
</div>
</div>
</p>
<p>An iterator is an object matching the Iterator definition in the specification. Its <code>next</code> method returns a new <em>result object</em> each time you call it. The result object has a property, <code>done</code>, telling us whether it's done, and a property <code>value</code> with the value for that iteration. (<code>done</code> is optional if it would be <code>false</code>, <code>value</code> is optional if it would be <code>undefined</code>.)</p>
<p>What you get for <code>value</code> varies depending on the iterator. On arrays, the default iterator provides the value of each array element (<code>&quot;a&quot;</code>, <code>&quot;b&quot;</code>, and <code>&quot;c&quot;</code> in the example earlier). Arrays also have three other methods that return iterators:</p>
<ul>
<li><code>values()</code>: This is an alias for the <code>[Symbol.iterator]</code> method that returns the default iterator.</li>
<li><code>keys()</code>: Returns an iterator that provides each key (index) in the array. In the example above, it would provide <code>&quot;0&quot;</code>, then <code>&quot;1&quot;</code>, then <code>&quot;2&quot;</code> (yes, as strings).</li>
<li><code>entries()</code>: Returns an iterator that provides <code>[key, value]</code> arrays.</li>
</ul>
<p>Since iterator objects don't advance until you call <code>next</code>, they work well in <code>async</code> function loops. Here's the earlier <code>for-of</code> example using the iterator explicitly:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function delay(ms) {
    return new Promise(resolve =&gt; {
        setTimeout(resolve, ms);
    });
}

async function showSlowly(messages) {
    const it = messages.values()
    while (!(entry = it.next()).done) {
        await delay(400);
        const element = entry.value;
        console.log(element);
    }
}

showSlowly([
    ""So"", ""long"", ""and"", ""thanks"", ""for"", ""all"", ""the"", ""fish!""
]);
// `.catch` omitted because we know it never rejects</code></pre>
</div>
</div>
</p>
<h2>For Array-Like Objects</h2>
<p>Aside from true arrays, there are also <em>array-like</em> objects that have a <code>length</code> property and properties with all-digits names: <a href=""https://dom.spec.whatwg.org/#interface-nodelist"" rel=""noreferrer""><code>NodeList</code> instances</a>, <a href=""https://dom.spec.whatwg.org/#interface-htmlcollection"" rel=""noreferrer""><code>HTMLCollection</code> instances</a>, the <code>arguments</code> object, etc. How do we loop through their contents?</p>
<h3>Use most of the options above</h3>
<p>At least some, and possibly most or even all, of the array approaches above apply equally well to array-like objects:</p>
<ol>
<li><p><strong>Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</strong></p>
<p><code>for-of</code> uses the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"" rel=""noreferrer"">iterator</a> provided by the object (if any). That includes host-provided objects (like DOM collections and lists). For instance, <code>HTMLCollection</code> instances from <code>getElementsByXYZ</code> methods and <code>NodeList</code>s instances from <code>querySelectorAll</code> both support iteration. (This is defined <strong>quite</strong> subtly by the HTML and DOM specifications. Basically, any object with <code>length</code> and indexed access is automatically iterable. It <strong>doesn't</strong> have to be marked <code>iterable</code>; that is used only for collections that, in addition to being iterable, support <code>forEach</code>, <code>values</code>, <code>keys</code>, and <code>entries</code> methods. <code>NodeList</code> does; <code>HTMLCollection</code> doesn't, but both are iterable.)</p>
<p>Here's an example of looping through <code>div</code> elements:</p>
</li>
</ol>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const divs = document.querySelectorAll(""div"");
for (const div of divs) {
    div.textContent = Math.random();
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;zero&lt;/div&gt;
&lt;div&gt;one&lt;/div&gt;
&lt;div&gt;two&lt;/div&gt;
&lt;div&gt;three&lt;/div&gt;
&lt;div&gt;four&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<ol start=""2"">
<li><p><strong>Use <code>forEach</code> and related (ES5+)</strong></p>
<p>The various functions on <code>Array.prototype</code> are &quot;intentionally generic&quot; and can be used on array-like objects via <code>Function#call</code> (<a href=""https://tc39.es/ecma262/#sec-function.prototype.call"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call"" rel=""noreferrer"">MDN</a>) or <code>Function#apply</code> (<a href=""https://tc39.es/ecma262/#sec-function.prototype.apply"" rel=""noreferrer"">spec</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"" rel=""noreferrer"">MDN</a>). (If you have to deal with IE8 or earlier [ouch], see the &quot;Caveat for host-provided objects&quot; at the end of this answer, but it's not an issue with vaguely-modern browsers.)</p>
<p>Suppose you wanted to use <code>forEach</code> on a <code>Node</code>'s <code>childNodes</code> collection (which, being an <code>HTMLCollection</code>, doesn't have <code>forEach</code> natively). You'd do this:</p>
<pre><code>Array.prototype.forEach.call(node.childNodes, (child) =&gt; {
    // Do something with `child`
});
</code></pre>
<p>(Note, though, that you could just use <code>for-of</code> on <code>node.childNodes</code>.)</p>
<p>If you're going to do that a lot, you might want to grab a copy of the function reference into a variable for reuse, e.g.:</p>
<pre><code>// (This is all presumably in a module or some scoping function)
const forEach = Array.prototype.forEach.call.bind(Array.prototype.forEach);

// Then later...
forEach(node.childNodes, (child) =&gt; {
    // Do something with `child`
});
</code></pre>
</li>
<li><p><strong>Use a simple <code>for</code> loop</strong></p>
<p>Perhaps obviously, a simple <code>for</code> loop works for array-like objects.</p>
</li>
<li><p><strong>Use an iterator explicitly (ES2015+)</strong></p>
<p>See #1.</p>
</li>
</ol>
<p>You <em><strong>may</strong></em> be able to get away with <code>for-in</code> (with safeguards), but with all of these more appropriate options, there's no reason to try.</p>
<h3>Create a true array</h3>
<p>Other times, you may want to convert an array-like object into a true array. Doing that is surprisingly easy:</p>
<ol>
<li><p><strong>Use <code>Array.from</code></strong></p>
<p><code>Array.from</code> <a href=""https://tc39.es/ecma262/#sec-array.from"" rel=""noreferrer"">(spec)</a> | <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from"" rel=""noreferrer"">(MDN)</a> (ES2015+, but easily polyfilled) creates an array from an array-like object, optionally passing the entries through a mapping function first. So:</p>
<pre><code>const divs = Array.from(document.querySelectorAll(&quot;div&quot;));
</code></pre>
<p>...takes the <code>NodeList</code> from <code>querySelectorAll</code> and makes an array from it.</p>
<p>The mapping function is handy if you were going to map the contents in some way. For instance, if you wanted to get an array of the tag names of the elements with a given class:</p>
<pre><code>// Typical use (with an arrow function):
const divs = Array.from(document.querySelectorAll(&quot;.some-class&quot;), element =&gt; element.tagName);

// Traditional function (since `Array.from` can be polyfilled):
var divs = Array.from(document.querySelectorAll(&quot;.some-class&quot;), function(element) {
    return element.tagName;
});
</code></pre>
</li>
<li><p><strong>Use spread syntax (<code>...</code>)</strong></p>
<p>It's also possible to use ES2015's <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"" rel=""noreferrer"">spread syntax</a>. Like <code>for-of</code>, this uses the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"" rel=""noreferrer"">iterator</a> provided by the object (see #1 in the previous section):</p>
<pre><code>const trueArray = [...iterableObject];
</code></pre>
<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, with spread syntax this becomes quite succinct:</p>
<pre><code>const divs = [...document.querySelectorAll(&quot;div&quot;)];
</code></pre>
</li>
<li><p><strong>Use the <code>slice</code> method of arrays</strong></p>
<p>We can use the <a href=""https://tc39.es/ecma262/#sec-array.prototype.slice"" rel=""noreferrer""><co",,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,
e>slice</code></a> method of arrays, which like the other methods mentioned above is &quot;intentionally generic&quot; and so can be used with array-like objects, like this:</p>,,,,,,,,,,,,,,,,,,,,
<pre><code>const trueArray = Array.prototype.slice.call(arrayLikeObject);,,,,,,,,,,,,,,,,,,,,,,
</code></pre>,,,,,,,,,,,,,,,,,,,,,,
<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, we could do this:</p>,,,,,,,,,,,,,,,,,,,,
<pre><code>const divs = Array.prototype.slice.call(document.querySelectorAll(&quot;div&quot;));,,,,,,,,,,,,,,,,,,,,,,
</code></pre>,,,,,,,,,,,,,,,,,,,,,,
<p>(If you still have to handle IE8 [ouch], will fail; IE8 didn't let you use host-provided objects as <code>this</code> like that.)</p>,,,,,,,,,,,,,,,,,,,,,
</li>,,,,,,,,,,,,,,,,,,,,,,
</ol>,,,,,,,,,,,,,,,,,,,,,,
<h3>Caveat for host-provided objects</h3>,,,,,,,,,,,,,,,,,,,,,,
<p>If you use <code>Array.prototype</code> functions with <em>host-provided</em> array-like objects (for example, DOM collections and such provided by the browser rather than the JavaScript engine), obsolete browsers like IE8 didn't necessarily handle that way, so if you have to support them, be sure to test in your target environments. But it's not an issue with vaguely-modern browsers. (For non-browser environments, naturally it'll depend on the environment.)</p>,,,,,,,,,,,,,,,,,
",157247""",,157247,,10/21/2021 6:18,10/21/2021 6:18,,,,19,,,,CC BY-SA 4.0,,,,,,,,,
21695065,6,,,2/11/2014 6:51,,7846,,"<p><strong><a href=""http://meta.stackexchange.com/a/222151"">Bohemian's answers to your questions</a></strong></p>

<hr>

<p>I contribute every day (currently 600+ consecutive days) answering questions (5K+ answers) and helping others refine theirs.</p>

<p>So, why me?</p>

<ul>
<li>I won't tolerate any racist, sexist, bullying (especially of newbies) or other forms of impoliteness. Disagree with others for sure, but respect and civility must be maintained at all times (and some humor is good too!)</li>
<li>Like good code, answers and especially questions should be a brief as possible (without losing meaning or legibility). Reflect that <strong>we're building a knowledge base here, not a blog site</strong>. I will guide users to this end</li>
<li>Migration to other forums is another bugbear of mine. Often there are questions that are good questions, but belong elsewhere. I'll do my best to migrate them appropriately</li>
<li>I'll turn up every day and do the job</li>
</ul>

<p>Apart from earning almost all badges (Legendary and Generalist being the hardest and most satisfying), my accomplishments include finishing on top of the StackOverflow Winter Hats Ladder 2 years running :)</p>

<h3>Election Promise (vote grab):</h3>

<p>If elected, I will reveal my real name <s>by changing my username</s> showing my real name and photograph in my profile!</p>

<p>And good luck to all other nominees!</p>
",256196,,-1,,4/25/2014 11:18,2/20/2014 4:44,,,,39,,,2/11/2014 6:51,CC BY-SA 3.0
54994048,6,,,3/5/2019 1:17,,7215,,"<p>Hi, my name is coldspeed. I am a 24 y/o grad student at <a href=""https://www.usc.edu"" rel=""nofollow noreferrer"">USC</a>, and an incoming full timer at Google. I'd like to nominate myself for the position of moderator. </p>

<p>I would make a good moderator because</p>

<ul>
<li>I care very much about the quality of content because I understand its importance. (over 4K edits, 12K up/downvotes, and 6K close votes) </li>
<li>I am a diligent flagger (over 2K helpful flags) and take plagiarism very seriously.</li>
<li>I am very responsive to feedback and criticism.</li>
<li>I visit Stack Overflow every day (visited 833 days, 234 consecutive)</li>
</ul>

<p>I would not make a good moderator because</p>

<ul>
<li>I have taken actions in the past that the community did not agree with. </li>
<li>I am younger than most of the other nominees, and admittedly not as experienced dealing with people and situations.</li>
</ul>

<p>I've only been an active member for the last two years, and I understand I still have a long way to go before I can earn your vote of confidence. However, I do very much care for this site as it has done so much for my career thus far, and I hope to be able to give back just as much (if not more) as Stack Overflow has given to me. </p>

<p><a href=""https://bit.ly/2SI6qDe"" rel=""nofollow noreferrer""><em>Questionnaire</em></a></p>
",4909087,,4909087,,3/5/2019 6:19,3/5/2019 6:19,,,,46,,,3/5/2019 1:17,CC BY-SA 4.0
14220321,1,14220323,,1/8/2013 17:06,,6468,1990758,"<p>How do I return the response/result from a function <code>foo</code> that makes an asynchronous request?</p>
<p>I am trying to return the value from the callback, as well as assigning the result to a local variable inside the function and returning that one, but none of those ways actually return the response ‚Äî they all return <code>undefined</code> or whatever the initial value of the variable <code>result</code> is.</p>
<p><strong>Example of an asynchronous function that accepts a callback</strong> (using jQuery's <code>ajax</code> function):</p>
<pre><code>function foo() {
    var result;

    $.ajax({
        url: '...',
        success: function(response) {
            result = response;
            // return response; // &lt;- I tried that one as well
        }
    });

    return result; // It always returns `undefined`
}
</code></pre>
<p><strong>Example using Node.js:</strong></p>
<pre><code>function foo() {
    var result;

    fs.readFile(&quot;path/to/file&quot;, function(err, data) {
        result = data;
        // return data; // &lt;- I tried that one as well
    });

    return result; // It always returns `undefined`
}
</code></pre>
<p><strong>Example using the <code>then</code> block of a promise:</strong></p>
<pre><code>function foo() {
    var result;

    fetch(url).then(function(response) {
        result = response;
        // return response; // &lt;- I tried that one as well
    });

    return result; // It always returns `undefined`
}
</code></pre>
",218196,,3499595,,7/6/2022 21:29,10/21/2022 10:51,How do I return the response from an asynchronous call?,<javascript><ajax><asynchronous>,44,3,2895,,,CC BY-SA 4.0
14220323,2,,14220321,1/8/2013 17:06,,6462,,"<blockquote>
<p><em>‚Üí For a more general explanation of asynchronous behaviour with different examples, see</em> <a href=""https://stackoverflow.com/q/23667086/218196"">Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference</a></p>
<p><em>‚Üí If you already understand the problem, skip to the possible solutions below.</em></p>
</blockquote>
<h1>The problem</h1>
<p>The <strong>A</strong> in <a href=""https://en.wikipedia.org/wiki/Ajax_(programming)"" rel=""noreferrer"">Ajax</a> stands for <a href=""https://www.merriam-webster.com/dictionary/asynchronous"" rel=""noreferrer""><strong>asynchronous</strong></a>. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, <code>$.ajax</code> returns immediately and the next statement, <code>return result;</code>, is executed before the function you passed as <code>success</code> callback was even called.</p>
<p>Here is an analogy which hopefully makes the difference between synchronous and asynchronous flow clearer:</p>
<h2>Synchronous</h2>
<p>Imagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer that you needed.</p>
<p>The same is happening when you make a function call containing &quot;normal&quot; code:</p>
<pre><code>function findItem() {
    var item;
    while(item_not_found) {
        // search
    }
    return item;
}

var item = findItem();

// Do something with item
doSomethingElse();
</code></pre>
<p>Even though <code>findItem</code> might take a long time to execute, any code coming after <code>var item = findItem();</code> has to <em>wait</em> until the function returns the result.</p>
<h2>Asynchronous</h2>
<p>You call your friend again for the same reason. But this time you tell him that you are in a hurry and he should <em>call you back</em> on your mobile phone. You hang up, leave the house, and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.</p>
<p>That's exactly what's happening when you do an Ajax request.</p>
<pre><code>findItem(function(item) {
    // Do something with the item
});
doSomethingElse();
</code></pre>
<p>Instead of waiting for the response, the execution continues immediately and the statement after the Ajax call is executed. To get the response eventually, you provide a function to be called once the response was received, a <em>callback</em> (notice something? <em>call back</em> ?). Any statement coming after that call is executed before the callback is called.</p>
<hr />
<h1>Solution(s)</h1>
<p><strong>Embrace the asynchronous nature of JavaScript!</strong> While certain asynchronous operations provide synchronous counterparts (so does &quot;Ajax&quot;), it's generally discouraged to use them, especially in a browser context.</p>
<p>Why is it bad do you ask?</p>
<p>JavaScript runs in the UI thread of the browser and any long-running process will lock the UI, making it unresponsive. Additionally, there is an upper limit on the execution time for JavaScript and the browser will ask the user whether to continue the execution or not.</p>
<p>All of this results in a really bad user experience. The user won't be able to tell whether everything is working fine or not. Furthermore, the effect will be worse for users with a slow connection.</p>
<p>In the following we will look at three different solutions that are all building on top of each other:</p>
<ul>
<li><strong>Promises with <code>async/await</code></strong> (ES2017+, available in older browsers if you use a transpiler or regenerator)</li>
<li><strong>Callbacks</strong> (popular in node)</li>
<li><strong>Promises with <code>then()</code></strong> (ES2015+, available in older browsers if you use one of the many promise libraries)</li>
</ul>
<p><strong>All three are available in current browsers, and node 7+.</strong></p>
<hr />
<h2>ES2017+: Promises with <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"" rel=""noreferrer""><code>async/await</code></a></h2>
<p>The ECMAScript version released in 2017 introduced <em>syntax-level support</em> for asynchronous functions. With the help of <code>async</code> and <code>await</code>, you can write asynchronous in a &quot;synchronous style&quot;. The code is still asynchronous, but it's easier to read/understand.</p>
<p><code>async/await</code> builds on top of promises: an <code>async</code> function always returns a promise. <code>await</code> &quot;unwraps&quot; a promise and either result in the value the promise was resolved with or throws an error if the promise was rejected.</p>
<p><strong>Important:</strong> You can only use <code>await</code> inside an <code>async</code> function or in a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"" rel=""noreferrer"">JavaScript module</a>. Top-level <code>await</code> is not supported outside of modules, so you might have to make an async IIFE (<a href=""https://en.wikipedia.org/wiki/Immediately_invoked_function_expression"" rel=""noreferrer"">Immediately Invoked Function Expression</a>) to start an <code>async</code> context if not using a module.</p>
<p>You can read more about <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"" rel=""noreferrer""><code>async</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"" rel=""noreferrer""><code>await</code></a> on MDN.</p>
<p>Here is an example that elaborates the <em>delay</em> function <code>findItem()</code> above:</p>
<pre><code>// Using 'superagent' which will return a promise.
var superagent = require('superagent')

// This is isn't declared as `async` because it already returns a promise
function delay() {
  // `delay` returns a promise
  return new Promise(function(resolve, reject) {
    // Only `delay` is able to resolve or reject the promise
    setTimeout(function() {
      resolve(42); // After 3 seconds, resolve the promise with value 42
    }, 3000);
  });
}

async function getAllBooks() {
  try {
    // GET a list of book IDs of the current user
    var bookIDs = await superagent.get('/user/books');
    // wait for 3 seconds (just for the sake of this example)
    await delay();
    // GET information about each book
    return superagent.get('/books/ids='+JSON.stringify(bookIDs));
  } catch(error) {
    // If any of the awaited promises was rejected, this catch block
    // would catch the rejection reason
    return null;
  }
}

// Start an IIFE to use `await` at the top level
(async function(){
  let books = await getAllBooks();
  console.log(books);
})();
</code></pre>
<p>Current <a href=""https://kangax.github.io/compat-table/es2016plus/#test-async_functions"" rel=""noreferrer"">browser</a> and <a href=""http://node.green/#ES2017-features-async-functions"" rel=""noreferrer"">node</a> versions support <code>async/await</code>. You can also support older environments by transforming your code to ES5 with the help of <a href=""https://github.com/facebook/regenerator"" rel=""noreferrer"">regenerator</a> (or tools that use regenerator, such as <a href=""https://babeljs.io/"" rel=""noreferrer"">Babel</a>).</p>
<hr />
<h2>Let functions accept <em>callbacks</em></h2>
<p>A callback is when function 1 is passed to function 2. Function 2 can call function 1 whenever it is ready. In the context of an asynchronous process, the callback will be called whenever the asynchronous process is done. Usually, the result is passed to the callback.</p>
<p>In the example of the question, you can make <code>foo</code> accept a callback and use it as <code>success</code> callback. So this</p>
<pre><code>var result = foo();
// Code that depends on 'result'
</code></pre>
<p>becomes</p>
<pre><code>foo(function(result) {
    // Code that depends on 'result'
});
</code></pre>
<p>Here we defined the function &quot;inline&quot; but you can pass any function reference:</p>
<pre><code>function myCallback(result) {
    // Code that depends on 'result'
}

foo(myCallback);
</code></pre>
<p><code>foo</code> itself is defined as follows:</p>
<pre><code>function foo(callback) {
    $.ajax({
        // ...
        success: callback
    });
}
</code></pre>
<p><code>callback</code> will refer to the function we pass to <code>foo</code> when we call it and we pass it on to <code>success</code>. I.e. once the Ajax request is successful, <code>$.ajax</code> will call <code>callback</code> and pass the response to the callback (which can be referred to with <code>result</code>, since this is how we defined the callback).</p>
<p>You can also process the response before passing it to the callback:</p>
<pre><code>function foo(callback) {
    $.ajax({
        // ...
        success: function(response) {
            // For example, filter the response
            callback(filtered_response);
        }
    });
}
</code></pre>
<p>It's easier to write code using callbacks than it may seem. After all, JavaScript in the browser is heavily event-driven (DOM events). Receiving the Ajax response is nothing else but an event.
Difficulties could arise when you have to work with third-party code, but most problems can be solved by just thinking through the application flow.</p>
<hr />
<h2>ES2015+: Promises with <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" rel=""noreferrer"">then()</a></h2>
<p>The <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" rel=""noreferrer"">Promise API</a> is a new feature of ECMAScript 6 (ES2015), but it has good <a href=""http://caniuse.com/#feat=promises"" rel=""noreferrer"" title=""caniuse"">browser support</a> already. There are also many libraries which implement the standard Promises API and provide additional methods to ease the use and composition of asynchronous functions (e.g., <a href=""https://github.com/petkaantonov/bluebird"" rel=""noreferrer"">bluebird</a>).</p>
<p>Promises are containers for <em>future</em> values. When the promise receives the value (it is <em>resolved</em>) or when it is canceled (<em>rejected</em>), it notifies all of its &quot;listeners&quot; who want to access this value.</p>
<p>The advantage over plain callbacks is that they allow you to decouple your code and they are easier to compose.</p>
<p>Here is an example of using a promise:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function delay() {
  // `delay` returns a promise
  return new Promise(function(resolve, reject) {
    // Only `delay` is able to resolve or reject the promise
    setTimeout(function() {
      resolve(42); // After 3 seconds, resolve the promise with value 42
    }, 3000);
  });
}

delay()
  .then(function(v) { // `delay` returns a promise
    console.log(v); // Log the value once it is resolved
  })
  .catch(function(v) {
    // Or do something else if it is rejected
    // (it would not happen in this example, since `reject` is not called).
  });</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>
</div>
</div>
</p>
<p>Applied to our Ajax call we could use promises like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function ajax(url) {
  return new Promise(function(resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.onload = function() {
      resolve(this.responseText);
    };
    xhr.onerror = reject;
    xhr.open('GET', url);
    xhr.send();
  });
}

ajax(""https://jsonplaceholder.typicode.com/todos/1"")
  .then(function(result) {
    console.log(result); // Code depending on result
  })
  .catch(function() {
    // An error occurred
  });</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>
</div>
</div>
</p>
<p>Describing all the advantages that promise offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. They provide a great abstraction and separation of your code.</p>
<p>More information about promises: <a href=""http://www.html5rocks.com/en/tutorials/es6/promises/"" rel=""noreferrer"">HTML5 rocks - JavaScript Promises</a>.</p>
<h3>Side note: jQuery's deferred objects</h3>
<p><a href=""https://stackoverflow.com/questions/4866721/what-are-deferred-objects"">Deferred objects</a> are jQuery's custom implementation of promises (before the Promise API was standardized). They behave almost like promises but expose a slightly different API.</p>
<p>Every Ajax method of jQuery already returns a &quot;deferred object&quot; (actually a promise of a deferred object) which you can just return from your function:</p>
<pre><code>function ajax() {
    return $.ajax(...);
}

ajax().done(function(result) {
    // Code depending on result
}).fail(function() {
    // An error occurred
});
</code></pre>
<h3>Side note: Promise gotchas</h3>
<p>Keep in mind that promises and deferred objects are just <em>containers</em> for a future value, they are not the value itself. For example, suppose you had the following:</p>
<pre><code>function checkPassword() {
    return $.ajax({
        url: '/password',
        data: {
            username: $('#username').val(),
            password: $('#password').val()
        },
        type: 'POST',
        dataType: 'json'
    });
}

if (checkPassword()) {
    // Tell the user they're logged in
}
</code></pre>
<p>This code misunderstands the above asynchronous issues. Specifically, <code>$.ajax()</code> doesn't freeze the code while it checks the '/password' page on your server - it sends a request to the server and while it waits, it immediately returns a jQuery Ajax Deferred object, not the response from the server. That means the <code>if</code> statement is going to always get this Deferred object, treat it as <code>true</code>, and proceed as though the user is logged in. Not good.</p>
<p>But the fix is easy:</p>
<pre><code>checkPassword()
.done(function(r) {
    if (r) {
        // Tell the user they're logged in
    } else {
        // Tell the user their password was bad
    }
})
.fail(function(x) {
    // Tell the user something bad happened
});
</code></pre>
<hr />
<h2>Not recommended: Synchronous &quot;Ajax&quot; calls</h2>
<p>As I mentioned, some(!) asynchronous operations have synchronous counterparts. I don't advocate their use, but for completeness' sake, here is how you would perform a synchronous call:</p>
<h3>Without jQuery</h3>
<p>If you directly use a <a href=""https://xhr.spec.whatwg.org/"" rel=""noreferrer""><code>XMLHttpRequest</code></a> object, pass <code>false</code> as third argument to <a href=""https://xhr.spec.whatwg.org/#the-open()-method"" rel=""noreferrer""><code>.open</code></a>.</p>
<h3>jQuery</h3>
<p>If you use <a href=""http://api.jquery.com/jQuery.ajax/"" rel=""noreferrer"">jQuery</a>, you can set the <code>async</code> option to <code>false</code>. Note that this option is <em>deprecated</em> since jQuery 1.8.
You can then either still use a <code>success</code> callback or access the <code>responseText</code> property of the <a href=""http://api.jquery.com/jQuery.ajax/#jqXHR"" rel=""noreferrer"">jqXHR object</a>:</p>
<pre><code>function foo() {
    var jqXHR = $.ajax({
        //...
        async: false
    });
    return jqXHR.responseText;
}
</code></pre>
<p>If you use any other jQuery Ajax method, such as <code>$.get</code>, <code>$.getJSON</code>, etc., you have to change it to <code>$.ajax</code> (since you can only pass configuration parameters to <code>$.ajax</code>).</p>
<p><strong>Heads up!</strong> It is not possible to make a synchronous <a href=""https://stackoverflow.com/questions/2067472/please-explain-jsonp"">JSONP</a> request. JSONP by its very nature is always asynchronous (one more reason to not even consider this option).</p>
",218196,,5648954,,4/8/2022 13:02,4/8/2022 13:02,,,,11,,,,CC BY-SA 4.0
45154269,6,,,7/17/2017 21:55,,6002,,"<h1>Nomination</h1>

<p>Hi, I'm Nathan Oliver. I would like to become one of your moderators. Stack Overflow has always helped me when learning to program. My early interactions with SO consisted of giving back by answering questions. Once I found out that the users, not just elected moderators, could moderate the site, I realized I could give back even more by helping to improve the quality of posts on SO. I love that we can make this site better just by taking out the trash (voting to close/delete) and editing borderline posts into quality submissions.</p>

<p>I'm a Room Owner of SOCVR, a chat room focused on site moderation. Over the last couple of years, my work with SOCVR has helped me tremendously to become a better site moderator - what to look for, how to handle edge cases, always being responsible to the community for my actions, and more. I get exposed to so many different scenarios to evaluate, which lets me judge new posts faster.</p>

<h1>Why me?</h1>

<ul>
<li>Room owner of a moderation focused chat room</li>
<li>Active on meta</li>
<li>Active on SO from 7am to at least 4pm US Central Time (12pm to 9pm UTC)</li>
<li>Helped moderators hunt for plagiarism</li>
<li>13.8K close votes with 3.5K close vote reviews.</li>
</ul>
",4342498,,4342498,,7/17/2017 21:55,7/17/2017 21:55,,,,29,,,7/17/2017 21:55,CC BY-SA 3.0
29478899,6,,,4/6/2015 20:13,,5885,,"<p><strong><a href=""http://meta.stackoverflow.com/a/290128"">Jon Clements' answers to your questions</a></strong></p>

<hr>

<p>I'm still here a (after yet another) year on with more experience of the community and with no less passion than I did before to help out where I can...</p>

<p>My beliefs/actions are still the same:</p>

<ul>
<li>editing and improving posts where possible (no point closing a question if it's reasonably salvageable by an edit), participating in close (especially to tidy up duplicates)/re-open, (un)delete votes and assisting with flagged posts</li>
<li>part of a community that's working on a system for a Python Wiki based on SO and building SO chat rooms</li>
<li>have spent several years dealing with conflicts as an IRC Operator and Channel Services Admin</li>
<li>being respectful, open-minded, patient and fair - just don't confuse that with being non-decisive or a ""walkover""</li>
<li>keep up to date with Meta (even if I don't say much that often)</li>
</ul>
",1252759,,811,,4/17/2015 19:31,4/17/2015 19:31,,,,24,,,4/6/2015 20:13,CC BY-SA 3.0
388282,2,,388242,12/23/2008 5:52,,5730,,"<h2>Beginner</h2>
<h3>Introductory, no previous programming experience</h3>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Book</th>
<th>Author(s)</th>
<th>Description</th>
<th>review</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0321714113"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>C++ Primer</em></a>* <br><br><sup>* Not to be confused with <a href=""https://rads.stackoverflow.com/amzn/click/com/0672326973"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>C++ Primer Plus</em></a> (Stephen Prata), with a significantly less favorable <a href=""//accu.org/bookreviews/2002/glassborow_1744"" rel=""noreferrer"">review</a>.</sup></td>
<td>Stanley Lippman, Jos√©e Lajoie, and Barbara E. Moo  (<strong>updated for C++11</strong>)</td>
<td>Coming at 1k pages, this is a very thorough introduction into C++ that covers just about everything in the language in a very accessible format and in great detail. The fifth edition (released August 16, 2012) covers C++11.</td>
<td><a href=""//accu.org/bookreviews/2012/glassborow_1848"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0321992784"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Programming: Principles and Practice Using C++</em></a></td>
<td>Bjarne Stroustrup, 2nd Edition - May 25, 2014 (<strong>updated for C++11/C++14</strong>)</td>
<td>An introduction to programming using C++ by the creator of the language. A good read, that assumes no previous programming experience, but is not only for beginners.</td>
<td></td>
</tr>
</tbody>
</table>
</div><h3>Introductory, with previous programming experience</h3>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Book</th>
<th>Author(s)</th>
<th>Description</th>
<th>review</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/B00F8CWGOS"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>A Tour of C++</em></a></td>
<td>Bjarne Stroustrup (<strong><a href=""https://rads.stackoverflow.com/amzn/click/com/0134997832"" rel=""noreferrer"" rel=""nofollow noreferrer"">2nd edition for C++17</a></strong>, <strong><a href=""https://rads.stackoverflow.com/amzn/click/com/0136816487"" rel=""noreferrer"" rel=""nofollow noreferrer"">3rd edition for C++20</a></strong>)</td>
<td>The ‚Äútour‚Äù is a quick (about 180 pages and 14 chapters) tutorial overview of all of standard C++ (language and standard library, <strong>and using C++11</strong>) at a moderately high level for people who already know C++ or at least are experienced programmers. This book is an extended version of the material that constitutes Chapters 2-5 of The C++ Programming Language, 4th edition.</td>
<td></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/020170353X"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Accelerated C++</em></a></td>
<td>Andrew Koenig and Barbara Moo, 1st Edition - August 24, 2000</td>
<td>This basically covers the same ground as the <em>C++ Primer</em>, but does so in a quarter of its space. This is largely because it does not attempt to be an introduction to <em>programming</em>, but an introduction to <em>C++</em> for people who've previously programmed in some other language. It has a steeper learning curve, but, for those who can cope with this, it is a very compact introduction to the language. (Historically, it broke new ground by being the first beginner's book to use a modern approach to teaching the language.) Despite this, the C++ it teaches is purely C++98.</td>
<td><a href=""//accu.org/bookreviews/2000/glassborow_1185"" rel=""noreferrer"">[Review]</a></td>
</tr>
</tbody>
</table>
</div><h3>Best practices</h3>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Book</th>
<th>Author(s)</th>
<th>Description</th>
<th>review</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0321334876"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Effective C++</em></a></td>
<td>Scott Meyers, 3rd Edition - May 22, 2005</td>
<td>This was written with the aim of being the best second book C++ programmers should read, and it succeeded. Earlier editions were aimed at programmers coming from C, the third edition changes this and targets programmers coming from languages like Java. It presents ~50 easy-to-remember rules of thumb along with their rationale in a very accessible (and enjoyable) style. For C++11 and C++14 the examples and a few issues are outdated and Effective Modern C++ should be preferred.</td>
<td><a href=""//accu.org/bookreviews/1998/glassborow_700"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/1491903996"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Effective Modern C++</em></a></td>
<td>Scott Meyers</td>
<td>This book is aimed at C++ programmers making the transition from C++03 to C++11 and C++14. This book can be treated like a continuation and &quot;correction&quot; of some parts of the previous book - &quot;Effective C++&quot;. They don't cover the same things, but keep similar item-based theme.</td>
<td><a href=""//accu.org/bookreviews/2019/floyd_1937"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0201749629"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Effective STL</em></a></td>
<td>Scott Meyers</td>
<td>This aims to do the same to the part of the standard library coming from the STL what <em>Effective C++</em> did to the language as a whole: It presents rules of thumb along with their rationale.</td>
<td></td>
</tr>
</tbody>
</table>
</div><hr />
<h2>Intermediate</h2>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Book</th>
<th>Author(s)</th>
<th>Description</th>
<th>review</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/020163371X"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>More Effective C++</em></a></td>
<td>Scott Meyers</td>
<td>Even more rules of thumb than <em>Effective C++</em>. Not as important as the ones in the first book, but still good to know.</td>
<td></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0201615622"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Exceptional C++</em></a></td>
<td>Herb Sutter</td>
<td>Presented as a set of puzzles, this has one of the best and thorough discussions of the proper resource management and exception safety in C++ through Resource Acquisition is Initialization (RAII) in addition to in-depth coverage of a variety of other topics including the pimpl idiom, name lookup, good class design, and the C++ memory model.</td>
<td><a href=""//accu.org/bookreviews/2000/griffiths_209"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/020170434X"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>More Exceptional C++</em></a></td>
<td>Herb Sutter</td>
<td>Covers additional exception safety topics not covered in <em>Exceptional C++</em>, in addition to discussion of effective object-oriented programming in C++ and correct use of the STL.</td>
<td><a href=""//accu.org/bookreviews/2002/glassborow_784"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0201760428"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Exceptional C++ Style</em></a></td>
<td>Herb Sutter</td>
<td>Discusses generic programming, optimization, and resource management; this book also has an excellent exposition of how to write modular code in C++ by using non-member functions and the single responsibility principle.</td>
<td><a href=""//accu.org/bookreviews/2005/goodliffe_107"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0321113586"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>C++ Coding Standards</em></a></td>
<td>Herb Sutter and Andrei Alexandrescu</td>
<td>‚ÄúCoding standards‚Äù here doesn't mean ‚Äúhow many spaces should I indent my code?‚Äù  This book contains 101 best practices, idioms, and common pitfalls that can help you to write correct, understandable, and efficient C++ code.</td>
<td><a href=""//accu.org/bookreviews/2004/glassborow_1439"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0201734842"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>C++ Templates: The Complete Guide</em></a></td>
<td>David Vandevoorde and Nicolai M. Josuttis</td>
<td>This is <em>the</em> book about templates as they existed before C++11.  It covers everything from the very basics to some of the most advanced template metaprogramming and explains every detail of how templates work (both conceptually and at how they are implemented) and discusses many common pitfalls.  Has excellent summaries of the One Definition Rule (ODR) and overload resolution in the appendices. A <a href=""https://rads.stackoverflow.com/amzn/click/com/0321714121"" rel=""noreferrer"" rel=""nofollow noreferrer"">second edition</a> covering C++11, C++14 and C++17 has been already published.</td>
<td><a href=""//accu.org/bookreviews/2020/floyd_1946"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""//leanpub.com/cpp17"" rel=""noreferrer""><em>C++ 17 - The Complete Guide</em></a></td>
<td>Nicolai M. Josuttis</td>
<td>This book describes all the new features introduced in the C++17 Standard covering everything from the simple ones like 'Inline Variables', 'constexpr if' all the way up to 'Polymorphic Memory Resources' and 'New and Delete with over aligned Data'.</td>
<td><a href=""//accu.org/bookreviews/2020/floyd_1943"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""//leanpub.com/cpp20"" rel=""noreferrer""><em>C++ 20 - The Complete Guide</em></a></td>
<td>Nicolai M. Josuttis</td>
<td>This book presents all the new language and library features of C++20. It covers the motivation and context of each new feature with examples and background information. The focus is on how these features impact day-to-day programming, what it means to combine them, and how to benefit from C++20 in practice. (Note that this book is <strong>published step-by-step</strong>.)</td>
<td></td>
</tr>
<tr>
<td><a href=""http://www.worldcolleges.info/sites/default/files/C++_In_Action.pdf"" rel=""noreferrer""><em>C++ in Action</em></a></td>
<td>Bartosz Milewski</td>
<td>This book explains C++ and its features by building an application from ground up.</td>
<td><a href=""//eli.thegreenplace.net/2003/09/12/book-review-c-in-action-by-bartosz-milewski"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""//www.manning.com/books/functional-programming-in-c-plus-plus"" rel=""noreferrer""><em>Functional Programming in C++</em></a></td>
<td>Ivan ƒåukiƒá</td>
<td>This book introduces functional programming techniques to modern C++ (C++11 and later). A very nice read for those who want to apply functional programming paradigms to C++.</td>
<td></td>
</tr>
</tbody>
</table>
</div><hr />
<h2>Advanced</h2>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Book</th>
<th>Author(s)</th>
<th>Description</th>
<th>review</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0201704315"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Modern C++ Design</em></a></td>
<td>Andrei Alexandrescu</td>
<td>A groundbreaking book on advanced generic programming techniques.  Introduces policy-based design, type lists, and fundamental generic programming idioms then explains how many useful design patterns (including small object allocators, functors, factories, visitors, and multi-methods) can be implemented efficiently, modularly, and cleanly using generic programming.</td>
<td><a href=""//accu.org/bookreviews/2001/glassborow_979"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0321227255"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>C++ Template Metaprogramming</em></a></td>
<td>David Abrahams and Aleksey Gurtovoy</td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/1933988770"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>C++ Concurrency In Action</em></a></td>
<td>Anthony Williams</td>
<td>A book covering C++11 concurrency support including the thread library, the atomics library, the C++ memory model, locks and mutexes, as well as issues of designing and debugging multithreaded applications. A <a href=""https://rads.stackoverflow.com/amzn/click/com/1617294691"" rel=""noreferrer"" rel=""nofollow noreferrer"">second edition</a> covering C++14 and C++17 has already been published.</td>
<td><a href=""//accu.org/bookreviews/2012/glassborow_1850"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/1460966163"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Advanced C++ Metaprogramming</em></a></td>
<td>Davide Di Gennaro</td>
<td>A pre-C++11 manual of TMP techniques, focused more on practice than theory.  There are a ton of snippets in this book, some of which are made obsolete by type traits, but the techniques, are nonetheless useful to know.  If you can put up with the quirky formatting/editing, it is easier to read than Alexandrescu, and arguably, more rewarding.  For more experienced developers, there is a good chance that you may pick up something about a dark corner of C++ (a quirk) that usually only comes about through extensive experience.</td>
<td></td>
</tr>
<tr>
<td><a href=""//www.pearson.com/store/p/large-scale-c-volume-i-process-and-architecture/P100001343596/9780201717068"" rel=""noreferrer""><em>Large Scale C++ volume I, Process and architecture</em></a> (2020)</td>
<td>John Lakos</td>
<td>Part one of a three-part series extending the older book 'Large Scale C++ Design'. Lakos explains battle-tested techniques to manage very big C++ software projects. If you work in a big C++ software project this is a great read, detailing the relationship between physical and logical structure, strategies for components, and their reuse.</td>
<td><a href=""//accu.org/bookreviews/2020/bruntlett_1953/"" rel=""noreferrer"">[Review]</a></td>
</tr>
</tbody>
</table>
</div><hr />
<h2>Reference Style - All Levels</h2>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Book</th>
<th>Author(s)</th>
<th>Description</th>
<th>review</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0321958322"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>The C++ Programming Language</em></a></td>
<td>Bjarne Stroustrup (<strong>updated for C++11</strong>)</td>
<td>The classic introduction to C++ by its creator. Written to parallel the classic K&amp;R, this indeed reads very much like it and covers just about everything from the core language to the standard library, to programming paradigms to the language's philosophy.</td>
<td><a href=""//accu.org/bookreviews/2014/lenton_1853"" rel=""noreferrer"">[Review]</a> <br><sub>Note: All releases of the C++ standard are tracked in the question &quot;<em><a href=""/questions/81656/where-do-i-find-the-current-c-or-c-standard-documents"">Where do I find the current C or C++ standard documents?</a></em>&quot;.</sub></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0321623215"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>C++ Standard Library Tutorial and Reference</em></a></td>
<td>Nicolai Josuttis (<strong>updated for C++11</strong>)</td>
<td><em>The</em> introduction and reference for the C++ Standard Library. The second edition (released on April 9, 2012) covers C++11.</td>
<td><a href=""//accu.org/bookreviews/2012/glassborow_1849"" rel=""noreferrer"">[Review]</a></td>
</tr>
<tr>
<td><a href=""https://rads.stackoverflow.com/amzn/click/com/0201183951"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>The C++ IO Streams and Locales</em></a></td>
<td>Angelika Langer and Klaus Kreft</td>
<td>There's very little to say about this book except that if you want to know anything about streams and locales, then this is the one place to find definitive answers.</td>
<td><a href=""//accu.org/bookreviews/2000/glassborow_200"" rel=""noreferrer"">[Review]</a></td>
</tr>
</tbody>
</table>
</div>
<p><strong>C++11/14/17/‚Ä¶ References:</strong></p>
<ul>
<li><p><a href=""http://eel.is/c++draft/"" rel=""noreferrer"">Working Draft, Standard for Programming Language C++</a> generated from  <a href=""https://github.com/cplusplus/draft"" rel=""noreferrer"">LaTeX sources published on GitHub</a>.</p>
</li>
<li><p><a href=""https://www.open-std.org/jtc1/sc22/wg21/docs/papers/"" rel=""noreferrer"">C++ Standard Papers</a>, latest standard working draft: <a href=""https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4868.pdf"" rel=""noreferrer"">ISO working draft</a></p>
</li>
<li><p><em>The C++<a href=""//www.iso.org/standard/50372.html"" rel=""noreferrer"">11</a>/<a href=""//www.iso.org/standard/64029.html"" rel=""noreferrer"">14</a>/<a href=""//www.iso.org/standard/68564.html"" rel=""noreferrer"">17</a> Standard (INCITS/ISO/IEC 14882:2011/2014/2017)</em> This, of course, is the final arbiter of all that is or isn't C++. Be aware, however, that it is intended purely as a reference for <em>experienced</em> users willing to devote considerable time and effort to its understanding. The C++17 standard is released in electronic form for 198 Swiss Francs.</p>
</li>
<li><p>The C++17 standard is available, but seemingly not in an economical form ‚Äì <a href=""//www.iso.org/standard/68564.html"" rel=""noreferrer"">directly from the ISO</a> it costs 198 Swiss Francs (about $200 US). For most people, the <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf"" rel=""noreferrer"">final draft before standardization</a> is more than adequate (and free). Many will prefer an <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4778.pdf"" rel=""noreferrer"">even newer draft</a>, documenting new features that are likely to be included in C++20.</p>
</li>
<li><p><a href=""https://github.com/cplusplus/draft/releases/download/n4868/n4868.pdf"" rel=""noreferrer"">C++20 draft</a> is available on GitHub as <a href=""https://github.com/cplusplus/draft/releases"" rel=""noreferrer"">some older too</a>.</p>
</li>
<li><p><a href=""//www.artima.com/shop/overview_of_the_new_cpp"" rel=""noreferrer""><em>Overview of the New C++ (C++11/14) (PDF only)</em></a> (Scott Meyers) (<strong>updated for C++14</strong>) These are the presentation materials (slides and some lecture notes) of a three-day training course offered by Scott Meyers, who's a highly respected author on C++. Even though the list of items is short, the quality is high.</p>
</li>
<li><p>The <a href=""//github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md"" rel=""noreferrer""><em>C++ Core Guidelines (C++11/14/17/‚Ä¶)</em></a> (edited by Bjarne Stroustrup and Herb Sutter) is an evolving online document consisting of a set of guidelines for using modern C++ well. The guidelines are focused on relatively higher-level issues, such as interfaces, resource management, memory management, and concurrency affecting application architecture and library design. The project was <a href=""//isocpp.org/blog/2015/09/bjarne-stroustrup-announces-cpp-core-guidelines"" rel=""noreferrer"">announced at CppCon'15 by Bjarne Stroustrup and others</a> and welcomes contributions from the community. Most guidelines are supplemented with a rationale and examples as well as discussions of possible tool support. Many rules are designed specifically to be automatically checkable by static analysis tools.</p>
</li>
<li><p>The <a href=""//isocpp.org/faq"" rel=""noreferrer""><em>C++ Super-FAQ</em></a> (Marshall Cline, Bjarne Stroustrup, and others) is an effort by the Standard C++ Foundation to unify the C++ FAQs previously maintained individually by Marshall Cline and Bjarne Stroustrup and also incorporating new contributions. The items mostly address issues at an intermediate level and are often written with a humorous tone. Not all items might be fully up to date with the latest edition of the C++ standard yet.</p>
</li>
<li><p><a href=""//cppreference.com"" rel=""noreferrer""><em>cppreference.com (C++03/11/14/17/‚Ä¶)</em></a> (initiated by Nate Kohl) is a wiki that summarizes the basic core-language features and has extensive documentation of the C++ standard library. The documentation is very precise but is easier to read than the official standard document and provides better navigation due to its wiki nature. The project documents all versions of the C++ standard and the site allows filtering the display for a specific version. The project was <a href=""//isocpp.org/blog/2015/07/cppcon-2014-cppreference.com-documenting-cpp-one-edit-at-a-time-nate-kohl"" rel=""noreferrer"">presented by Nate Kohl at CppCon'14</a>.</p>
</li>
</ul>
<hr />
<h2>Classics / Older</h2>
<p><strong>Note:</strong> Some information contained within these books may not be up-to-date or no longer considered best practice.</p>
<ul>
<li><p><a href=""https://rads.stackoverflow.com/amzn/click/com/0201543303"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>The Design and Evolution of C++</em></a> (Bjarne Stroustrup)  If you want to know <em>why</em> the language is the way it is, this book is where you find answers. This covers everything <em>before the standardization</em> of C++.</p>
</li>
<li><p><a href=""https://rads.stackoverflow.com/amzn/click/com/0201423391"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Ruminations on C++</em></a> - (Andrew Koenig and Barbara Moo) <a href=""//accu.org/bookreviews/1997/glassborow_776"" rel=""noreferrer"">[Review]</a></p>
</li>
<li><p><a href=""https://rads.stackoverflow.com/amzn/click/com/0201548550"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Advanced C++ Programming Styles and Idioms</em></a> (James Coplien)  A predecessor of the pattern movement, it describes many C++-specific ‚Äúidioms‚Äù. It's certainly a very good book and might still be worth a read if you can spare the time, but quite old and not up-to-date with current C++.</p>
</li>
<li><p><a href=""https://rads.stackoverflow.com/amzn/click/com/0201633620"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Large Scale C++ Software Design</em></a> (John Lakos)  Lakos explains techniques to manage very big C++ software projects. Certainly, a good read, if it only was up to date. It was written long before C++ 98 and misses on many features (e.g. namespaces) important for large-scale projects. If you need to work on a big C++ software project, you might want to read it, although you need to take more than a grain of salt with it. Not to be confused with the extended and later book series Large Scale C++ volume I-III.</p>
</li>
<li><p><a href=""https://rads.stackoverflow.com/amzn/click/com/0201834545"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Inside the C++ Object Model</em></a> (Stanley Lippman)  If you want to know how virtual member functions are commonly implemented and how base objects are commonly laid out in memory in a multi-inheritance scenario, and how all this affects performance, this is where you will find thorough discussions of such topics.</p>
</li>
<li><p><a href=""https://rads.stackoverflow.com/amzn/click/com/0201514591"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>The Annotated C++ Reference Manual</em></a> (Bjarne Stroustrup, Margaret A. Ellis) This book is quite outdated in the fact that it explores the 1989 C++ 2.0 version - Templates, exceptions, namespaces, and new casts were not yet introduced. Saying that however, this book goes through the entire C++ standard of the time explaining the rationale, the possible implementations, and features of the language. This is not a book to learn programming principles and patterns on C++, but to understand every aspect of the C++ language.</p>
</li>
<li><p><a href=""https://rads.stackoverflow.com/amzn/click/com/0139798099"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Thinking in C++</em></a> (Bruce Eckel, 2nd Edition, 2000).  Two volumes; is a tutorial-style <em>free</em> set of intro level books. Downloads: <a href=""//ia800100.us.archive.org/10/items/TICPP2ndEdVolOne/TICPP-2nd-ed-Vol-one.zip"" rel=""noreferrer"">vol 1</a>, <a href=""//ia800108.us.archive.org/24/items/TICPP2ndEdVolTwo/TICPP-2nd-ed-Vol-two.zip"" rel=""noreferrer"">vol 2</a>. Unfortunately, they're marred by a number of trivial errors (e.g. maintaining that temporaries are automatic <code>const</code>), with no official errata list. A partial 3<sup>rd</sup> party errata list is available at <a href=""http://www.computersciencelab.com/Eckel.htm"" rel=""noreferrer"">http://www.computersciencelab.com/Eckel.htm</a>, but it is apparently not maintained.</p>
</li>
<li><p><a href=""https://rads.stackoverflow.com/amzn/click/com/0201533936"" rel=""noreferrer"" rel=""nofollow noreferrer""><em>Scientific and Engineering C++: An Introduction to Advanced Techniques and Examples</em></a> (John Barton and Lee Nackman)
It is a comprehensive and very detailed book that tried to explain and make use of all the features available in C++, in the context of numerical methods. It introduced at the time several new techniques, such as the Curiously Recurring Template Pattern (CRTP, also called Barton-Nackman trick).
It pioneered several techniques such as dimensional analysis and automatic differentiation.
It came with a lot of compilable and useful code, ranging from an expression parser to a Lapack wrapper.
The code is <a href=""//www.informit.com/store/scientific-and-engineering-c-plus-plus-an-introduction-9780201533934"" rel=""noreferrer"">still available online</a>.
Unfortunately, the books have become somewhat outdated in the style and C++ features, however, it was an incredible tour-de-force at the time (1994, pre-STL).
The chapters on dynamics inheritance are a bit complicated to understand and not very useful.
An updated version of this classic book that includes move semantics and the lessons learned from the STL would be very nice.</p>
</li>
</ul>
",34509,litb,10686048,,8/5/2022 19:36,8/5/2022 19:36,,,,5,,,12/23/2008 5:52,CC BY-SA 4.0
3737139,1,3737177,,9/17/2010 16:24,,4969,794070,"<h3>What is this?</h3>
<p>This is a collection of questions that come up every now and then about syntax in PHP. This is also a Community Wiki, so everyone is invited to participate in maintaining this list.</p>
<h3>Why is this?</h3>
<p>It used to be hard to find questions about operators and other syntax tokens.¬π<br />
The main idea is to have links to existing questions on Stack Overflow, so it's easier for us to reference them, not to copy over content from the PHP Manual.</p>
<p>Note: Since January 2013, Stack Overflow <a href=""https://meta.stackexchange.com/questions/160100/a-new-search-engine-for-stack-exchange"">does support special characters</a>. Just surround the search terms by quotes, e.g. <a href=""https://stackoverflow.com/search?q=%5Bphp%5D%20%22===%22%20vs%20%22==%22""><code>[php] &quot;==&quot; vs &quot;===&quot;</code></a></p>
<h3><strong>What should I do here?</strong></h3>
<p>If you have been pointed here by someone because you have asked such a question, please find the particular syntax below. The linked pages to the <a href=""http://php.net/manual/en/index.php"" rel=""noreferrer"">PHP manual</a> along with the linked questions will likely answer your question then. If so, you are encouraged to upvote the answer. This list is not meant as a substitute for the help others provided.</p>
<h2>The List</h2>
<p>If your particular token is not listed below, you might find it in the <a href=""http://secure.php.net/manual/en/tokens.php"" rel=""noreferrer"">List of Parser Tokens</a>.</p>
<hr />
<p><code>&amp;</code> <a href=""http://secure.php.net/manual/en/language.operators.bitwise.php"" rel=""noreferrer"">Bitwise Operators</a> or <a href=""http://secure.php.net/manual/en/language.references.php"" rel=""noreferrer"">References</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1676897"">What does it mean to start a PHP function with an ampersand?</a></li>
<li><a href=""https://stackoverflow.com/questions/600202"">Understanding PHP &amp; (ampersand, bitwise and) operator</a></li>
<li><a href=""https://stackoverflow.com/questions/2209934/"">PHP &quot;&amp;&quot; operator</a></li>
<li><a href=""https://stackoverflow.com/questions/2376348"">Difference between &amp; and &amp;&amp; in PHP</a></li>
<li><a href=""https://stackoverflow.com/questions/1006652"">What does &quot;&amp;&quot; mean here in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/2297592"">What does &quot;&amp;&quot; mean in this case?</a></li>
<li><a href=""https://stackoverflow.com/questions/2422907"">What does the &quot;&amp;&quot; sign mean in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/2478149"">What does this signature mean (&amp;) in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/3957584"">How does the &quot;&amp;&quot; operator work in a PHP function?</a></li>
<li><a href=""https://stackoverflow.com/questions/4705262"">What does &amp; in &amp;2 mean in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/4705838"">When should I use a bitwise operator?</a></li>
<li><a href=""https://stackoverflow.com/questions/21058439"">Is there ever a need to use ampersand in front of an object?</a> (&amp;$)</li>
</ul>
<hr />
<p><code>=&amp;</code> <a href=""http://secure.php.net/manual/en/language.references.php"" rel=""noreferrer"">References</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1768343"">Reference assignment operator in PHP, =&amp;</a></li>
<li><a href=""https://stackoverflow.com/questions/1367454"">What do the &quot;=&amp;&quot; and &quot;&amp;=&quot; operators in PHP mean?</a></li>
<li><a href=""https://stackoverflow.com/questions/3177342"">What do the &#39;&amp;=&#39; and &#39;=&amp;&#39; operators do?</a></li>
<li><a href=""https://stackoverflow.com/questions/2081806"">What does =&amp; mean in PHP?</a></li>
</ul>
<hr />
<p><code>&amp;=</code> <a href=""http://secure.php.net/manual/en/language.operators.bitwise.php"" rel=""noreferrer"">Bitwise Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1367454"">What do the &quot;=&amp;&quot; and &quot;&amp;=&quot; operators in PHP mean?</a></li>
<li><a href=""https://stackoverflow.com/questions/3177342"">What do the &#39;&amp;=&#39; and &#39;=&amp;&#39; operators do?</a></li>
</ul>
<hr />
<p><code>&amp;&amp;</code> <a href=""http://secure.php.net/manual/en/language.operators.logical.php"" rel=""noreferrer"">Logical Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2803321"">&#39;AND&#39; vs &#39;&amp;&amp;&#39; as operator</a></li>
<li><a href=""https://stackoverflow.com/questions/2376348"">Difference between &amp; and &amp;&amp; in PHP</a></li>
<li><a href=""https://stackoverflow.com/questions/4746865"">Is there any difference between &quot;and&quot; and &quot;&amp;&amp;&quot; operators in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/4502092"">PHP - and / or keywords</a></li>
</ul>
<hr />
<p><code>%</code> <a href=""http://secure.php.net/manual/en/language.operators.arithmetic.php"" rel=""noreferrer"">Arithmetic Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1934173"">What does the percent sign mean in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/3204919"">What is the PHP operator % and how do I use it in real-world examples?</a></li>
</ul>
<hr />
<p><code>!!</code> <a href=""http://secure.php.net/manual/en/language.operators.logical.php"" rel=""noreferrer"">Logical Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2127260"">Double not (!!) operator in PHP</a></li>
</ul>
<hr />
<p><code>@</code> <a href=""http://secure.php.net/manual/en/language.operators.errorcontrol.php"" rel=""noreferrer"">Error Control Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1032161"">What is the use of the @ symbol in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/3551527"">&#39;At&#39; symbol before variable name in PHP: @$_POST</a></li>
<li><a href=""https://stackoverflow.com/questions/3984864"">PHP functions and @functions</a></li>
<li><a href=""https://stackoverflow.com/questions/4872340"">Should I use @ in my PHP code?</a></li>
<li><a href=""https://stackoverflow.com/questions/3621215"">What does @ mean in PHP?</a></li>
</ul>
<hr />
<p><code>?:</code> <a href=""http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary"" rel=""noreferrer"">Ternary Operator</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1080247"">What are the PHP operators &quot;?&quot; and &quot;:&quot; called and what do they do?</a></li>
<li><a href=""https://stackoverflow.com/questions/1993409"">?: operator (the &#39;Elvis operator&#39;) in PHP</a></li>
<li><a href=""https://stackoverflow.com/questions/4055355"">Where can I read about conditionals done with &quot;?&quot; and &quot;:&quot; (colon)?</a></li>
<li><a href=""https://stackoverflow.com/questions/4210187"">Using PHP 5.3 ?: operator</a></li>
</ul>
<hr />
<p><code>??</code> <a href=""https://www.php.net/manual/en/migration70.new-features.php#migration70.new-features.null-coalesce-op"" rel=""noreferrer"">Null Coalesce Operator</a> (since PHP 7)</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/7278835"">C#&#39;s null coalescing operator (??) in PHP</a></li>
</ul>
<hr />
<p><code>?string</code>
<code>?int</code>
<code>?array</code>
<code>?bool</code>
<code>?float</code> <a href=""https://www.php.net/manual/en/migration71.new-features.php"" rel=""noreferrer"">Nullable return type declaration</a> (since PHP 7.1)</p>
<ul>
<li><a href=""https://stackoverflow.com/a/54217328/250259"">Nullable return type declaration</a></li>
<li><a href=""https://stackoverflow.com/a/48450841"">Nullable parameter type declaration</a></li>
<li><a href=""https://stackoverflow.com/questions/48881489/php-method-argument-type-hinting-with-question-mark-type"">php method argument type hinting with question mark (?type)</a></li>
</ul>
<hr />
<p><code>:</code> <a href=""http://secure.php.net/manual/en/control-structures.alternative-syntax.php"" rel=""noreferrer"">Alternative syntax for control structures</a>, <a href=""http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary"" rel=""noreferrer"">Ternary Operator</a>, <a href=""https://www.php.net/manual/en/language.types.declarations.php"" rel=""noreferrer"">Return Type Declaration</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2908095"">What is &quot;:&quot; in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/4747761"">What does &quot;:&quot; mean in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/40346754"">Colon after method declaration?</a></li>
</ul>
<hr />
<p><code>::</code> <a href=""http://secure.php.net/manual/en/language.oop5.paamayim-nekudotayim.php"" rel=""noreferrer"">Scope Resolution Operator</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2903564"">What do two colons mean in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/2588298"">What&#39;s the meaning of the PHP token name T_PAAMAYIM_NEKUDOTAYIM?</a></li>
<li><a href=""https://stackoverflow.com/questions/3173501"">What&#39;s the difference between :: (double colon) and -&gt; (arrow) in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/1912902"">What exactly are late static bindings in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/4120755"">static::staticFunctionName()</a></li>
<li><a href=""https://stackoverflow.com/questions/8734823"">Unexpected T_PAAMAYIM_NEKUDOTAYIM, expecting T_NS_Separator</a></li>
</ul>
<hr />
<p><code>\</code> <a href=""http://php.net/namespaces"" rel=""noreferrer"">Namespaces</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/10788400"">Backslash in PHP -- what does it mean?</a></li>
<li><a href=""https://stackoverflow.com/questions/4790020"">What does a \ (backslash) do in PHP (5.3+)?</a></li>
</ul>
<hr />
<p><code>-&gt;</code> <a href=""http://secure.php.net/manual/en/language.oop5.php"" rel=""noreferrer"">Classes And Objects</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2588149"">What is the &quot;-&gt;&quot; PHP operator called?</a></li>
<li><a href=""https://stackoverflow.com/questions/3037526"">Where do we use the object operator &quot;-&gt;&quot; in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/3173501"">What&#39;s the difference between :: (double colon) and -&gt; (arrow) in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/2316370"">What does the PHP syntax $var1-&gt;$var2 mean?</a></li>
<li><a href=""https://stackoverflow.com/questions/4502587"">What does &quot;-&gt;&quot; mean/refer to in PHP?</a></li>
</ul>
<hr />
<p><code>=&gt;</code> <a href=""http://secure.php.net/manual/en/language.types.array.php"" rel=""noreferrer"">Arrays</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1241819"">What does &quot;=&gt;&quot; mean in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/1655336"">Use of =&gt; in PHP</a></li>
<li><a href=""https://stackoverflow.com/questions/4758791"">What does $k =&gt; $v in foreach($ex as $k=&gt;$v) mean?</a></li>
</ul>
<hr />
<p><code>^</code> <a href=""http://secure.php.net/manual/en/language.operators.bitwise.php"" rel=""noreferrer"">Bitwise Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2674920"">How does the bitwise operator XOR (&#39;^&#39;) work?</a></li>
<li><a href=""https://stackoverflow.com/questions/2724936"">What does ^ mean in PHP?</a></li>
</ul>
<hr />
<p><code>&gt;&gt;</code> <a href=""http://secure.php.net/manual/en/language.operators.bitwise.php"" rel=""noreferrer"">Bitwise Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2790329"">What does &gt;&gt; mean in PHP?</a></li>
</ul>
<hr />
<p><code>&lt;&lt;</code> <a href=""http://secure.php.net/manual/en/language.operators.bitwise.php"" rel=""noreferrer"">Bitwise Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/9718689/strange-print-behaviour-in-php"">Strange print behaviour in PHP?</a></li>
</ul>
<hr />
<p><code>&lt;&lt;&lt;</code> <a href=""http://php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc"" rel=""noreferrer"">Heredoc or Nowdoc</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/5539669"">What does &lt;&lt;&lt;END mean in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/1048481"">PHP expression &lt;&lt;&lt;EOB</a></li>
<li><a href=""https://stackoverflow.com/questions/3700042"">In PHP, what does &quot;&lt;&lt;&lt;&quot; represent?</a></li>
<li><a href=""https://stackoverflow.com/questions/2090081"">Using &lt;&lt;&lt;CON in PHP</a></li>
<li><a href=""https://stackoverflow.com/questions/2333779"">What&#39;s this kind of syntax in PHP?</a></li>
</ul>
<hr />
<p><code>=</code> <a href=""http://secure.php.net/manual/en/language.operators.assignment.php"" rel=""noreferrer"">Assignment Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2063480"">The 3 different equals</a></li>
</ul>
<hr />
<p><code>==</code> <a href=""http://secure.php.net/manual/en/language.operators.comparison.php"" rel=""noreferrer"">Comparison Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/80646"">How do the PHP equality (== double equals) and identity (=== triple equals) comparison operators differ?</a></li>
<li><a href=""https://stackoverflow.com/questions/1663451"">PHP != and == operators</a></li>
<li><a href=""https://stackoverflow.com/questions/2063480"">The 3 different equals</a></li>
<li><a href=""https://stackoverflow.com/questions/15813490/"">Type-juggling and (strict) greater/lesser-than comparisons in PHP</a></li>
</ul>
<hr />
<p><code>===</code> <a href=""http://secure.php.net/manual/en/language.operators.comparison.php"" rel=""noreferrer"">Comparison Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1117967"">What does &quot;===&quot; mean?</a></li>
<li><a href=""https://stackoverflow.com/questions/80646"">How do the PHP equality (== double equals) and identity (=== triple equals) comparison operators differ?</a></li>
<li><a href=""https://stackoverflow.com/questions/2063480"">The 3 different equals</a></li>
<li><a href=""https://stackoverflow.com/questions/15813490/"">Type-juggling and (strict) greater/lesser-than comparisons in PHP</a></li>
</ul>
<hr />
<p><code>!==</code> <a href=""http://secure.php.net/manual/en/language.operators.comparison.php"" rel=""noreferrer"">Comparison Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1298083"">What does !== comparison operator in PHP mean?</a></li>
<li><a href=""https://stackoverflow.com/questions/1139154"">Is there a difference between !== and != in PHP?</a></li>
</ul>
<hr />
<p><code>!=</code> <a href=""http://secure.php.net/manual/en/language.operators.comparison.php"" rel=""noreferrer"">Comparison Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1663451"">PHP != and == operators</a></li>
<li><a href=""https://stackoverflow.com/questions/1139154"">Is there a difference between !== and != in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/6356826"">comparing, !== versus !=</a></li>
<li><a href=""https://stackoverflow.com/questions/9671785/what-is-the-difference-between-and"">What is the difference between &lt;&gt; and !=</a></li>
</ul>
<hr />
<p><code>&lt;&gt;</code> <a href=""http://secure.php.net/manual/en/language.operators.comparison.php"" rel=""noreferrer"">Comparison Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/249312"">PHP operator &lt;&gt;</a></li>
<li><a href=""https://stackoverflow.com/questions/589391"">PHP&#39;s &lt;&gt; operator</a></li>
<li><a href=""https://stackoverflow.com/questions/9671785"">What is the difference between &lt;&gt; and !=</a></li>
<li><a href=""https://stackoverflow.com/questions/15813490/"">Type-juggling and (strict) greater/lesser-than comparisons in PHP</a></li>
</ul>
<hr />
<p><code>&lt;=&gt;</code> <a href=""http://secure.php.net/manual/en/language.operators.comparison.php"" rel=""noreferrer"">Comparison Operators</a> (since PHP 7.0)</p>
<ul>
<li><a href=""https://stackoverflow.com/a/31298778"">Spaceship (three way comparison) operator</a></li>
</ul>
<hr />
<p><code>|</code> <a href=""http://secure.php.net/manual/en/language.operators.bitwise.php"" rel=""noreferrer"">Bitwise Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2233835"">What is the difference between the | and || operators?</a></li>
<li><a href=""https://stackoverflow.com/questions/13811922"">What Does Using A Single Pipe &#39;|&#39; In A Function Argument Do?</a></li>
</ul>
<hr />
<p><code>||</code> <a href=""http://secure.php.net/manual/en/language.operators.logical.php"" rel=""noreferrer"">Logical Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2233835"">What is the difference between the | and || operators?</a></li>
<li><a href=""https://stackoverflow.com/questions/4502092"">PHP - and / or keywords</a></li>
<li><a href=""https://stackoverflow.com/questions/5666741"">What exactly does || mean?</a></li>
<li><a href=""https://stackoverflow.com/questions/12213283"">The behaviour of the or operator in PHP</a></li>
</ul>
<hr />
<p><code>~</code> <a href=""http://secure.php.net/manual/en/language.operators.bitwise.php"" rel=""noreferrer"">Bitwise Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1967360"">What does this ~ operator mean here?</a></li>
</ul>
<hr />
<p><code>+</code> <a href=""http://secure.php.net/manual/en/language.operators.arithmetic.php"" rel=""noreferrer"">Arithmetic Operators</a>, <a href=""http://secure.php.net/manual/en/language.operators.array.php"" rel=""noreferrer"">Array Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2140090"">+ operator for array in PHP?</a></li>
</ul>
<hr />
<p><code>+=</code> and <code>-=</code> <a href=""http://secure.php.net/manual/en/language.operators.assignment.php"" rel=""noreferrer"">Assignment Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/542995"">What is += used for?</a></li>
<li><a href=""https://stackoverflow.com/questions/7140158"">What does `$page -= 1` in my PHP document mean?</a></li>
</ul>
<hr />
<p><code>++</code> and <code>--</code> <a href=""http://secure.php.net/manual/en/language.operators.increment.php"" rel=""noreferrer"">Incrementing/Decrementing Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1968371"">Understanding Incrementing</a></li>
<li><a href=""https://stackoverflow.com/a/3737177"">Answer below</a></li>
</ul>
<hr />
<p><code>.=</code> <a href=""http://secure.php.net/manual/en/language.operators.assignment.php"" rel=""noreferrer"">Assignment Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2202331"">What is the difference between .= and += in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/1241432"">To understand a line of PHP</a></li>
</ul>
<hr />
<p><code>.</code> <a href=""http://secure.php.net/manual/en/language.operators.string.php"" rel=""noreferrer"">String Operators</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1466408"">Difference between period and comma when concatenating with echo versus return?</a></li>
<li><a href=""https://stackoverflow.com/questions/6484968"">What does a . (dot) do in PHP?</a></li>
</ul>
<hr />
<p><code>,</code> <a href=""http://php.net/manual/en/functions.arguments.php"" rel=""noreferrer"">Function Arguments</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1466408"">Difference between period and comma when concatenating with echo versus return?</a></li>
</ul>
<p><code>,</code> <a href=""http://php.net/manual/en/language.variables.scope.php"" rel=""noreferrer"">Variable Declarations</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/41383218"">What do commas mean in a variable declaration?</a></li>
</ul>
<hr />
<p><code>$$</code> <a href=""http://php.net/manual/en/language.variables.variable.php"" rel=""noreferrer"">Variable Variables</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2715654"">What does $$ (dollar dollar or double dollar) mean in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/4169882"">what is &quot;$$&quot; in PHP</a></li>
<li><a href=""https://stackoverflow.com/questions/4891872"">$function() and $$variable</a></li>
</ul>
<hr />
<p><code>`</code> <a href=""http://php.net/manual/en/language.operators.execution.php"" rel=""noreferrer"">Execution Operator</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/6002296"">What are the backticks `` called?</a></li>
</ul>
<hr />
<p><code>&lt;?=</code> <a href=""http://php.net/manual/en/ini.core.php#ini.short-open-tag"" rel=""noreferrer"">Short Open Tags</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/1963901"">What does this symbol mean in PHP &lt;?=</a></li>
<li><a href=""https://stackoverflow.com/questions/2020445"">What does &#39;&lt;?=&#39; mean in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/1959256/what-does-mean"">What does &lt;?= mean?</a></li>
</ul>
<hr />
<p><code>[]</code> <a href=""http://secure.php.net/manual/en/language.types.array.php"" rel=""noreferrer"">Arrays</a> (short syntax since PHP 5.4)</p>
<ul>
<li><a href=""https://stackoverflow.com/q/20709055/2758197"">PHP arrays... What is/are the meaning(s) of an empty bracket?</a></li>
<li><a href=""https://stackoverflow.com/questions/6933345"">What is the meaning of []</a></li>
<li><a href=""https://stackoverflow.com/questions/2431629"">Php array_push() vs myArray[]</a></li>
<li><a href=""https://stackoverflow.com/questions/3908576"">What does [] mean when reading from a PHP array?</a></li>
<li><a href=""https://stackoverflow.com/questions/4271874"">Shorthand for arrays: literal <code>$var = []</code> empty array</a></li>
</ul>
<hr />
<p><code>&lt;?</code> <a href=""http://secure.php.net/manual/en/language.basic-syntax.php"" rel=""noreferrer"">Opening and Closing tags</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/200640"">Are PHP short tags acceptable to use?</a></li>
</ul>
<hr />
<p><code>..</code> Double-dot character range</p>
<ul>
<li><a href=""https://stackoverflow.com/q/72865138/2943403"">Native PHP functions that allow double-dot range syntax</a></li>
</ul>
<hr />
<p><code>...</code> <a href=""http://php.net/manual/en/functions.arguments.php#functions.variable-arg-list"" rel=""noreferrer"">Argument unpacking</a> (since PHP 5.6)</p>
<hr />
<p><code>**</code> <a href=""http://secure.php.net/manual/en/migration56.new-features.php#migration56.new-features.exponentiation"" rel=""noreferrer"">Exponentiation</a> (since PHP 5.6)</p>
<hr />
<p><code>#</code> <a href=""http://php.net/manual/en/language.basic-syntax.comments.php"" rel=""noreferrer"">One-line shell-style comment</a></p>
<ul>
<li><a href=""https://stackoverflow.com/questions/9093609/can-i-use-hashes-for-comments-in-php"">Can I use hashes for comments in PHP?</a></li>
</ul>
<hr />
<p><code>?-&gt;</code> <a href=""https://stackoverflow.com/a/62178856/250259"">NullSafe Operator Calls</a> (since PHP 8.0)</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/12351737/is-there-a-nullsafe-operator-in-php"">Is there a &quot;nullsafe operator&quot; in PHP?</a></li>
</ul>
<hr />
",208809,anon,682673,anon,7/6/2022 14:21,7/6/2022 14:21,Reference ‚Äî What does this symbol mean in PHP?,<php><arguments><operators><symbols><semantics>,23,17,3058,,9/17/2010 16:24,CC BY-SA 4.0
6445794,2,,6441218,6/22/2011 20:01,,4968,,"<blockquote>
  <p>How can it be? Isn't the memory of a local variable inaccessible outside its function?</p>
</blockquote>

<p>You rent a hotel room. You put a book in the top drawer of the bedside table and go to sleep.  You check out the next morning, but ""forget"" to give back your key. You steal the key!</p>

<p>A week later, you return to the hotel, do not check in, sneak into your old room with your stolen key, and look in the drawer. Your book is still there. Astonishing!</p>

<p><strong>How can that be? Aren't the contents of a hotel room drawer inaccessible if you haven't rented the room?</strong></p>

<p>Well, obviously that scenario can happen in the real world no problem. There is no mysterious force that causes your book to disappear when you are no longer authorized to be in the room. Nor is there a mysterious force that prevents you from entering a room with a stolen key.</p>

<p>The hotel management is not <em>required</em> to remove your book. You didn't make a contract with them that said that if you leave stuff behind, they'll shred it for you. If you illegally re-enter your room with a stolen key to get it back, the hotel security staff is not <em>required</em> to catch you sneaking in. You didn't make a contract with them that said ""if I try to sneak back into my room later, you are required to stop me."" Rather, you signed a contract with them that said ""I promise not to sneak back into my room later"", a contract which <em>you broke</em>.</p>

<p>In this situation <strong>anything can happen</strong>. The book can be there -- you got lucky. Someone else's book can be there and yours could be in the hotel's furnace. Someone could be there right when you come in, tearing your book to pieces. The hotel could have removed the table and book entirely and replaced it with a wardrobe. The entire hotel could be just about to be torn down and replaced with a football stadium, and you are going to die in an explosion while you are sneaking around. </p>

<p>You don't know what is going to happen; when you checked out of the hotel and stole a key to illegally use later, you gave up the right to live in a predictable, safe world because <em>you</em> chose to break the rules of the system.</p>

<p><strong>C++ is not a safe language</strong>. It will cheerfully allow you to break the rules of the system. If you try to do something illegal and foolish like going back into a room you're not authorized to be in and rummaging through a desk that might not even be there anymore, C++ is not going to stop you. Safer languages than C++ solve this problem by restricting your power -- by having much stricter control over keys, for example.</p>

<h2>UPDATE</h2>

<p>Holy goodness, this answer is getting a lot of attention. (I'm not sure why -- I considered it to be just a ""fun"" little analogy, but whatever.)</p>

<p>I thought it might be germane to update this a bit with a few more technical thoughts.</p>

<p>Compilers are in the business of generating code which manages the storage of the data manipulated by that program. There are lots of different ways of generating code to manage memory, but over time two basic techniques have become entrenched. </p>

<p>The first is to have some sort of ""long lived"" storage area where the ""lifetime"" of each byte in the storage -- that is, the period of time when it is validly associated with some program variable -- cannot be easily predicted ahead of time. The compiler generates calls into a ""heap manager"" that knows how to dynamically allocate storage when it is needed and reclaim it when it is no longer needed.</p>

<p>The second method is to have a ‚Äúshort-lived‚Äù storage area where the lifetime of each byte is well known. Here, the lifetimes follow a ‚Äúnesting‚Äù pattern. The longest-lived of these short-lived variables will be allocated before any other short-lived variables, and will be freed last. Shorter-lived variables will be allocated after the longest-lived ones, and will be freed before them. The lifetime of these shorter-lived variables is ‚Äúnested‚Äù within the lifetime of longer-lived ones.</p>

<p>Local variables follow the latter pattern; when a method is entered, its local variables come alive. When that method calls another method, the new method's local variables come alive. They'll be dead before the first method's local variables are dead.  The relative order of the beginnings and endings of lifetimes of storages associated with local variables can be worked out ahead of time.</p>

<p>For this reason, local variables are usually generated as storage on a ""stack"" data structure, because a stack has the property that the first thing pushed on it is going to be the last thing popped off. </p>

<p>It's like the hotel decides to only rent out rooms sequentially, and you can't check out until everyone with a room number higher than you has checked out. </p>

<p>So let's think about the stack. In many operating systems you get one stack per thread and the stack is allocated to be a certain fixed size. When you call a method, stuff is pushed onto the stack. If you then pass a pointer to the stack back out of your method, as the original poster does here, that's just a pointer to the middle of some entirely valid million-byte memory block. In our analogy, you check out of the hotel; when you do, you just checked out of the highest-numbered occupied room.  If no one else checks in after you, and you go back to your room illegally, all your stuff is guaranteed to still be there <em>in this particular hotel</em>.</p>

<p>We use stacks for temporary stores because they are really cheap and easy. An implementation of C++ is not required to use a stack for storage of locals; it could use the heap. It doesn't, because that would make the program slower. </p>

<p>An implementation of C++ is not required to leave the garbage you left on the stack untouched so that you can come back for it later illegally; it is perfectly legal for the compiler to generate code that turns back to zero everything in the ""room"" that you just vacated. It doesn't because again, that would be expensive.</p>

<p>An implementation of C++ is not required to ensure that when the stack logically shrinks, the addresses that used to be valid are still mapped into memory. The implementation is allowed to tell the operating system ""we're done using this page of stack now. Until I say otherwise, issue an exception that destroys the process if anyone touches the previously-valid stack page"".  Again, implementations do not actually do that because it is slow and unnecessary.</p>

<p>Instead, implementations let you make mistakes and get away with it. Most of the time. Until one day something truly awful goes wrong and the process explodes.</p>

<p>This is problematic. There are a lot of rules and it is very easy to break them accidentally. I certainly have many times. And worse, the problem often only surfaces when memory is detected to be corrupt billions of nanoseconds after the corruption happened, when it is very hard to figure out who messed it up.</p>

<p>More memory-safe languages solve this problem by restricting your power. In ""normal"" C# there simply is no way to take the address of a local and return it or store it for later. You can take the address of a local, but the language is cleverly designed so that it is impossible to use it after the lifetime of the local ends. In order to take the address of a local and pass it back, you have to put the compiler in a special ""unsafe"" mode, <em>and</em> put the word ""unsafe"" in your program, to call attention to the fact that you are probably doing something dangerous that could be breaking the rules. </p>

<p>For further reading:</p>

<ul>
<li><p>What if C# did allow returning references? Coincidentally that is the subject of today's blog post:</p>

<p><a href=""https://ericlippert.com/2011/06/23/ref-returns-and-ref-locals/"" rel=""noreferrer"">https://ericlippert.com/2011/06/23/ref-returns-and-ref-locals/</a></p></li>
<li><p>Why do we use stacks to manage memory? Are value types in C# always stored on the stack? How does virtual memory work? And many more topics in how the C# memory manager works. Many of these articles are also germane to C++ programmers:</p>

<p><a href=""https://ericlippert.com/tag/memory-management/"" rel=""noreferrer"">https://ericlippert.com/tag/memory-management/</a></p></li>
</ul>
",88656,,4415734,,2/21/2020 18:15,2/21/2020 18:15,,,,48,,,,CC BY-SA 4.0
37576787,2,,37576685,6/1/2016 19:02,,4817,,"<p>Sure the code does work, but I'm pretty sure it doesn't do what you expect it to do. It just fires off multiple asynchronous calls, but the <code>printFiles</code> function does immediately return after that.</p>

<h3>Reading in sequence</h3>

<p>If you want to read the files in sequence, <strong>you cannot use <code>forEach</code></strong> indeed. Just use a modern <code>for ‚Ä¶ of</code> loop instead, in which <code>await</code> will work as expected:</p>

<pre><code>async function printFiles () {
  const files = await getFilePaths();

  for (const file of files) {
    const contents = await fs.readFile(file, 'utf8');
    console.log(contents);
  }
}
</code></pre>

<h3>Reading in parallel</h3>

<p>If you want to read the files in parallel, <strong>you cannot use <code>forEach</code></strong> indeed. Each of the <code>async</code> callback function calls does return a promise, but you're throwing them away instead of awaiting them. Just use <code>map</code> instead, and you can await the array of promises that you'll get with <code>Promise.all</code>:</p>

<pre><code>async function printFiles () {
  const files = await getFilePaths();

  await Promise.all(files.map(async (file) =&gt; {
    const contents = await fs.readFile(file, 'utf8')
    console.log(contents)
  }));
}
</code></pre>
",1048572,,2697506,,2/8/2020 23:30,2/8/2020 23:30,,,,38,,,,CC BY-SA 4.0
8881376,2,,8881291,1/16/2012 14:26,,4661,,"<p><strong>Strings are immutable</strong>. That means once you've created the <code>String</code>, if another process can dump memory, there's no way (aside from <a href=""https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29"" rel=""noreferrer"">reflection</a>) you can get rid of the data before <a href=""https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29"" rel=""noreferrer"">garbage collection</a> kicks in.</p>

<p>With an array, you can explicitly wipe the data after you're done with it. You can overwrite the array with anything you like, and the password won't be present anywhere in the system, even before garbage collection.</p>

<p>So yes, this <em>is</em> a security concern - but even using <code>char[]</code> only reduces the window of opportunity for an attacker, and it's only for this specific type of attack.</p>

<p>As noted in the comments, it's possible that arrays being moved by the garbage collector will leave stray copies of the data in memory. I believe this is implementation-specific - the garbage collector <em>may</em> clear all memory as it goes, to avoid this sort of thing. Even if it does, there's still the time during which the <code>char[]</code> contains the actual characters as an attack window.</p>
",22656,,4298200,,4/20/2018 17:50,4/20/2018 17:50,,,,22,,,,CC BY-SA 3.0
33689859,6,,,11/13/2015 9:49,,4325,,"<p><strong><a href=""http://meta.stackoverflow.com/a/310430"">deceze's answers to your questions</a></strong></p>

<hr>

<p>For anyone who has ever wondered: ""deceze"" stands for my initials, D. C. Z.; it's not a misspelling of ""decease"". You can call me David. You may have seen me around, I've been here a while. I've been here so long that a lot of the time I answer questions by closing them as duplicates of answers I've written before, or of answers I've seen a million times already. I love seeing and contributing new content, but quite honestly a lot of things here just need categorising, sorting and moderation by now, since the existing library of content is already so well established.</p>

<p>This might sound like I'm down on Stack Overflow, but I'm really not. I'm still here regularly. Even though I've got one more kid now than I did during the last election, I'm <em>still</em> here a lot. Stack Overflow is such a fantastic collection of knowledge accumulated by so many people, it simply must be preserved, curated and carefully extended. As a moderator, I'd see this as my primary task: keeping Stack Overflow usable for the purpose of finding knowledge. Squabbles, disputes and misdeeds will be resolved erring on the side of this vast knowledge pool, not any one particular user.</p>
",476,,811,,11/20/2015 19:52,11/20/2015 19:52,,,,20,,,11/13/2015 9:49,CC BY-SA 3.0
21947627,2,,21947452,2/22/2014 0:02,,4228,,"<p><em>Pure speculation</em> is that you're using a terminal that attempts to do <a href=""http://en.wikipedia.org/wiki/Word_wrap"" rel=""noreferrer"">word-wrapping</a> rather than character-wrapping, and treats <code>B</code> as a word character but <code>#</code> as a non-word character. So when it reaches the end of a line and searches for a place to break the line, it sees a <code>#</code> almost immediately and happily breaks there; whereas with the <code>B</code>, it has to keep searching for longer, and may have more text to wrap (which may be expensive on some terminals, e.g., outputting backspaces, then outputting spaces to overwrite the letters being wrapped).</p>

<p>But that's pure speculation.</p>
",157247,,157247,,3/13/2017 7:16,3/13/2017 7:16,,,,8,,,2/22/2014 0:02,CC BY-SA 3.0
29485915,6,,,4/7/2015 7:15,,4108,,"<p><strong><a href=""http://meta.stackoverflow.com/a/290162"">deceze's answers to your questions</a></strong></p>

<hr>

<p>I've been following Stack Overflow literally from before its beginning (6-8 anyone?). Within the first year or so of its existence it became quite a major point of influence for me. I've learned and grown from it in my professional career enormously. And while I'm still learning from it, at some point my interaction with Stack Overflow tipped over into me ""putting in"" more than ""getting out"". I like the community, the site, the interaction model. It works. It accomplishes its design goal each and every day. My personal experience with it is all the proof I need for that.</p>

<p>Since my interaction with the community has become more and more meta over time, nominating myself for moderator seems like the logical next step. I'm often mostly curating the site with the few tools I have available anyway; if you think I'm doing a decent job at that and would be okay with giving me access to more tools, I'd be happy to wield them.</p>

<p>Some quick third-person facts about me:</p>

<ul>
<li>is mostly active in LAMP-stack related tags from PHP over Python, MySQL, Postgres, Javascript to AngularJS</li>
<li>has somehow managed to visit the site every day, even while his son was born</li>
<li>has problems with character limi</li>
</ul>
",476,,811,,4/17/2015 19:25,4/17/2015 19:25,,,,44,,,4/7/2015 7:15,CC BY-SA 3.0
2612815,2,,2612802,4/10/2010 8:55,,3907,,"<p><code>new_list = my_list</code> doesn't actually create a second list. The assignment just copies the reference to the list, not the actual list, so both <code>new_list</code> and <code>my_list</code> refer to the same list after the assignment.</p>
<p>To actually copy the list, you have several options:</p>
<ul>
<li><p>You can use the builtin <a href=""https://docs.python.org/library/stdtypes.html#mutable-sequence-types"" rel=""noreferrer""><code>list.copy()</code></a> method (available since Python 3.3):</p>
<pre><code>new_list = old_list.copy()
</code></pre>
</li>
<li><p>You can slice it:</p>
<pre><code>new_list = old_list[:]
</code></pre>
<p><a href=""https://en.wikipedia.org/wiki/Alex_Martelli"" rel=""noreferrer"">Alex Martelli</a>'s opinion (at least <a href=""https://www.youtube.com/watch?v=g7V89K8QfgQ"" rel=""noreferrer"">back in 2007</a>) about this is, that <em>it is a weird syntax and it does not make sense to use it ever</em>. ;) (In his opinion, the next one is more readable).</p>
</li>
<li><p>You can use the built in <a href=""https://docs.python.org/library/stdtypes.html#list"" rel=""noreferrer""><code>list()</code></a> constructor:</p>
<pre><code>new_list = list(old_list)
</code></pre>
</li>
<li><p>You can use generic <a href=""https://docs.python.org/library/copy.html#copy.copy"" rel=""noreferrer""><code>copy.copy()</code></a>:</p>
<pre><code>import copy
new_list = copy.copy(old_list)
</code></pre>
<p>This is a little slower than <code>list()</code> because it has to find out the datatype of <code>old_list</code> first.</p>
</li>
<li><p>If you need to copy the elements of the list as well, use generic <a href=""https://docs.python.org/library/copy.html#copy.deepcopy"" rel=""noreferrer""><code>copy.deepcopy()</code></a>:</p>
<pre><code>import copy
new_list = copy.deepcopy(old_list)
</code></pre>
<p>Obviously the slowest and most memory-needing method, but sometimes unavoidable. This operates recursively; it will handle any number of levels of nested lists (or other containers).</p>
</li>
</ul>
<p><strong>Example:</strong></p>
<pre><code>import copy

class Foo(object):
    def __init__(self, val):
         self.val = val

    def __repr__(self):
        return f'Foo({self.val!r})'

foo = Foo(1)

a = ['foo', foo]
b = a.copy()
c = a[:]
d = list(a)
e = copy.copy(a)
f = copy.deepcopy(a)

# edit orignal list and instance 
a.append('baz')
foo.val = 5

print(f'original: {a}\nlist.copy(): {b}\nslice: {c}\nlist(): {d}\ncopy: {e}\ndeepcopy: {f}')
</code></pre>
<p>Result:</p>
<pre><code>original: ['foo', Foo(5), 'baz']
list.copy(): ['foo', Foo(5)]
slice: ['foo', Foo(5)]
list(): ['foo', Foo(5)]
copy: ['foo', Foo(5)]
deepcopy: ['foo', Foo(1)]
</code></pre>
",218196,,4518341,,8/16/2022 0:48,8/16/2022 0:48,,,,4,,,,CC BY-SA 4.0
215422,2,,7074,10/18/2008 18:52,,3749,,"
<p>Just for the sake of completeness, here's a brain dump of related information...</p>
<p>As others have noted, <code>string</code> is an alias for <code>System.String</code>. Assuming your code using <code>String</code> compiles to <code>System.String</code> (i.e. you haven't got a using directive for some other namespace with a different <code>String</code> type), they compile to the same code, so at execution time there is no difference whatsoever. This is just one of the aliases in C#. The complete list is:</p>
<pre class=""lang-c# prettyprint-override""><code>object:  System.Object
string:  System.String
bool:    System.Boolean
byte:    System.Byte
sbyte:   System.SByte
short:   System.Int16
ushort:  System.UInt16
int:     System.Int32
uint:    System.UInt32
long:    System.Int64
ulong:   System.UInt64
float:   System.Single
double:  System.Double
decimal: System.Decimal
char:    System.Char
</code></pre>
<p>Apart from <code>string</code> and <code>object</code>, the aliases are all to value types. <code>decimal</code> is a value type, but not a primitive type in the CLR. The only primitive type which doesn't have an alias is <code>System.IntPtr</code>.</p>
<p>In the spec, the value type aliases are known as &quot;simple types&quot;. Literals can be used for constant values of every simple type; no other value types have literal forms available. (Compare this with VB, which allows <code>DateTime</code> literals, and has an alias for it too.)</p>
<p>There is one circumstance in which you <em>have</em> to use the aliases: when explicitly specifying an enum's underlying type. For instance:</p>
<pre class=""lang-c# prettyprint-override""><code>public enum Foo : UInt32 {} // Invalid
public enum Bar : uint   {} // Valid
</code></pre>
<p>That's just a matter of the way the spec defines enum declarations - the part after the colon has to be the <em>integral-type</em> production, which is one token of <code>sbyte</code>, <code>byte</code>, <code>short</code>, <code>ushort</code>, <code>int</code>, <code>uint</code>, <code>long</code>, <code>ulong</code>, <code>char</code>... as opposed to a <em>type</em> production as used by variable declarations for example. It doesn't indicate any other difference.</p>
<p>Finally, when it comes to which to use: personally I use the aliases everywhere for the implementation, but the CLR type for any APIs. It really doesn't matter too much which you use in terms of implementation - consistency among your team is nice, but no-one else is going to care. On the other hand, it's genuinely important that if you refer to a type in an API, you do so in a language-neutral way. A method called <code>ReadInt32</code> is unambiguous, whereas a method called <code>ReadInt</code> requires interpretation. The caller could be using a language that defines an <code>int</code> alias for <code>Int16</code>, for example. The .NET framework designers have followed this pattern, good examples being in the <code>BitConverter</code>, <code>BinaryReader</code> and <code>Convert</code> classes.</p>
",22656,Jon Skeet,22656,Jon Skeet,10/18/2020 5:47,10/18/2020 5:47,,,,4,,,10/4/2012 10:37,CC BY-SA 4.0
21686985,6,,,2/10/2014 20:13,,3508,,"<p><strong><a href=""http://meta.stackexchange.com/a/221998/235416"">Jon's answers to your questions</a></strong></p>

<hr>

<p><strong>I'm still here a year on with more experience of the community and with no less passion than I did before to help out where I can...</strong> </p>

<p>I haven't changed the below, as apart from being a year later, it's still the same :)</p>

<p><strong>Activities / experience / character</strong></p>

<ul>
<li>editing and improving posts where possible (no point closing a question if it's reasonably salvageable by an edit), participating in close (especially to tidy up duplicates)/re-open, (un)delete votes and assisting with flagged posts</li>
<li>working on a system for a Python Wiki based on SO and building SO chat rooms</li>
<li>have spent several years dealing with conflicts as an IRC Operator and Channel Services Admin</li>
<li>being respectful, open-minded, patient and fair - just don't confuse that with being non-decisive or a ""walkover""</li>
<li>keep up to date with Meta (even if I don't say much that often)</li>
<li>don't think I'll be going away from SO any time soon...</li>
<li>based in the UK</li>
</ul>
",1252759,,-1,,4/25/2014 11:18,2/19/2014 20:10,,,,27,,,2/10/2014 20:13,CC BY-SA 3.0
2707195,2,,1673841,4/25/2010 4:51,,3476,,"<p>You can find an overview of a lot of design patterns in <a href=""https://en.wikipedia.org/wiki/Software_design_pattern#Classification_and_list"" rel=""noreferrer"">Wikipedia</a>. It also mentions which patterns are mentioned by GoF. I'll sum them up here and try to assign as many pattern implementations as possible, found in both the Java SE and Java EE APIs.</p>
<hr />
<h2><a href=""http://en.wikipedia.org/wiki/Creational_pattern"" rel=""noreferrer"">Creational patterns</a></h2>
<h3><a href=""http://en.wikipedia.org/wiki/Abstract_factory_pattern"" rel=""noreferrer"">Abstract factory</a> <sup><sub>(recognizeable by creational methods returning the factory itself which in turn can be used to create another abstract/interface type)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#newInstance--"" rel=""noreferrer""><code>javax.xml.parsers.DocumentBuilderFactory#newInstance()</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--"" rel=""noreferrer""><code>javax.xml.transform.TransformerFactory#newInstance()</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--"" rel=""noreferrer""><code>javax.xml.xpath.XPathFactory#newInstance()</code></a></li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Builder_pattern"" rel=""noreferrer"">Builder</a> <sup><sub>(recognizeable by creational methods returning the instance itself)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html#append-boolean-"" rel=""noreferrer""><code>java.lang.StringBuilder#append()</code></a> (unsynchronized)</li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html#append-boolean-"" rel=""noreferrer""><code>java.lang.StringBuffer#append()</code></a> (synchronized)</li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#put-byte-"" rel=""noreferrer""><code>java.nio.ByteBuffer#put()</code></a> (also on <a href=""http://docs.oracle.com/javase/8/docs/api/java/nio/CharBuffer.html#put-char-"" rel=""noreferrer""><code>CharBuffer</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/nio/ShortBuffer.html#put-short-"" rel=""noreferrer""><code>ShortBuffer</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/nio/IntBuffer.html#put-int-"" rel=""noreferrer""><code>IntBuffer</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/nio/LongBuffer.html#put-long-"" rel=""noreferrer""><code>LongBuffer</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/nio/FloatBuffer.html#put-float-"" rel=""noreferrer""><code>FloatBuffer</code></a> and <a href=""http://docs.oracle.com/javase/8/docs/api/java/nio/DoubleBuffer.html#put-double-"" rel=""noreferrer""><code>DoubleBuffer</code></a>)</li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/javax/swing/GroupLayout.Group.html#addComponent-java.awt.Component-"" rel=""noreferrer""><code>javax.swing.GroupLayout.Group#addComponent()</code></a></li>
<li>All implementations of <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Appendable.html"" rel=""noreferrer""><code>java.lang.Appendable</code></a></li>
<li><a href=""https://docs.oracle.com/javase/9/docs/api/java/util/stream/Stream.Builder.html"" rel=""noreferrer""><code>java.util.stream.Stream.Builder</code></a></li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Factory_method_pattern"" rel=""noreferrer"">Factory method</a> <sup><sub>(recognizeable by creational methods returning an implementation of an abstract/interface type)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Calendar.html#getInstance--"" rel=""noreferrer""><code>java.util.Calendar#getInstance()</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-"" rel=""noreferrer""><code>java.util.ResourceBundle#getBundle()</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html#getInstance--"" rel=""noreferrer""><code>java.text.NumberFormat#getInstance()</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html#forName-java.lang.String-"" rel=""noreferrer""><code>java.nio.charset.Charset#forName()</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLStreamHandlerFactory.html"" rel=""noreferrer""><code>java.net.URLStreamHandlerFactory#createURLStreamHandler(String)</code></a> (Returns singleton object per protocol)</li>
<li><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html#of(E)"" rel=""noreferrer""><code>java.util.EnumSet#of()</code></a></li>
<li><a href=""https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller--"" rel=""noreferrer""><code>javax.xml.bind.JAXBContext#createMarshaller()</code></a> and other similar methods</li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Prototype_pattern"" rel=""noreferrer"">Prototype</a> <sup><sub>(recognizeable by creational methods returning a <em>different</em> instance of itself with the same properties)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--"" rel=""noreferrer""><code>java.lang.Object#clone()</code></a> (the class has to implement <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Cloneable.html"" rel=""noreferrer""><code>java.lang.Cloneable</code></a>)</li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Singleton_pattern"" rel=""noreferrer"">Singleton</a> <sup><sub>(recognizeable by creational methods returning the <em>same</em> instance (usually of itself) everytime)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#getRuntime--"" rel=""noreferrer""><code>java.lang.Runtime#getRuntime()</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/awt/Desktop.html#getDesktop--"" rel=""noreferrer""><code>java.awt.Desktop#getDesktop()</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getSecurityManager--"" rel=""noreferrer""><code>java.lang.System#getSecurityManager()</code></a></li>
</ul>
<hr />
<h2><a href=""http://en.wikipedia.org/wiki/Structural_pattern"" rel=""noreferrer"">Structural patterns</a></h2>
<h3><a href=""http://en.wikipedia.org/wiki/Adapter_pattern"" rel=""noreferrer"">Adapter</a> <sup><sub>(recognizeable by creational methods taking an instance of <em>different</em> abstract/interface type and returning an implementation of own/another abstract/interface type which <em>decorates/overrides</em> the given instance)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-"" rel=""noreferrer""><code>java.util.Arrays#asList()</code></a></li>
<li><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-"" rel=""noreferrer""><code>java.util.Collections#list()</code></a></li>
<li><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-"" rel=""noreferrer""><code>java.util.Collections#enumeration()</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/io/InputStreamReader.html#InputStreamReader-java.io.InputStream-"" rel=""noreferrer""><code>java.io.InputStreamReader(InputStream)</code></a> (returns a <code>Reader</code>)</li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/io/OutputStreamWriter.html#OutputStreamWriter-java.io.OutputStream-"" rel=""noreferrer""><code>java.io.OutputStreamWriter(OutputStream)</code></a> (returns a <code>Writer</code>)</li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-"" rel=""noreferrer""><code>javax.xml.bind.annotation.adapters.XmlAdapter#marshal()</code></a> and <a href=""http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#unmarshal-ValueType-"" rel=""noreferrer""><code>#unmarshal()</code></a></li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Bridge_pattern"" rel=""noreferrer"">Bridge</a> <sup><sub>(recognizeable by creational methods taking an instance of <em>different</em> abstract/interface type and returning an implementation of own abstract/interface type which <em>delegates/uses</em> the given instance)</sub></sup></h3>
<ul>
<li>None comes to mind yet. A fictive example would be <code>new LinkedHashMap(LinkedHashSet&lt;K&gt;, List&lt;V&gt;)</code> which returns an unmodifiable linked map which doesn't clone the items, but <em>uses</em> them. The <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#newSetFromMap-java.util.Map-"" rel=""noreferrer""><code>java.util.Collections#newSetFromMap()</code></a> and <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#singleton-T-"" rel=""noreferrer""><code>singletonXXX()</code></a> methods however comes close.</li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Composite_pattern"" rel=""noreferrer"">Composite</a> <sup><sub>(recognizeable by behavioral methods taking an instance of <em>same</em> abstract/interface type into a tree structure)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#add-java.awt.Component-"" rel=""noreferrer""><code>java.awt.Container#add(Component)</code></a> (practically all over Swing thus)</li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/faces/component/UIComponent.html#getChildren--"" rel=""noreferrer""><code>javax.faces.component.UIComponent#getChildren()</code></a> (practically all over JSF UI thus)</li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Decorator_pattern"" rel=""noreferrer"">Decorator</a> <sup><sub>(recognizeable by creational methods taking an instance of <em>same</em> abstract/interface type which adds additional behaviour)</sub></sup></h3>
<ul>
<li>All subclasses of <a href=""http://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html"" rel=""noreferrer""><code>java.io.InputStream</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html"" rel=""noreferrer""><code>OutputStream</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/io/Reader.html"" rel=""noreferrer""><code>Reader</code></a> and <a href=""http://docs.oracle.com/javase/8/docs/api/java/io/Writer.html"" rel=""noreferrer""><code>Writer</code></a> have a constructor taking an instance of same type.</li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html"" rel=""noreferrer""><code>java.util.Collections</code></a>, the <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#checkedCollection-java.util.Collection-java.lang.Class-"" rel=""noreferrer""><code>checkedXXX()</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#synchronizedCollection-java.util.Collection-"" rel=""noreferrer""><code>synchronizedXXX()</code></a> and <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#unmodifiableCollection-java.util.Collection-"" rel=""noreferrer""><code>unmodifiableXXX()</code></a> methods.</li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequestWrapper.html"" rel=""noreferrer""><code>javax.servlet.http.HttpServletRequestWrapper</code></a> and <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponseWrapper.html"" rel=""noreferrer""><code>HttpServletResponseWrapper</code></a></li>
<li><a href=""https://docs.oracle.com/javase/7/docs/api/javax/swing/JScrollPane.html"" rel=""noreferrer""><code>javax.swing.JScrollPane</code></a></li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Facade_pattern"" rel=""noreferrer"">Facade</a> <sup><sub>(recognizeable by behavioral methods which internally uses instances of <em>different</em> independent abstract/interface types)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/faces/context/FacesContext.html"" rel=""noreferrer""><code>javax.faces.context.FacesContext</code></a>, it internally uses among others the abstract/interface types <a href=""http://docs.oracle.com/javaee/7/api/javax/faces/lifecycle/Lifecycle.html"" rel=""noreferrer""><code>LifeCycle</code></a>, <a href=""http://docs.oracle.com/javaee/7/api/javax/faces/application/ViewHandler.html"" rel=""noreferrer""><code>ViewHandler</code></a>, <a href=""http://docs.oracle.com/javaee/7/api/javax/faces/application/NavigationHandler.html"" rel=""noreferrer""><code>NavigationHandler</code></a> and many more without that the enduser has to worry about it (which are however overrideable by injection).</li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/faces/context/ExternalContext.html"" rel=""noreferrer""><code>javax.faces.context.ExternalContext</code></a>, which internally uses <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html"" rel=""noreferrer""><code>ServletContext</code></a>, <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSession.html"" rel=""noreferrer""><code>HttpSession</code></a>, <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html"" rel=""noreferrer""><code>HttpServletRequest</code></a>, <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html"" rel=""noreferrer""><code>HttpServletResponse</code></a>, etc.</li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Flyweight_pattern"" rel=""noreferrer"">Flyweight</a> <sup><sub>(recognizeable by creational methods returning a cached instance, a bit the &quot;multiton&quot; idea)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#valueOf-int-"" rel=""noreferrer""><code>java.lang.Integer#valueOf(int)</code></a> (also on <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html#valueOf-boolean-"" rel=""noreferrer""><code>Boolean</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Byte.html#valueOf-byte-"" rel=""noreferrer""><code>Byte</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#valueOf-char-"" rel=""noreferrer""><code>Character</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Short.html#valueOf-short-"" rel=""noreferrer""><code>Short</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Long.html#valueOf-long-"" rel=""noreferrer""><code>Long</code></a> and <a href=""https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html#valueOf-long-int-"" rel=""noreferrer""><code>BigDecimal</code></a>)</li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Proxy_pattern"" rel=""noreferrer"">Proxy</a> <sup><sub>(recognizeable by creational methods which returns an implementation of given abstract/interface type which in turn <em>delegates/uses</em> a <em>different</em> implementation of given abstract/interface type)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html"" rel=""noreferrer""><code>java.lang.reflect.Proxy</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/rmi/package-summary.html"" rel=""noreferrer""><code>java.rmi.*</code></a></li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html"" rel=""noreferrer""><code>javax.ejb.EJB</code></a> (<a href=""https://stackoverflow.com/questions/25514361/when-using-ejb-does-each-managed-bean-get-its-own-ejb-instance"">explanation here</a>)</li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/inject/Inject.html"" rel=""noreferrer""><code>javax.inject.Inject</code></a> (<a href=""https://stackoverflow.com/questions/29651008/field-getobj-returns-all-nulls-on-injected-cdi-managed-beans-while-manually-i/29672591#29672591"">explanation here</a>)</li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/persistence/PersistenceContext.html"" rel=""noreferrer""><code>javax.persistence.PersistenceContext</code></a></li>
</ul>
<hr />
<h2><a href=""http://en.wikipedia.org/wiki/Behavioral_pattern"" rel=""noreferrer"">Behavioral patterns</a></h2>
<h3><a href=""http://en.wikipedia.org/wiki/Chain_of_responsibility_pattern"" rel=""noreferrer"">Chain of responsibility</a> <sup><sub>(recognizeable by behavioral methods which (indirectly) invokes the same method in <em>another</em> implementation of <em>same</em> abstract/interface type in a queue)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html#log-java.util.logging.Level-java.lang.String-"" rel=""noreferrer""><code>java.util.logging.Logger#log()</code></a></li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter-javax.servlet.ServletRequest-javax.servlet.ServletResponse-javax.servlet.FilterChain-"" rel=""noreferrer""><code>javax.servlet.Filter#doFilter()</code></a></li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Command_pattern"" rel=""noreferrer"">Command</a> <sup><sub>(recognizeable by behavioral methods in an abstract/interface type which invokes a method in an implementation of a <em>different</em> abstract/interface type which has been <em>encapsulated</em> by the command implementation during its creation)</sub></sup></h3>
<ul>
<li>All implementations of <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html"" rel=""noreferrer""><code>java.lang.Runnable</code></a></li>
<li>All implementations of <a href=""http://docs.oracle.com/javase/8/docs/api/javax/swing/Action.html"" rel=""noreferrer""><code>javax.swing.Action</code></a></li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Interpreter_pattern"" rel=""noreferrer"">Interpreter</a> <sup><sub>(recognizeable by behavioral methods returning a <em>structurally</em> different instance/type of the given instance/type; note that parsing/formatting is not part of the pattern, determining the pattern and how to apply it is)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html"" rel=""noreferrer""><code>java.util.Pattern</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/text/Normalizer.html"" rel=""noreferrer""><code>java.text.Normalizer</code></a></li>
<li>All subclasses of <a href=""http://docs.oracle.com/javase/8/docs/api/java/text/Format.html"" rel=""noreferrer""><code>java.text.Format</code></a></li>
<li>All subclasses of <a href=""http://docs.oracle.com/javaee/7/api/javax/el/ELResolver.html"" rel=""noreferrer""><code>javax.el.ELResolver</code></a></li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Iterator_pattern"" rel=""noreferrer"">Iterator</a> <sup><sub>(recognizeable by behavioral methods sequentially returning instances of a <em>different</em> type from a queue)</sub></sup></h3>
<ul>
<li>All implementations of <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html"" rel=""noreferrer""><code>java.util.Iterator</code></a> (thus among others also <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html"" rel=""noreferrer""><code>java.util.Scanner</code></a>!).</li>
<li>All implementations of <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html"" rel=""noreferrer""><code>java.util.Enumeration</code></a></li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Mediator_pattern"" rel=""noreferrer"">Mediator</a> <sup><sub>(recognizeable by behavioral methods taking an instance of different abstract/interface type (usually using the command pattern) which delegates/uses the given instance)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Timer.html"" rel=""noreferrer""><code>java.util.Timer</code></a> (all <code>scheduleXXX()</code> methods)</li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html#execute-java.lang.Runnable-"" rel=""noreferrer""><code>java.util.concurrent.Executor#execute()</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html"" rel=""noreferrer""><code>java.util.concurrent.ExecutorService</code></a> (the <code>invokeXXX()</code> and <code>submit()</code> methods)</li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html"" rel=""noreferrer""><code>java.util.concurrent.ScheduledExecutorService</code></a> (all <code>scheduleXXX()</code> methods)</li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#invoke-java.lang.Object-java.lang.Object...-"" rel=""noreferrer""><code>java.lang.reflect.Method#invoke()</code></a></li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Memento_pattern"" rel=""noreferrer"">Memento</a> <sup><sub>(recognizeable by behavioral methods which internally changes the state of the <em>whole</em> instance)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Date.html"" rel=""noreferrer""><code>java.util.Date</code></a> (the setter methods do that, <code>Date</code> is internally represented by a <code>long</code> value)</li>
<li>All implementations of <a href=""http://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html"" rel=""noreferrer""><code>java.io.Serializable</code></a></li>
<li>All implementations of <a href=""http://docs.oracle.com/javaee/7/api/javax/faces/component/StateHolder.html"" rel=""noreferrer""><code>javax.faces.component.StateHolder</code></a></li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Observer_pattern"" rel=""noreferrer"">Observer (or Publish/Subscribe)</a> <sup><sub>(recognizeable by behavioral methods which invokes a method on an instance of <em>another</em> abstract/interface type, depending on own state)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html"" rel=""noreferrer""><code>java.util.Observer</code></a>/<a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Observable.html"" rel=""noreferrer""><code>java.util.Observable</code></a> (rarely used in real world though)</li>
<li>All implementations of <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/EventListener.html"" rel=""noreferrer""><code>java.util.EventListener</code></a> (practically all over Swing thus)</li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSessionBindingListener.html"" rel=""noreferrer""><code>javax.servlet.http.HttpSessionBindingListener</code></a></li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSessionAttributeListener.html"" rel=""noreferrer""><code>javax.servlet.http.HttpSessionAttributeListener</code></a></li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/faces/event/PhaseListener.html"" rel=""noreferrer""><code>javax.faces.event.PhaseListener</code></a></li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/State_pattern"" rel=""noreferrer"">State</a> <sup><sub>(recognizeable by behavioral methods which changes its behaviour depending on the instance's state which can be controlled externally)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/faces/lifecycle/Lifecycle.html#execute-javax.faces.context.FacesContext-"" rel=""noreferrer""><code>javax.faces.lifecycle.LifeCycle#execute()</code></a> (controlled by <a href=""http://docs.oracle.com/javaee/7/api/javax/faces/webapp/FacesServlet.html"" rel=""noreferrer""><code>FacesServlet</code></a>, the behaviour is dependent on current phase (state) of JSF lifecycle)</li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Strategy_pattern"" rel=""noreferrer"">Strategy</a> <sup><sub>(recognizeable by behavioral methods in an abstract/interface type which invokes a method in an implementation of a <em>different</em> abstract/interface type which has been <em>passed-in</em> as method argument into the strategy implementation)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#compare-T-T-"" rel=""noreferrer""><code>java.util.Comparator#compare()</code></a>, executed by among others <code>Collections#sort()</code>.</li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html"" rel=""noreferrer""><code>javax.servlet.http.HttpServlet</code></a>, the <code>service()</code> and all <code>doXXX()</code> methods take <code>HttpServletRequest</code> and <code>HttpServletResponse</code> and the implementor has to process them (and not to get hold of them as instance variables!).</li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter-javax.servlet.ServletRequest-javax.servlet.ServletResponse-javax.servlet.FilterChain-"" rel=""noreferrer""><code>javax.servlet.Filter#doFilter()</code></a></li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Template_method_pattern"" rel=""noreferrer"">Template method</a> <sup><sub>(recognizeable by behavioral methods which already have a &quot;default&quot; behaviour defined by an abstract type)</sub></sup></h3>
<ul>
<li>All non-abstract methods of <a href=""http://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html"" rel=""noreferrer""><code>java.io.InputStream</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html"" rel=""noreferrer""><code>java.io.OutputStream</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/io/Reader.html"" rel=""noreferrer""><code>java.io.Reader</code></a> and <a href=""http://docs.oracle.com/javase/8/docs/api/java/io/Writer.html"" rel=""noreferrer""><code>java.io.Writer</code></a>.</li>
<li>All non-abstract methods of <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/AbstractList.html"" rel=""noreferrer""><code>java.util.AbstractList</code></a>, <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/AbstractSet.html"" rel=""noreferrer""><code>java.util.AbstractSet</code></a> and <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/AbstractMap.html"" rel=""noreferrer""><code>java.util.AbstractMap</code></a>.</li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html"" rel=""noreferrer""><code>javax.servlet.http.HttpServlet</code></a>, all the <code>doXXX()</code> methods by default sends a HTTP 405 &quot;Method Not Allowed&quot; error to the response. You're free to implement none or any of them.</li>
</ul>
<h3><a href=""http://en.wikipedia.org/wiki/Visitor_pattern"" rel=""noreferrer"">Visitor</a> <sup><sub>(recognizeable by two <em>different</em> abstract/interface types which has methods defined which takes each the <em>other</em> abstract/interface type; the one actually calls the method of the other and the other executes the desired strategy on it)</sub></sup></h3>
<ul>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/AnnotationValue.html"" rel=""noreferrer""><code>javax.lang.model.element.AnnotationValue</code></a> and <a href=""http://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/AnnotationValueVisitor.html"" rel=""noreferrer""><code>AnnotationValueVisitor</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/Element.html"" rel=""noreferrer""><code>javax.lang.model.element.Element</code></a> and <a href=""http://docs.oracle.com/javase/8/docs/api/javax/lang/model/element/ElementVisitor.html"" rel=""noreferrer""><code>ElementVisitor</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeMirror.html"" rel=""noreferrer""><code>javax.lang.model.type.TypeMirror</code></a> and <a href=""http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html"" rel=""noreferrer""><code>TypeVisitor</code></a></li>
<li><a href=""http://docs.oracle.com/javase/8/docs/api/java/nio/file/FileVisitor.html"" rel=""noreferrer""><code>java.nio.file.FileVisitor</code></a> and <a href=""http://docs.oracle.com/javase/8/docs/api/java/nio/file/SimpleFileVisitor.html"" rel=""noreferrer""><code>SimpleFileVisitor</code></a></li>
<li><a href=""http://docs.oracle.com/javaee/7/api/javax/faces/component/visit/VisitContext.html"" rel=""noreferrer""><code>javax.faces.component.visit.VisitContext</code></a> and <a href=""http://docs.oracle.com/javaee/7/api/javax/faces/component/visit/VisitCallback.html"" rel=""noreferrer""><code>VisitCallback</code></a></li>
</ul>
",157882,,-1,,6/20/2020 9:12,10/2/2018 15:08,,,,31,,,4/25/2010 4:51,CC BY-SA 4.0
369608,2,,369602,12/15/2008 20:30,,3435,,"<p>There are different ways to delete an array element, where some are more useful for some specific tasks than others.</p>
<h2>Deleting a single array element</h2>
<p>If you want to delete just one array element you can use <a href=""https://secure.php.net/manual/en/function.unset.php"" rel=""noreferrer""><code>unset()</code></a> or alternatively <a href=""https://secure.php.net/manual/en/function.array-splice.php"" rel=""noreferrer""><code>\array_splice()</code></a>.</p>
<p>If you know the value and don‚Äôt know the key to delete the element you can use <a href=""http://php.net/manual/en/function.array-search.php"" rel=""noreferrer""><code>\array_search()</code></a> to get the key. This only works if the element does not occur more than once, since <code>\array_search</code> returns the first hit only.</p>
<h3><a href=""http://php.net/manual/en/function.unset.php"" rel=""noreferrer""><code>unset()</code></a></h3>
<p>Note that when you use <code>unset()</code> the array keys won‚Äôt change. If you want to reindex the keys you can use <a href=""http://php.net/manual/en/function.array-values.php"" rel=""noreferrer""><code>\array_values()</code></a> after <code>unset()</code>, which will convert all keys to numerically enumerated keys starting from 0.</p>
<p>Code:</p>
<pre><code>$array = [0 =&gt; &quot;a&quot;, 1 =&gt; &quot;b&quot;, 2 =&gt; &quot;c&quot;];
unset($array[1]);
          // ‚Üë Key which you want to delete
</code></pre>
<p>Output:</p>
<pre><code>[
    [0] =&gt; a
    [2] =&gt; c
]
</code></pre>
<h3><a href=""http://php.net/manual/en/function.array-splice.php"" rel=""noreferrer""><code>\array_splice()</code></a> method</h3>
<p>If you use <code>\array_splice()</code> the keys will automatically be reindexed, but the associative keys won‚Äôt change ‚Äî as opposed to <code>\array_values()</code>, which will convert all keys to numerical keys.</p>
<p><code>\array_splice()</code> needs the <em>offset</em>, not the <em>key</em>, as the second parameter.</p>
<p>Code:</p>
<pre><code>$array = [0 =&gt; &quot;a&quot;, 1 =&gt; &quot;b&quot;, 2 =&gt; &quot;c&quot;];
\array_splice($array, 1, 1);
                   // ‚Üë Offset which you want to delete
</code></pre>
<p>Output:</p>
<pre><code>[
    [0] =&gt; a
    [1] =&gt; c
]
</code></pre>
<p><code>array_splice()</code>, same as <code>unset()</code>, take the array by reference. You don‚Äôt assign the return values of those functions back to the array.</p>
<h2>Deleting multiple array elements</h2>
<p>If you want to delete multiple array elements and don‚Äôt want to call <code>unset()</code> or <code>\array_splice()</code> multiple times you can use the functions <code>\array_diff()</code> or <code>\array_diff_key()</code> depending on whether you know the values or the keys of the elements which you want to delete.</p>
<h3><a href=""http://php.net/manual/en/function.array-diff.php"" rel=""noreferrer""><code>\array_diff()</code></a> method</h3>
<p>If you know the values of the array elements which you want to delete, then you can use <code>\array_diff()</code>. As before with <code>unset()</code> it won‚Äôt change the keys of the array.</p>
<p>Code:</p>
<pre><code>$array = [0 =&gt; &quot;a&quot;, 1 =&gt; &quot;b&quot;, 2 =&gt; &quot;c&quot;, 3 =&gt; &quot;c&quot;];
$array = \array_diff($array, [&quot;a&quot;, &quot;c&quot;]);
                          // ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                          // Array values which you want to delete
</code></pre>
<p>Output:</p>
<pre><code>[
    [1] =&gt; b
]
</code></pre>
<h3><a href=""http://php.net/manual/en/function.array-diff-key.php"" rel=""noreferrer""><code>\array_diff_key()</code></a> method</h3>
<p>If you know the keys of the elements which you want to delete, then you want to use <code>\array_diff_key()</code>. You have to make sure you pass the keys as keys in the second parameter and not as values. Keys won‚Äôt reindex.</p>
<p>Code:</p>
<pre><code>$array = [0 =&gt; &quot;a&quot;, 1 =&gt; &quot;b&quot;, 2 =&gt; &quot;c&quot;];
$array = \array_diff_key($array, [0 =&gt; &quot;xy&quot;, &quot;2&quot; =&gt; &quot;xy&quot;]);
                               // ‚Üë           ‚Üë
                               // Array keys which you want to delete
</code></pre>
<p>Output:</p>
<pre><code>[
    [1] =&gt; b
]
</code></pre>
<p>If you want to use <code>unset()</code> or <code>\array_splice()</code> to delete multiple elements with the same value you can use <a href=""http://php.net/manual/en/function.array-keys.php"" rel=""noreferrer""><code>\array_keys()</code></a> to get all the keys for a specific value and then delete all elements.</p>
<h3><a href=""https://www.php.net/manual/en/function.array-filter.php"" rel=""noreferrer""><code>\array_filter()</code></a> method</h3>
<p>If you want to delete all elements with a specific value in the array you can use <code>\array_filter()</code>.</p>
<p>Code:</p>
<pre><code>$array = [0 =&gt; &quot;a&quot;, 1 =&gt; &quot;b&quot;, 2 =&gt; &quot;c&quot;];
$array = \array_filter($array, static function ($element) {
    return $element !== &quot;b&quot;;
    //                   ‚Üë
    // Array value which you want to delete
});
</code></pre>
<p>Output:</p>
<pre><code>[
    [0] =&gt; a
    [1] =&gt; c
]
</code></pre>
",1968,Konrad Rudolph,6824121,,3/23/2022 14:24,3/23/2022 14:24,,,,15,,,5/12/2016 21:04,CC BY-SA 4.0
3481842,2,,3481828,8/14/2010 3:05,,3323,,"<p>Use the appropriately named method <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#split(java.lang.String)"" rel=""noreferrer""><code>String#split()</code></a>.</p>
<pre><code>String string = &quot;004-034556&quot;;
String[] parts = string.split(&quot;-&quot;);
String part1 = parts[0]; // 004
String part2 = parts[1]; // 034556
</code></pre>
<p>Note that <code>split</code>'s argument is assumed to be a <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Pattern.html#sum"" rel=""noreferrer"">regular expression</a>, so remember to escape <a href=""https://www.regular-expressions.info/characters.html"" rel=""noreferrer"">special characters</a> if necessary.</p>
<blockquote>
<p><a href=""https://www.regular-expressions.info/characters.html"" rel=""noreferrer"">there</a> are 12 characters with special meanings: the backslash <code>\</code>, the caret <code>^</code>, the dollar sign <code>$</code>, the period or dot <code>.</code>, the vertical bar or pipe symbol <code>|</code>, the question mark <code>?</code>, the asterisk or star <code>*</code>, the plus sign <code>+</code>, the opening parenthesis <code>(</code>, the closing parenthesis <code>)</code>, and the opening square bracket <code>[</code>, the opening curly brace <code>{</code>, These special characters are often called &quot;metacharacters&quot;.</p>
</blockquote>
<p>For instance, to split on a period/dot <code>.</code> (which means &quot;<a href=""https://www.regular-expressions.info/dot.html"" rel=""noreferrer"">any character</a>&quot; in regex), use either <a href=""https://www.regular-expressions.info/characters.html"" rel=""noreferrer"">backslash <code>\</code></a> to escape the individual special character like so <code>split(&quot;\\.&quot;)</code>, or use <a href=""https://www.regular-expressions.info/charclass.html"" rel=""noreferrer"">character class <code>[]</code></a> to represent literal character(s) like so <code>split(&quot;[.]&quot;)</code>, or use <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Pattern.html#quote(java.lang.String)"" rel=""noreferrer""><code>Pattern#quote()</code></a> to escape the entire string like so <code>split(Pattern.quote(&quot;.&quot;))</code>.</p>
<pre><code>String[] parts = string.split(Pattern.quote(&quot;.&quot;)); // Split on the exact string.
</code></pre>
<p>To test beforehand if the string contains certain character(s), just use <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#contains(java.lang.CharSequence)"" rel=""noreferrer""><code>String#contains()</code></a>.</p>
<pre><code>if (string.contains(&quot;-&quot;)) {
    // Split it.
} else {
    throw new IllegalArgumentException(&quot;String &quot; + string + &quot; does not contain -&quot;);
}
</code></pre>
<p>Note, this does not take a regular expression. For that, use <a href=""https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#matches(java.lang.String)"" rel=""noreferrer""><code>String#matches()</code></a> instead.</p>
<p>If you'd like to retain the split character in the resulting parts, then make use of <a href=""https://www.regular-expressions.info/lookaround.html"" rel=""noreferrer"">positive lookaround</a>. In case you want to have the split character to end up in left hand side, use positive lookbehind by prefixing <code>?&lt;=</code> group on the pattern.</p>
<pre><code>String string = &quot;004-034556&quot;;
String[] parts = string.split(&quot;(?&lt;=-)&quot;);
String part1 = parts[0]; // 004-
String part2 = parts[1]; // 034556
</code></pre>
<p>In case you want to have the split character to end up in right hand side, use positive lookahead by prefixing <code>?=</code> group on the pattern.</p>
<pre><code>String string = &quot;004-034556&quot;;
String[] parts = string.split(&quot;(?=-)&quot;);
String part1 = parts[0]; // 004
String part2 = parts[1]; // -034556
</code></pre>
<p>If you'd like to limit the number of resulting parts, then you can supply the desired number as 2nd argument of <code>split()</code> method.</p>
<pre><code>String string = &quot;004-034556-42&quot;;
String[] parts = string.split(&quot;-&quot;, 2);
String part1 = parts[0]; // 004
String part2 = parts[1]; // 034556-42
</code></pre>
",157882,,365102,,7/24/2022 23:45,7/24/2022 23:45,,,,3,,,,CC BY-SA 4.0
285184,2,,285177,11/12/2008 20:12,,3306,,"<p>Yes, it is possible:</p>

<pre><code>public class Foo {
    private int x;

    public Foo() {
        this(1);
    }

    public Foo(int x) {
        this.x = x;
    }
}
</code></pre>

<p>To chain to a particular superclass constructor instead of one in the same class, use <code>super</code> instead of <code>this</code>. Note that <strong>you can only chain to one constructor</strong>, and <strong>it has to be the first statement in your constructor body</strong>.</p>

<p>See also <a href=""https://stackoverflow.com/questions/284896"">this related question</a>, which is about C# but where the same principles apply.</p>
",22656,Jon Skeet,-1,,5/23/2017 12:34,6/8/2016 23:02,,,,20,,,,CC BY-SA 3.0
1128728,2,,1128723,7/15/2009 0:04,,3274,,"<pre><code>Arrays.asList(yourArray).contains(yourValue)
</code></pre>

<p>Warning: this doesn't work for arrays of primitives (see the comments).</p>

<hr>

<h2>Since <a href=""/questions/tagged/java-8"" class=""post-tag"" title=""show questions tagged &#39;java-8&#39;"" rel=""tag"">java-8</a> you can now use Streams.</h2>

<pre><code>String[] values = {""AB"",""BC"",""CD"",""AE""};
boolean contains = Arrays.stream(values).anyMatch(""s""::equals);
</code></pre>

<p>To check whether an array of <code>int</code>, <code>double</code> or <code>long</code> contains a value use <code>IntStream</code>, <code>DoubleStream</code> or <code>LongStream</code> respectively.</p>

<h2>Example</h2>

<pre><code>int[] a = {1,2,3,4};
boolean contains = IntStream.of(a).anyMatch(x -&gt; x == 4);
</code></pre>
",131872,,756233,,10/8/2018 12:35,10/8/2018 12:35,,,,33,,,,CC BY-SA 4.0
8028987,2,,8028957,11/6/2011 17:45,,3262,,"<h2>No output before sending headers!</h2>
<p>Functions that send/modify HTTP headers must be invoked <em><strong>before any output is made</strong></em>.
<kbd><a href=""https://stackoverflow.com/a/8028979/345031""><strong>summary ‚áä</strong></a></kbd>
Otherwise the call fails:</p>
<blockquote>
<p>Warning: Cannot modify header information - headers already sent (output started at <i>script:line</i>)</p>
</blockquote>
<p>Some functions modifying the HTTP header are:</p>
<ul>
<li><a href=""http://php.net/header"" rel=""noreferrer""><code>header</code></a> / <a href=""http://php.net/header_remove"" rel=""noreferrer""><code>header_remove</code></a></li>
<li><a href=""http://php.net/session_start"" rel=""noreferrer""><code>session_start</code></a> / <a href=""http://php.net/session_regenerate_id"" rel=""noreferrer""><code>session_regenerate_id</code></a></li>
<li><a href=""http://php.net/setcookie"" rel=""noreferrer""><code>setcookie</code></a> / <a href=""http://php.net/setrawcookie"" rel=""noreferrer""><code>setrawcookie</code></a></li>
</ul>
<p>Output can be:</p>
<ul>
<li><p><em>Unintentional:</em></p>
<ul>
<li>Whitespace before <code>&lt;?php</code> or after <code>?&gt;</code></li>
<li>The <a href=""http://en.wikipedia.org/wiki/Byte_order_mark"" rel=""noreferrer"">UTF-8 Byte Order Mark</a> specifically</li>
<li>Previous error messages or notices</li>
</ul>
</li>
</ul>

<ul>
<li><p><em>Intentional:</em></p>
<ul>
<li><code>print</code>, <code>echo</code> and other functions producing output</li>
<li>Raw <code>&lt;html&gt;</code> sections prior <code>&lt;?php</code> code.</li>
</ul>
</li>
</ul>
<h2>Why does it happen?</h2>
<p>To understand why headers must be sent before output it's necessary
to look at a typical <a href=""http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"" rel=""noreferrer"">HTTP</a>
response. PHP scripts mainly generate HTML content, but also pass a
set of HTTP/CGI headers to the webserver:</p>
<pre><code>HTTP/1.1 200 OK
Powered-By: PHP/5.3.7
Vary: Accept-Encoding
Content-Type: text/html; charset=utf-8

&lt;html&gt;&lt;head&gt;&lt;title&gt;PHP page output page&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;&lt;h1&gt;Content&lt;/h1&gt; &lt;p&gt;Some more output follows...&lt;/p&gt;
and &lt;a href=&quot;/&quot;&gt; &lt;img src=internal-icon-delayed&gt; &lt;/a&gt;
</code></pre>
<p>The page/output always <em>follows</em> the headers. PHP has to pass the
headers to the webserver first. It can only do that once.
After the double linebreak it can nevermore amend them.</p>
<p>When PHP receives the first output (<code>print</code>, <code>echo</code>, <code>&lt;html&gt;</code>) it will
<em>flush</em> all collected headers. Afterward it can send all the output
it wants. But sending further HTTP headers is impossible then.</p>
<h2>How can you find out where the premature output occurred?</h2>
<p>The <code>header()</code> warning contains all relevant information to
locate the problem cause:</p>
<blockquote>
<p>Warning: Cannot modify header information - headers already sent by
<em><strong>(output started at</strong></em> /www/usr2345/htdocs/<b>auth.php:52</b>) in
/www/usr2345/htdocs/index.php on line 100</p>
</blockquote>
<p>Here &quot;line 100&quot; refers to the script where the <code>header()</code> <em>invocation</em> failed.</p>
<p>The &quot;<em>output started at</em>&quot; note within the parenthesis is more significant.
It denominates the source of previous output. In this example, it's <code>auth.php</code>
and <strong>line <code>52</code></strong>. That's where you had to look for premature output.</p>
<p><em>Typical causes:</em></p>
<ol>
<li><h3>Print, echo</h3>
<p>Intentional output from <code>print</code> and <code>echo</code> statements will terminate the opportunity to send HTTP headers. The application flow must be restructured to avoid that. Use <a href=""http://php.net/function"" rel=""noreferrer"">functions</a>
and templating schemes. Ensure <code>header()</code> calls occur <em>before</em> messages
are written out.</p>
<p>Functions that produce output include</p>
<ul>
<li><code>print</code>, <code>echo</code>, <code>printf</code>, <code>vprintf</code></li>
<li><code>trigger_error</code>, <code>ob_flush</code>, <code>ob_end_flush</code>, <code>var_dump</code>, <code>print_r</code></li>
<li><code>readfile</code>, <code>passthru</code>, <code>flush</code>, <code>imagepng</code>, <code>imagejpeg</code></li>
</ul>
<p><br> among others and user-defined functions.</p>
</li>
<li><h3>Raw HTML areas</h3>
<p>Unparsed HTML sections in a <code>.php</code> file are direct output as well.
Script conditions that will trigger a <code>header()</code> call must be noted
before <em>any</em> raw <code>&lt;html&gt;</code> blocks.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;?php
    // Too late for headers already.
</code></pre>
<p>Use a templating scheme to separate processing from output logic.</p>
<ul>
<li>Place form processing code atop scripts.</li>
<li>Use temporary string variables to defer messages.</li>
<li>The actual output logic and intermixed HTML output should follow last.<br />
<br></li>
</ul>
</li>
<li><h3>Whitespace before <code>&lt;?php</code> for &quot;script.php <strong>line 1</strong>&quot; warnings</h3>
<p>If the warning refers to output inline <strong><code>1</code></strong>, then it's mostly
leading <strong>whitespace</strong>, text or HTML before the opening <code>&lt;?php</code> token.</p>
<pre><code> &lt;?php
# There's a SINGLE space/newline before &lt;? - Which already seals it.
</code></pre>
<p>Similarly it can occur for appended scripts or script sections:</p>
<pre><code>?&gt;

&lt;?php
</code></pre>
<p>PHP actually eats up a <em>single</em> linebreak after close tags. But it won't
compensate multiple newlines or tabs or spaces shifted into such gaps.</p>
</li>
<li><h3>UTF-8 BOM</h3>
<p>Linebreaks and spaces alone can be a problem. But there are also &quot;invisible&quot;
character sequences that can cause this. Most famously the
<a href=""http://en.wikipedia.org/wiki/Byte_order_mark"" rel=""noreferrer""><strong>UTF-8 BOM</strong> (Byte-Order-Mark)</a>
which isn't displayed by most text editors. It's the byte sequence <code>EF BB BF</code>, which is optional and redundant for UTF-8 encoded documents. PHP however has to treat it as raw output. It may show up as the characters <code>√Ø¬ª¬ø</code> in the output (if the client interprets the document as Latin-1) or similar &quot;garbage&quot;.</p>
<p>In particular graphical editors and Java-based IDEs are oblivious to its
presence. They don't visualize it (obliged by the Unicode standard).
Most programmer and console editors however do:</p>
<img src=""https://i.stack.imgur.com/aXgWY.png"" width=""590"" height=""140"" alt=""joes editor showing UTF-8 BOM placeholder, and MC editor a dot"">
<p>There it's easy to recognize the problem early on. Other editors may identify
its presence in a file/settings menu (Notepad++ on Windows can identify and
<a href=""https://stackoverflow.com/questions/3589358/fix-utf8-bom"">remedy the problem</a>),
Another option to inspect the BOMs presence is resorting to an <strong>hexeditor</strong>.
On *nix systems <a href=""http://linux.die.net/man/1/hexdump"" rel=""noreferrer""><code>hexdump</code></a> is usually available,
if not a graphical variant which simplifies auditing these and other issues:</p>
<img src=""https://i.stack.imgur.com/QyqUr.png"" width=""560"" height=""87"" alt=""beav hexeditor showing utf-8 bom"">
<p>An easy fix is to set the text editor to save files as &quot;UTF-8 (no BOM)&quot;
or similar to such nomenclature. Often newcomers otherwise resort to creating new files and just copy&amp;pasting the previous code back in.</p>
<h3>Correction utilities <img src=""https://i.stack.imgur.com/wnAS9.gif"" width=""30"" height=""20""></h3>
<p>There are also automated tools to examine and rewrite text files
(<a href=""https://stackoverflow.com/questions/1068650/using-awk-to-remove-the-byte-order-mark""><code>sed</code>/<code>awk</code></a> or <code>recode</code>).
For PHP specifically there's the <a href=""http://freshcode.club/projects/phptags"" rel=""noreferrer""><code>phptags</code> tag tidier</a>.
It rewrites close and open tags into long and short forms, but also easily
fixes leading and trailing whitespace, Unicode and UTF-x BOM issues:</p>
<pre><code>phptags  --whitespace  *.php
</code></pre>
<p>It's safe to use on a whole include or project directory.</p>
</li>
<li><h3>Whitespace after <code>?&gt;</code></h3>
<p>If the error source is mentioned as behind the
<a href=""https://stackoverflow.com/questions/4410704/php-closing-tag"">closing <code>?&gt;</code></a>
then this is where some whitespace or the raw text got written out.
The PHP end marker does not terminate script execution at this point. Any text/space characters after it will be written out as page content
still.</p>
<p>It's commonly advised, in particular to newcomers, that trailing <code>?&gt;</code> PHP
close tags should be omitted. This <em>eschews</em> a small portion of these cases.
(Quite commonly <code>include()d</code> scripts are the culprit.)</p>
</li>
<li><h3>Error source mentioned as &quot;Unknown on line 0&quot;</h3>
<p>It's typically a PHP extension or php.ini setting if no error source
is concretized.</p>
<ul>
<li>It's occasionally the <code>gzip</code> stream encoding setting
<a href=""https://stackoverflow.com/questions/622192/php-warning-headers-already-sent-in-unknown"">or the <code>ob_gzhandler</code></a>.</li>
<li>But it could also be any doubly loaded <code>extension=</code> module
generating an implicit PHP startup/warning message.<br />
<br></li>
</ul>
</li>
<li><h3>Preceding error messages</h3>
<p>If another PHP statement or expression causes a warning message or
notice being printed out, that also counts as premature output.</p>
<p>In this case you need to eschew the error,
delay the statement execution, or suppress the message with e.g.
<a href=""http://php.net/isset"" rel=""noreferrer""><code>isset()</code></a> or <a href=""http://php.net/@"" rel=""noreferrer""><code>@()</code></a> -
when either doesn't obstruct debugging later on.</p>
</li>
</ol>
<h2>No error message</h2>
<p>If you have <code>error_reporting</code> or <code>display_errors</code> disabled per <code>php.ini</code>,
then no warning will show up. But ignoring errors won't make the problem go
away. Headers still can't be sent after premature output.</p>
<p>So when <code>header(&quot;Location: ...&quot;)</code> redirects silently fail it's very
advisable to probe for warnings. Reenable them with two simple commands
atop the invocation script:</p>
<pre><code>error_reporting(E_ALL);
ini_set(&quot;display_errors&quot;, 1);
</code></pre>
<p>Or <code>set_error_handler(&quot;var_dump&quot;);</code> if all else fails.</p>
<p>Speaking of redirect headers, you should often use an idiom like
this for final code paths:</p>
<pre><code>exit(header(&quot;Location: /finished.html&quot;));
</code></pre>
<p>Preferably even a utility function, which prints a user message
in case of <code>header()</code> failures.</p>
<h2>Output buffering as a workaround</h2>
<p>PHPs <a href=""http://www.php.net/manual/en/intro.outcontrol.php"" rel=""noreferrer"">output buffering</a>
is a workaround to alleviate this issue. It often works reliably, but shouldn't
substitute for proper application structuring and separating output from control
logic. Its actual purpose is minimizing chunked transfers to the webserver.</p>
<ol>
<li><p>The <a href=""http://php.net/manual/en/outcontrol.configuration.php"" rel=""noreferrer""><code>output_buffering=</code></a>
setting nevertheless can help.
Configure it in the <a href=""http://www.php.net/manual/en/configuration.file.php"" rel=""noreferrer"">php.ini</a>
or via <a href=""http://www.php.net/manual/en/configuration.changes.php"" rel=""noreferrer"">.htaccess</a>
or even <a href=""http://php.net/manual/en/configuration.file.per-user.php"" rel=""noreferrer"">.user.ini</a> on
modern FPM/FastCGI setups.<br />
Enabling it will allow PHP to buffer output instead of passing it to the webserver instantly. PHP thus can aggregate HTTP headers.</p>
</li>
<li><p>It can likewise be engaged with a call to <a href=""http://php.net/ob_start"" rel=""noreferrer""><code>ob_start();</code></a>
atop the invocation script. Which however is less reliable for multiple reasons:</p>
<ul>
<li><p>Even if <code>&lt;?php ob_start(); ?&gt;</code> starts the first script, whitespace or a
BOM might get shuffled before, <a href=""https://stackoverflow.com/questions/2168956/php-header-problem-even-i-use-ob-start-and-ob-end-flush"">rendering it ineffective</a>.</p>
</li>
<li><p>It can conceal whitespace for HTML output. But as soon as the application logic attempts to send binary content (a generated image for example),
the buffered extraneous output becomes a problem. (Necessitating <code>ob_clean()</code>
as a further workaround.)</p>
</li>
<li><p>The buffer is limited in size, and can easily overrun when left to defaults.
And that's not a rare occurrence either, <a href=""https://stackoverflow.com/questions/17643837/php-headers-already-sent-error-depending-on-output-length"">difficult to track down</a>
when it happens.</p>
</li>
</ul>
</li>
</ol>
<p>Both approaches therefore may become unreliable - in particular when switching between
development setups and/or production servers. This is why output buffering is
widely considered just a crutch / strictly a workaround.</p>
<p>See also the <a href=""http://www.php.net/manual/en/outcontrol.examples.basic.php"" rel=""noreferrer"">basic usage example</a>
in the manual, and for more pros and cons:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/2832010/what-is-output-buffering"">What is output buffering?</a></li>
<li><a href=""https://stackoverflow.com/questions/2148114/why-use-output-buffering-in-php"">Why use output buffering in PHP?</a></li>
<li><a href=""https://stackoverflow.com/questions/4731375/is-using-output-buffering-considered-a-bad-practice"">Is using output buffering considered a bad practice?</a></li>
<li><a href=""https://stackoverflow.com/questions/2919569/use-case-for-output-buffering-as-the-correct-solution-to-headers-already-sent"">Use case for output buffering as the correct solution to &quot;headers already sent&quot;</a></li>
</ul>
<h3>But it worked on the other server!?</h3>
<p>If you didn't get the headers warning before, then the <a href=""http://php.net/manual/en/outcontrol.configuration.php"" rel=""noreferrer"">output buffering
php.ini setting</a>
has changed. It's likely unconfigured on the current/new server.</p>
<h2>Checking with <code>headers_sent()</code></h2>
<p>You can always use <a href=""http://php.net/headers_sent"" rel=""noreferrer""><code>headers_sent()</code></a> to probe if
it's still possible to... send headers. Which is useful to conditionally print
info or apply other fallback logic.</p>
<pre><code>if (headers_sent()) {
    die(&quot;Redirect failed. Please click on this link: &lt;a href=...&gt;&quot;);
}
else{
    exit(header(&quot;Location: /user.php&quot;));
}
</code></pre>
<p>Useful fallback workarounds are:</p>
<ul>
<li><h3>HTML <code>&lt;meta&gt;</code> tag</h3>
<p>If your application is structurally hard to fix, then an easy (but
somewhat unprofessional) way to allow redirects is injecting a HTML
<code>&lt;meta&gt;</code> tag. A redirect can be achieved with:</p>
<pre><code> &lt;meta http-equiv=&quot;Location&quot; content=&quot;http://example.com/&quot;&gt;
</code></pre>
<p>Or with a short delay:</p>
<pre><code> &lt;meta http-equiv=&quot;Refresh&quot; content=&quot;2; url=../target.html&quot;&gt;
</code></pre>
<p>This leads to non-valid HTML when utilized past the <code>&lt;head&gt;</code> section.
Most browsers still accept it.</p>
</li>
<li><h3>JavaScript redirect</h3>
<p>As alternative a <a href=""https://stackoverflow.com/questions/503093/how-can-i-make-a-redirect-page-in-jquery-javascript"">JavaScript redirect</a>
can be used for page redirects:</p>
<pre><code> &lt;script&gt; location.replace(&quot;target.html&quot;); &lt;/script&gt;
</code></pre>
<p>While this is often more HTML compliant than the <code>&lt;meta&gt;</code> workaround,
it incurs a reliance on JavaScript-capable clients.</p>
</li>
</ul>
<p>Both approaches however make acceptable fallbacks when genuine HTTP header()
calls fail. Ideally you'd always combine this with a user-friendly message and
clickable link as last resort. (Which for instance is what the <a href=""https://php.uz/manual/en/function.http-redirect.php"" rel=""noreferrer"">http_redirect()</a>
PECL extension does.)</p>
<h2>Why <code>setcookie()</code> and <code>session_start()</code> are also affected</h2>
<p>Both <code>setcookie()</code> and <code>session_start()</code> need to send a <code>Set-Cookie:</code> HTTP header.
The same conditions therefore apply, and similar error messages will be generated
for premature output situations.</p>
<p>(Of course, they're furthermore affected by disabled cookies in the browser
or even proxy issues. The session functionality obviously also depends on free
disk space and other php.ini settings, etc.)</p>
<h2>Further links</h2>
<ul>
<li>Google provides a <a href=""http://www.google.com/search?q=php+headers+already+sent"" rel=""noreferrer"">lengthy list of similar discussions</a>.</li>
<li>And of course <a href=""https://stackoverflow.com/search?q=%5Bphp%5D+headers+already+sent"">many specific cases</a> have been covered on Stack Overflow as well.</li>
<li>The WordPress FAQ explains <a href=""http://codex.wordpress.org/FAQ_Troubleshooting#How_do_I_solve_the_Headers_already_sent_warning_problem.3F"" rel=""noreferrer"">How do I solve the Headers already sent warning problem?</a> in a generic manner.</li>
<li>Adobe Community: <a href=""http://kb2.adobe.com/community/publishing/505/cpsid_50572.html"" rel=""noreferrer"">PHP development: why redirects don't work (headers already sent)</a></li>
<li>Nucleus FAQ: <a href=""http://faq.nucleuscms.org/item/79"" rel=""noreferrer"">What does &quot;page headers already sent&quot; mean?</a></li>
<li>One of the more thorough explanations is <a href=""http://web.archive.org/web/20080430141149/http://www.expertsrt.com/tutorials/Matt/HTTP_headers.html"" rel=""noreferrer"">HTTP Headers and the PHP header() Function - A tutorial by NicholasSolutions</a> (Internet Archive link).
It covers HTTP in detail and gives a few guidelines for rewriting scripts.</li>
</ul>
",345031,,762272,,11/9/2021 8:36,11/9/2021 8:36,,,,20,,,,CC BY-SA 4.0
7892349,2,,7892334,10/25/2011 16:16,,3204,,"<pre><code>SELECT 
    t.NAME AS TableName,
    s.Name AS SchemaName,
    p.rows,
    SUM(a.total_pages) * 8 AS TotalSpaceKB, 
    CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS TotalSpaceMB,
    SUM(a.used_pages) * 8 AS UsedSpaceKB, 
    CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS UsedSpaceMB, 
    (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB,
    CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB
FROM 
    sys.tables t
INNER JOIN      
    sys.indexes i ON t.OBJECT_ID = i.object_id
INNER JOIN 
    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
INNER JOIN 
    sys.allocation_units a ON p.partition_id = a.container_id
LEFT OUTER JOIN 
    sys.schemas s ON t.schema_id = s.schema_id
WHERE 
    t.NAME NOT LIKE 'dt%' 
    AND t.is_ms_shipped = 0
    AND i.OBJECT_ID &gt; 255 
GROUP BY 
    t.Name, s.Name, p.Rows
ORDER BY 
    TotalSpaceMB DESC, t.Name
</code></pre>
",13302,,13302,,2/18/2020 14:02,2/18/2020 14:02,,,,14,,,,CC BY-SA 4.0
8880633,2,,8880603,1/16/2012 13:24,,3169,,"<p>You can use it like this:</p>

<pre><code>## declare an array variable
declare -a arr=(""element1"" ""element2"" ""element3"")

## now loop through the above array
for i in ""${arr[@]}""
do
   echo ""$i""
   # or do whatever with individual element of the array
done

# You can access them using echo ""${arr[0]}"", ""${arr[1]}"" also
</code></pre>

<p>Also works for multi-line array declaration</p>

<pre><code>declare -a arr=(""element1"" 
                ""element2"" ""element3""
                ""element4""
                )
</code></pre>
",548225,,248616,,11/14/2016 7:53,11/14/2016 7:53,,,,1,,,,CC BY-SA 3.0
247623,2,,247621,10/29/2008 17:10,,3115,,"<h1>C# language version history:</h1>
<p>These are the <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history"" rel=""nofollow noreferrer"">versions of C#</a> known about at the time of this writing:</p>
<ul>
<li><strong>C# 1.0</strong> released with .NET 1.0 and VS2002 (January 2002)</li>
<li><strong>C# 1.2</strong> (bizarrely enough); released with .NET 1.1 and VS2003 (April 2003). First version to call <code>Dispose</code> on <code>IEnumerator</code>s which implemented <code>IDisposable</code>. A few other small features.</li>
<li><strong>C# 2.0</strong> released with .NET 2.0 and VS2005 (November 2005). Major new features: generics, anonymous methods, nullable types, and iterator blocks</li>
<li><strong>C# 3.0</strong> released with .NET 3.5 and VS2008 (November 2007). Major new features: lambda expressions, extension methods, expression trees, anonymous types, implicit typing (<code>var</code>), and query expressions</li>
<li><strong>C# 4.0</strong> released with .NET 4 and VS2010 (April 2010). Major new features: late binding (<code>dynamic</code>), delegate and interface generic variance, more <a href=""https://en.wikipedia.org/wiki/Component_Object_Model"" rel=""nofollow noreferrer"">COM</a> support, named arguments, tuple data type and optional parameters</li>
<li><strong>C# 5.0</strong> released with .NET 4.5 and VS2012 (August 2012). <a href=""https://devblogs.microsoft.com/csharpfaq/visual-studio-11-beta-is-here/"" rel=""nofollow noreferrer"">Major features</a>: async programming, and caller info attributes. Breaking change: <a href=""https://ericlippert.com/2009/11/16/closing-over-the-loop-variable-considered-harmful-part-two/"" rel=""nofollow noreferrer"">loop variable closure</a>.</li>
<li><strong>C# 6.0</strong> released with .NET 4.6 and VS2015 (July 2015). Implemented by <a href=""https://github.com/dotnet/roslyn"" rel=""nofollow noreferrer"">Roslyn</a>. <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-6"" rel=""nofollow noreferrer"">Features</a>: initializers for automatically implemented properties, using directives to import static members, exception filters, element initializers, <code>await</code> in <code>catch</code> and <code>finally</code>, extension <code>Add</code> methods in collection initializers.</li>
<li><strong>C# 7.0</strong> released with .NET 4.7 and VS2017 (March 2017). Major <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7"" rel=""nofollow noreferrer"">new features</a>: <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#tuples"" rel=""nofollow noreferrer"">tuples</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#ref-locals-and-returns"" rel=""nofollow noreferrer"">ref locals and ref return</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#pattern-matching"" rel=""nofollow noreferrer"">pattern matching</a> (including pattern-based switch statements), <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#out-variables"" rel=""nofollow noreferrer"">inline <code>out</code> parameter declarations</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#local-functions"" rel=""nofollow noreferrer"">local functions</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#numeric-literal-syntax-improvements"" rel=""nofollow noreferrer"">binary literals, digit separators</a>, and <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#generalized-async-return-types"" rel=""nofollow noreferrer"">arbitrary async returns</a>.</li>
<li><strong>C# 7.1</strong> released with VS2017 v15.3 (August 2017). New features: <a href=""https://github.com/dotnet/csharplang/issues/97"" rel=""nofollow noreferrer"">async main</a>, <a href=""https://github.com/dotnet/csharplang/issues/415"" rel=""nofollow noreferrer"">tuple member name inference</a>, <a href=""https://github.com/dotnet/csharplang/issues/102"" rel=""nofollow noreferrer"">default expression</a>, and <a href=""https://github.com/dotnet/csharplang/issues/154"" rel=""nofollow noreferrer"">pattern matching with generics</a>.</li>
<li><strong>C# 7.2</strong> released with VS2017 v15.5 (November 2017). New features: <a href=""https://github.com/dotnet/csharplang/issues/37"" rel=""nofollow noreferrer"">private protected access modifier</a>, <a href=""https://github.com/dotnet/csharplang/issues/666"" rel=""nofollow noreferrer"">Span&lt;T&gt;, aka interior pointer, aka stackonly struct</a>, and <a href=""https://github.com/dotnet/csharplang/milestone/6"" rel=""nofollow noreferrer"">everything else</a>.</li>
<li><strong>C# 7.3</strong> released with VS2017 v15.7 (May 2018). New features: <a href=""https://devblogs.microsoft.com/premier-developer/dissecting-new-generics-constraints-in-c-7-3/"" rel=""nofollow noreferrer"">enum, delegate and <code>unmanaged</code> generic type constraints</a>. <code>ref</code> reassignment. Unsafe improvements: <code>stackalloc</code> initialization, unpinned indexed <code>fixed</code> buffers, custom <code>fixed</code> statements. Improved overloading resolution. Expression variables in initializers and queries. <code>==</code> and <code>!=</code> defined for tuples. Auto-properties' backing fields can now be targeted by attributes.</li>
<li><strong>C# 8.0</strong> released with .NET Core 3.0 and VS2019 v16.3 (September 2019). Major <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8"" rel=""nofollow noreferrer"">new features</a>: <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/nullable-references"" rel=""nofollow noreferrer"">nullable reference-types</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#asynchronous-streams"" rel=""nofollow noreferrer"">asynchronous streams</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#indices-and-ranges"" rel=""nofollow noreferrer"">indices and ranges</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#readonly-members"" rel=""nofollow noreferrer"">readonly members</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#using-declarations"" rel=""nofollow noreferrer"">using declarations</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#default-interface-methods"" rel=""nofollow noreferrer"">default interface methods</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#static-local-functions"" rel=""nofollow noreferrer"">static local functions</a>, and <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#enhancement-of-interpolated-verbatim-strings"" rel=""nofollow noreferrer"">enhancement of interpolated verbatim strings</a>.</li>
<li><strong>C# 9.0</strong> released with <a href=""https://devblogs.microsoft.com/dotnet/announcing-net-5-0/"" rel=""nofollow noreferrer"">.NET 5.0</a> and VS2019 v16.8 (November 2020). Major <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9"" rel=""nofollow noreferrer"">new features</a>: <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9#init-only-setters"" rel=""nofollow noreferrer"">init-only properties</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9#record-types"" rel=""nofollow noreferrer"">records</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/with-expression"" rel=""nofollow noreferrer"">with-expressions</a>, data classes, positional records, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9#top-level-statements"" rel=""nofollow noreferrer"">top-level programs</a>, <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9#pattern-matching-enhancements"" rel=""nofollow noreferrer"">improved pattern matching</a> (simple type patterns, relational patterns, logical patterns), improved target typing (target-type <code>new</code> expressions, target typed <code>??</code> and <code>?</code>), and covariant returns. Minor features: relax ordering of <code>ref</code> and <code>partial</code> modifiers, parameter null checking, lambda discard parameters, native <code>int</code>s, attributes on local functions, function pointers, static lambdas, extension <code>GetEnumerator</code>, module initializers, and extending partial.</li>
<li><strong>C# 10.0</strong> released with .NET 6.0 (November 2021). Major <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-10"" rel=""nofollow noreferrer"">new features</a>: record structs, struct parameterless constructors, interpolated string handlers, global <code>using</code> directives, file-scoped namespace declarations, extended property patterns, const interpolated strings, mixed assignment and declaration in deconstruction, async method builders (via attributes) for individual methods, the <code>CallerArgumentExpression</code> attribute for parameters, enhanced <code>#line</code> pragmas.</li>
<li><strong>C# 11.0</strong> will be released with .NET 7.0 (Date to be annonced, already testable). Major <a href=""https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-11"" rel=""nofollow noreferrer"">new features</a>: file-scoped types, generic math support, auto-default structs, pattern match <code>Span&lt;char&gt;</code> on a constant string, extended nameof scope, numeric <code>IntPtr</code>, UTF-8 string literals, required members, <code>ref</code> fields and <code>scoped ref</code>, raw string literals, improved method group conversion to delegate, warning wave 7, generic attributes, newlines in string interpolation expressions, list patterns</li>
</ul>
<h2>In response to the OP's question:</h2>
<blockquote>
<p>What are the correct version numbers for C#? What came out when? Why can't I find any answers about C# 3.5?</p>
</blockquote>
<p>There is no such thing as C# 3.5 - the cause of confusion here is that the C# 3.0 is present in .NET 3.5. The language and framework are versioned independently, however - as is the CLR, which is at version 2.0 for .NET 2.0 through 3.5, .NET 4 introducing CLR 4.0, service packs notwithstanding. The CLR in .NET 4.5 has various improvements, but the versioning is unclear: in some places it may be referred to as CLR 4.5 (<a href=""https://msdn.microsoft.com/en-us/library/bb822049.aspx"" rel=""nofollow noreferrer"">this MSDN page</a> used to refer to it that way, for example), but the <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.environment.version"" rel=""nofollow noreferrer""><code>Environment.Version</code></a> property still reports 4.0.xxx.</p>
<p>As of May 3, 2017, the C# Language Team created a history of C# versions and features on their GitHub repository: <a href=""https://github.com/dotnet/csharplang/blob/master/Language-Version-History.md"" rel=""nofollow noreferrer"">Features Added in C# Language Versions</a>. There is also <a href=""https://github.com/dotnet/roslyn/blob/master/docs/Language%20Feature%20Status.md"" rel=""nofollow noreferrer"">a page that tracks upcoming and recently implemented language features</a>.</p>
",22656,Jon Skeet,4992721,Jon Skeet,9/26/2022 22:17,9/26/2022 22:17,,,,1,,,10/29/2008 17:10,CC BY-SA 4.0
2257449,2,,2257441,2/13/2010 12:26,,3096,,"<p><strong>Answer in one line:</strong></p>
<pre><code>''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
</code></pre>
<p>or even shorter starting with Python 3.6 using <a href=""https://docs.python.org/3/library/random.html#random.choices"" rel=""noreferrer""><code>random.choices()</code></a>:</p>
<pre><code>''.join(random.choices(string.ascii_uppercase + string.digits, k=N))
</code></pre>
<p><strong>A cryptographically more secure version:</strong> <a href=""https://stackoverflow.com/a/23728630/2213647"">see this post</a></p>
<pre><code>''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
</code></pre>
<p><strong>In details, with a clean function for further reuse:</strong></p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; import random
&gt;&gt;&gt; def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
&gt;&gt;&gt; id_generator()
'G5G74W'
&gt;&gt;&gt; id_generator(3, &quot;6793YUIO&quot;)
'Y3U'
</code></pre>
<p><strong>How does it work ?</strong></p>
<p>We import <code>string</code>, a module that contains sequences of common ASCII characters, and <code>random</code>, a module that deals with random generation.</p>
<p><code>string.ascii_uppercase + string.digits</code> just concatenates the list of characters representing uppercase ASCII chars and digits:</p>
<pre><code>&gt;&gt;&gt; string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
&gt;&gt;&gt; string.digits
'0123456789'
&gt;&gt;&gt; string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
</code></pre>
<p>Then we use a list comprehension to create a list of 'n' elements:</p>
<pre><code>&gt;&gt;&gt; range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
&gt;&gt;&gt; ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']
</code></pre>
<p>In the example above, we use <code>[</code> to create the list, but we don't in the <code>id_generator</code> function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this <a href=""https://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855"">here</a>).</p>
<p>Instead of asking to create 'n' times the string <code>elem</code>, we will ask Python to create 'n' times a random character, picked from a sequence of characters:</p>
<pre><code>&gt;&gt;&gt; random.choice(&quot;abcde&quot;)
'a'
&gt;&gt;&gt; random.choice(&quot;abcde&quot;)
'd'
&gt;&gt;&gt; random.choice(&quot;abcde&quot;)
'b'
</code></pre>
<p>Therefore <code>random.choice(chars) for _ in range(size)</code> really is creating a sequence of <code>size</code> characters. Characters that are randomly picked from <code>chars</code>:</p>
<pre><code>&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]
['a', 'b', 'b']
&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]
['e', 'b', 'e']
&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]
['d', 'a', 'c']
</code></pre>
<p>Then we just join them with an empty string so the sequence becomes a string:</p>
<pre><code>&gt;&gt;&gt; ''.join(['a', 'b', 'b'])
'abb'
&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]
['d', 'c', 'b']
&gt;&gt;&gt; ''.join(random.choice('abcde') for _ in range(3))
'dac'
</code></pre>
",20862,,12763686,,5/24/2021 3:12,5/24/2021 3:12,,,,28,,,,CC BY-SA 4.0
5506483,2,,5506339,3/31/2011 21:19,,3039,,"<p><strong>EDIT:</strong> Since git 2.13, there is a command to save a specific path to the stash: <code>git stash push &lt;path&gt;</code>. For example: </p>

<pre><code>git stash push -m welcome_cart app/views/cart/welcome.thtml
</code></pre>

<p><strong>OLD ANSWER:</strong></p>

<p>You can do that using <code>git stash --patch</code> (or <code>git stash -p</code>) -- you'll enter interactive mode where you'll be presented with each hunk that was changed. Use <code>n</code> to skip the files that you don't want to stash, <code>y</code> when you encounter the one that you want to stash, and <code>q</code> to quit and leave the remaining hunks unstashed.  <code>a</code> will stash the shown hunk and the rest of the hunks in that file.</p>

<p>Not the most user-friendly approach, but it gets the work done if you really need it.</p>
",41071,,2664350,,1/28/2019 7:59,1/28/2019 7:59,,,,26,,,,CC BY-SA 4.0
2068407,2,,49547,1/14/2010 23:50,,3013,,"<h1>Introduction</h1>
<p>The correct minimum set of headers that works across all mentioned clients (and proxies):</p>
<pre><code>Cache-Control: no-cache, no-store, must-revalidate
Pragma: no-cache
Expires: 0
</code></pre>
<p>The <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9"" rel=""noreferrer""><code>Cache-Control</code></a> is per the HTTP 1.1 spec for clients and proxies (and implicitly required by some clients next to <code>Expires</code>). The <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.32"" rel=""noreferrer""><code>Pragma</code></a> is per the HTTP 1.0 spec for prehistoric clients. The <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21"" rel=""noreferrer""><code>Expires</code></a> is per the HTTP 1.0 and 1.1 specs for clients and proxies. In HTTP 1.1, the <code>Cache-Control</code> takes precedence over <code>Expires</code>, so it's after all for HTTP 1.0 proxies only.</p>
<p>If you don't care about IE6 and its broken caching when serving pages over HTTPS with only <code>no-store</code>, then you could omit <code>Cache-Control: no-cache</code>.</p>
<pre><code>Cache-Control: no-store, must-revalidate
Pragma: no-cache
Expires: 0
</code></pre>
<p>If you don't care about IE6 nor HTTP 1.0 clients (HTTP 1.1 was introduced in 1997), then you could omit <code>Pragma</code>.</p>
<pre><code>Cache-Control: no-store, must-revalidate
Expires: 0
</code></pre>
<p>If you don't care about HTTP 1.0 proxies either, then you could omit <code>Expires</code>.</p>
<pre><code>Cache-Control: no-store, must-revalidate
</code></pre>
<p>On the other hand, if the server auto-includes a valid <code>Date</code> header, then you could theoretically omit <code>Cache-Control</code> too and rely on <code>Expires</code> only.</p>
<pre><code>Date: Wed, 24 Aug 2016 18:32:02 GMT
Expires: 0
</code></pre>
<p>But that may fail if e.g. the end-user manipulates the operating system date and the client software is relying on it.</p>
<p>Other <code>Cache-Control</code> parameters such as <code>max-age</code> are irrelevant if the abovementioned <code>Cache-Control</code> parameters are specified. The <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.29"" rel=""noreferrer""><code>Last-Modified</code></a> header as included in most other answers here is <em>only</em> interesting if you <strong>actually want</strong> to cache the request, so you don't need to specify it at all.</p>
<h1>How to set it?</h1>
<p>Using PHP:</p>
<pre class=""lang-php prettyprint-override""><code>header(&quot;Cache-Control: no-cache, no-store, must-revalidate&quot;); // HTTP 1.1.
header(&quot;Pragma: no-cache&quot;); // HTTP 1.0.
header(&quot;Expires: 0&quot;); // Proxies.
</code></pre>
<p>Using Java Servlet, or Node.js:</p>
<pre class=""lang-java prettyprint-override""><code>response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;); // HTTP 1.1.
response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;); // HTTP 1.0.
response.setHeader(&quot;Expires&quot;, &quot;0&quot;); // Proxies.
</code></pre>
<p>Using ASP.NET-MVC</p>
<pre class=""lang-cs prettyprint-override""><code>Response.Cache.SetCacheability(HttpCacheability.NoCache);  // HTTP 1.1.
Response.Cache.AppendCacheExtension(&quot;no-store, must-revalidate&quot;);
Response.AppendHeader(&quot;Pragma&quot;, &quot;no-cache&quot;); // HTTP 1.0.
Response.AppendHeader(&quot;Expires&quot;, &quot;0&quot;); // Proxies.
</code></pre>
<p>Using ASP.NET Web API:</p>
<pre class=""lang-cs prettyprint-override""><code>// `response` is an instance of System.Net.Http.HttpResponseMessage
response.Headers.CacheControl = new CacheControlHeaderValue
{
    NoCache = true,
    NoStore = true,
    MustRevalidate = true
};
response.Headers.Pragma.ParseAdd(&quot;no-cache&quot;);
// We can't use `response.Content.Headers.Expires` directly
// since it allows only `DateTimeOffset?` values.
response.Content?.Headers.TryAddWithoutValidation(&quot;Expires&quot;, 0.ToString()); 
</code></pre>
<p>Using ASP.NET:</p>
<pre class=""lang-cs prettyprint-override""><code>Response.AppendHeader(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;); // HTTP 1.1.
Response.AppendHeader(&quot;Pragma&quot;, &quot;no-cache&quot;); // HTTP 1.0.
Response.AppendHeader(&quot;Expires&quot;, &quot;0&quot;); // Proxies.
</code></pre>
<p>Using ASP.NET Core v3</p>
<pre class=""lang-c# prettyprint-override""><code>// using Microsoft.Net.Http.Headers
Response.Headers[HeaderNames.CacheControl] = &quot;no-cache, no-store, must-revalidate&quot;;
Response.Headers[HeaderNames.Expires] = &quot;0&quot;;
Response.Headers[HeaderNames.Pragma] = &quot;no-cache&quot;;
</code></pre>
<p>Using ASP:</p>
<pre class=""lang-vb prettyprint-override""><code>Response.addHeader &quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot; ' HTTP 1.1.
Response.addHeader &quot;Pragma&quot;, &quot;no-cache&quot; ' HTTP 1.0.
Response.addHeader &quot;Expires&quot;, &quot;0&quot; ' Proxies.
</code></pre>
<p>Using Ruby on Rails:</p>
<pre class=""lang-ruby prettyprint-override""><code>headers[&quot;Cache-Control&quot;] = &quot;no-cache, no-store, must-revalidate&quot; # HTTP 1.1.
headers[&quot;Pragma&quot;] = &quot;no-cache&quot; # HTTP 1.0.
headers[&quot;Expires&quot;] = &quot;0&quot; # Proxies.
</code></pre>
<p>Using Python/Flask:</p>
<pre class=""lang-python prettyprint-override""><code>response = make_response(render_template(...))
response.headers[&quot;Cache-Control&quot;] = &quot;no-cache, no-store, must-revalidate&quot; # HTTP 1.1.
response.headers[&quot;Pragma&quot;] = &quot;no-cache&quot; # HTTP 1.0.
response.headers[&quot;Expires&quot;] = &quot;0&quot; # Proxies.
</code></pre>
<p>Using Python/Django:</p>
<pre class=""lang-python prettyprint-override""><code>response[&quot;Cache-Control&quot;] = &quot;no-cache, no-store, must-revalidate&quot; # HTTP 1.1.
response[&quot;Pragma&quot;] = &quot;no-cache&quot; # HTTP 1.0.
response[&quot;Expires&quot;] = &quot;0&quot; # Proxies.
</code></pre>
<p>Using Python/Pyramid:</p>
<pre class=""lang-python prettyprint-override""><code>request.response.headerlist.extend(
    (
        ('Cache-Control', 'no-cache, no-store, must-revalidate'),
        ('Pragma', 'no-cache'),
        ('Expires', '0')
    )
)
</code></pre>
<p>Using Go:</p>
<pre class=""lang-default prettyprint-override""><code>responseWriter.Header().Set(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;) // HTTP 1.1.
responseWriter.Header().Set(&quot;Pragma&quot;, &quot;no-cache&quot;) // HTTP 1.0.
responseWriter.Header().Set(&quot;Expires&quot;, &quot;0&quot;) // Proxies.
</code></pre>
<p>Using Clojure (require Ring utils):</p>
<pre class=""lang-clj prettyprint-override""><code>(require '[ring.util.response :as r])
(-&gt; response
  (r/header &quot;Cache-Control&quot; &quot;no-cache, no-store, must-revalidate&quot;)
  (r/header &quot;Pragma&quot; &quot;no-cache&quot;)
  (r/header &quot;Expires&quot; 0))
</code></pre>
<p>Using Apache <code>.htaccess</code> file:</p>
<pre class=""lang-xml prettyprint-override""><code>&lt;IfModule mod_headers.c&gt;
    Header set Cache-Control &quot;no-cache, no-store, must-revalidate&quot;
    Header set Pragma &quot;no-cache&quot;
    Header set Expires 0
&lt;/IfModule&gt;
</code></pre>
<p>Using HTML:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-cache, no-store, must-revalidate&quot;&gt;
&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;&gt;
&lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot;&gt;
</code></pre>
<h1>HTML meta tags vs HTTP response headers</h1>
<p>Important to know is that when an HTML page is served over an HTTP connection, and a header is present in <strong>both</strong> the HTTP response headers and the HTML <code>&lt;meta http-equiv&gt;</code> tags, then the one specified in the HTTP response header will get precedence over the HTML meta tag. The HTML meta tag will only be used when the page is viewed from a local disk file system via a <code>file://</code> URL. See also <a href=""http://www.w3.org/TR/html4/charset.html#h-5.2.2"" rel=""noreferrer"">W3 HTML spec chapter 5.2.2</a>. Take care with this when you don't specify them programmatically because the webserver can namely include some default values.</p>
<p>Generally, you'd better just <strong>not</strong> specify the HTML meta tags to avoid confusion by starters and rely on hard HTTP response headers. Moreover, specifically those <code>&lt;meta http-equiv&gt;</code> tags are <a href=""http://validator.w3.org"" rel=""noreferrer""><strong>invalid</strong></a> in HTML5. Only the <code>http-equiv</code> values listed in <a href=""http://w3c.github.io/html/document-metadata.html#pragma-directives"" rel=""noreferrer"">HTML5 specification</a> are allowed.</p>
<h1>Verifying the actual HTTP response headers</h1>
<p>To verify the one and the other, you can see/debug them in the HTTP traffic monitor of the web browser's developer toolset. You can get there by pressing F12 in Chrome/Firefox23+/IE9+, and then opening the &quot;Network&quot; or &quot;Net&quot; tab panel, and then clicking the HTTP request of interest to uncover all detail about the HTTP request and response. The <a href=""https://i.stack.imgur.com/fSnXH.png"" rel=""noreferrer"">below screenshot</a> is from Chrome:</p>
<p><img src=""https://i.stack.imgur.com/fSnXH.png"" alt=""Chrome developer toolset HTTP traffic monitor showing HTTP response headers on stackoverflow.com"" /></p>
<h1>I want to set those headers on file downloads too</h1>
<p>First of all, this question and answer are targeted on &quot;web pages&quot; (HTML pages), not &quot;file downloads&quot; (PDF, zip, Excel, etc). You'd better have them cached and make use of some file version identifier somewhere in the URI path or query string to force a redownload on a changed file. When applying those no-cache headers on file downloads anyway, then beware of the IE7/8 bug when serving a file download over HTTPS instead of HTTP. For detail, see <a href=""https://stackoverflow.com/q/5034454"">IE cannot download foo.jsf. IE was not able to open this internet site. The requested site is either unavailable or cannot be found</a>.</p>
",157882,,470844,,8/21/2021 8:32,8/21/2021 8:32,,,,56,,,11/19/2013 11:11,CC BY-SA 4.0
71334,2,,71323,9/16/2008 11:21,,2981,,"<h2>Use <code>\r</code> instead of <code>\n</code>.</h2>
<p>Substituting by <code>\n</code> inserts a null character into the text. To get a newline, use <code>\r</code>. When <em>searching</em> for a newline, you‚Äôd still use <code>\n</code>, however. This asymmetry is due to the fact that <code>\n</code> and <code>\r</code> <a href=""http://vim.wikia.com/wiki/Search_and_replace"" rel=""noreferrer"">do slightly different things</a>:</p>
<p><code>\n</code> matches an end of line (newline), whereas <code>\r</code> matches a carriage return. On the other hand, in substitutions <code>\n</code> inserts a null character whereas <code>\r</code> inserts a newline (more precisely, it‚Äôs treated as the input <kbd>CR</kbd>). Here‚Äôs a small, non-interactive example to illustrate this, using the Vim command line feature (in other words, you can copy and paste the following into a terminal to run it). <code>xxd</code> shows a hexdump of the resulting file.</p>
<pre><code>echo bar &gt; test
(echo 'Before:'; xxd test) &gt; output.txt
vim test '+s/b/\n/' '+s/a/\r/' +wq
(echo 'After:'; xxd test) &gt;&gt; output.txt
more output.txt
</code></pre>

<pre><code>Before:
0000000: 6261 720a                                bar.
After:
0000000: 000a 720a                                ..r.
</code></pre>
<p>In other words, <code>\n</code> has inserted the byte 0x00 into the text; <code>\r</code> has inserted the byte 0x0a.</p>
",1968,Konrad Rudolph,1968,,8/31/2020 13:48,8/31/2020 13:48,,,,17,,,,CC BY-SA 4.0
2706537,2,,2706500,4/24/2010 23:19,,2915,,"<p>The <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.random"" rel=""noreferrer""><code>Random</code> class</a> is used to create random numbers. (Pseudo-random that is of course.).</p>
<p>Example:</p>
<pre class=""lang-cs prettyprint-override""><code>Random rnd = new Random();
int month  = rnd.Next(1, 13);  // creates a number between 1 and 12
int dice   = rnd.Next(1, 7);   // creates a number between 1 and 6
int card   = rnd.Next(52);     // creates a number between 0 and 51
</code></pre>
<p>If you are going to create more than one random number, you should keep the <code>Random</code> instance and reuse it. If you create new instances too close in time, they will produce the same series of random numbers as the random generator is seeded from the system clock.</p>
",69083,,69083,,2/27/2022 2:11,2/27/2022 2:11,,,,15,,,,CC BY-SA 4.0
30081318,2,,30081275,5/6/2015 15:33,,2883,,"<p>The Python 3 <code>range()</code> object doesn't produce numbers immediately; it is a smart <a href=""https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence"" rel=""noreferrer"">sequence object</a> that produces numbers <em>on demand</em>. All it contains is your start, stop and step values, then as you iterate over the object the next integer is calculated each iteration.</p>
<p>The object also implements the <a href=""https://docs.python.org/3/reference/datamodel.html#object.__contains__"" rel=""noreferrer""><code>object.__contains__</code> hook</a>, and <em>calculates</em> if your number is part of its range. Calculating is a (near) constant time operation <sup>*</sup>. There is never a need to scan through all possible integers in the range.</p>
<p>From the <a href=""https://docs.python.org/3/library/stdtypes.html#range"" rel=""noreferrer""><code>range()</code> object documentation</a>:</p>
<blockquote>
<p>The advantage of the <code>range</code> type over a regular <code>list</code> or <code>tuple</code> is that a range object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the <code>start</code>, <code>stop</code> and <code>step</code> values, calculating individual items and subranges as needed).</p>
</blockquote>
<p>So at a minimum, your <code>range()</code> object would do:</p>
<pre><code>class my_range:
    def __init__(self, start, stop=None, step=1, /):
        if stop is None:
            start, stop = 0, start
        self.start, self.stop, self.step = start, stop, step
        if step &lt; 0:
            lo, hi, step = stop, start, -step
        else:
            lo, hi = start, stop
        self.length = 0 if lo &gt; hi else ((hi - lo - 1) // step) + 1

    def __iter__(self):
        current = self.start
        if self.step &lt; 0:
            while current &gt; self.stop:
                yield current
                current += self.step
        else:
            while current &lt; self.stop:
                yield current
                current += self.step

    def __len__(self):
        return self.length

    def __getitem__(self, i):
        if i &lt; 0:
            i += self.length
        if 0 &lt;= i &lt; self.length:
            return self.start + i * self.step
        raise IndexError('my_range object index out of range')

    def __contains__(self, num):
        if self.step &lt; 0:
            if not (self.stop &lt; num &lt;= self.start):
                return False
        else:
            if not (self.start &lt;= num &lt; self.stop):
                return False
        return (num - self.start) % self.step == 0
</code></pre>
<p>This is still missing several things that a real <code>range()</code> supports (such as the <code>.index()</code> or <code>.count()</code> methods, hashing, equality testing, or slicing), but should give you an idea.</p>
<p>I also simplified the <code>__contains__</code> implementation to only focus on integer tests; if you give a real <code>range()</code> object a non-integer value (including subclasses of <code>int</code>), a slow scan is initiated to see if there is a match, just as if you use a containment test against a list of all the contained values. This was done to continue to support other numeric types that just happen to support equality testing with integers but are not expected to support integer arithmetic as well. See the original <a href=""http://bugs.python.org/issue1766304"" rel=""noreferrer"">Python issue</a> that implemented the containment test.</p>
<hr />
<p>* <em>Near</em> constant time because Python integers are unbounded and so math operations also grow in time as N grows, making this a O(log N) operation. Since it‚Äôs all executed in optimised C code and Python stores integer values in 30-bit chunks, you‚Äôd run out of memory before you saw any performance impact due to the size of the integers involved here.</p>
",100297,,100297,,5/16/2021 15:26,5/16/2021 15:26,,,,11,,,,CC BY-SA 4.0
247621,1,247623,,10/29/2008 17:09,,2823,400070,"<p>What are the correct version numbers for C#? What came out when? Why can't I find any answers about <strong><em>C# 3.5</em></strong>?</p>

<p>This question is primarily to aid those who are searching for an answer using an incorrect version number, e.g. <strong><em>C# 3.5</em></strong>. The hope is that anyone failing to find an answer with the wrong version number will find <em>this</em> question and then search again with the right version number.</p>
",22656,Jon Skeet,17939455,Jon Skeet,3/1/2022 15:09,9/26/2022 22:17,What are the correct version numbers for C#?,<c#><.net><visual-studio><.net-core><.net-framework-version>,13,4,672,,10/29/2008 17:09,CC BY-SA 3.0
2793153,2,,2793150,5/8/2010 6:16,,2820,,"<p><sup><em>First a disclaimer beforehand: the posted code snippets are all basic examples. You'll need to handle trivial <code>IOException</code>s and <code>RuntimeException</code>s like <code>NullPointerException</code>, <code>ArrayIndexOutOfBoundsException</code> and consorts yourself.</em></sup></p>
<p><sup><em>In case you're developing for Android instead of Java, note also that since introduction of API level 28, cleartext HTTP requests are <a href=""https://developer.android.com/about/versions/pie/android-9.0-changes-28#tls-enabled"" rel=""noreferrer"">disabled by default</a>. You are encouraged to use <code>HttpsURLConnection</code>, but if it is really necessary, cleartext can be enabled in the Application Manifest.</em></sup></p>
<hr />
<h3>Preparing</h3>
<p>We first need to know at least the URL and the charset. The parameters are optional and depend on the functional requirements.</p>
<pre><code>String url = &quot;http://example.com&quot;;
String charset = &quot;UTF-8&quot;;  // Or in Java 7 and later, use the constant: java.nio.charset.StandardCharsets.UTF_8.name()
String param1 = &quot;value1&quot;;
String param2 = &quot;value2&quot;;
// ...

String query = String.format(&quot;param1=%s&amp;param2=%s&quot;,
    URLEncoder.encode(param1, charset),
    URLEncoder.encode(param2, charset));
</code></pre>
<p>The query parameters must be in <code>name=value</code> format and be concatenated by <code>&amp;</code>. You would normally also <a href=""http://en.wikipedia.org/wiki/Percent-encoding"" rel=""noreferrer"">URL-encode</a> the query parameters with the specified charset using <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLEncoder.html#encode-java.lang.String-java.lang.String-"" rel=""noreferrer""><code>URLEncoder#encode()</code></a>.</p>
<p><sup>The <code>String#format()</code> is just for convenience. I prefer it when I would need the String concatenation operator <code>+</code> more than twice.</sup></p>
<hr />
<h3>Firing an <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3"" rel=""noreferrer"">HTTP GET</a> request with (optionally) query parameters</h3>
<p>It's a trivial task. It's the default request method.</p>
<pre><code>URLConnection connection = new URL(url + &quot;?&quot; + query).openConnection();
connection.setRequestProperty(&quot;Accept-Charset&quot;, charset);
InputStream response = connection.getInputStream();
// ...
</code></pre>
<p>Any query string should be concatenated to the URL using <code>?</code>. The <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2"" rel=""noreferrer""><code>Accept-Charset</code></a> header may hint the server what encoding the parameters are in. If you don't send any query string, then you can leave the <code>Accept-Charset</code> header away. If you don't need to set any headers, then you can even use the <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URL.html#openStream%28%29"" rel=""noreferrer""><code>URL#openStream()</code></a> shortcut method.</p>
<pre><code>InputStream response = new URL(url).openStream();
// ...
</code></pre>
<p>Either way, if the other side is an <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html"" rel=""noreferrer""><code>HttpServlet</code></a>, then its <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29"" rel=""noreferrer""><code>doGet()</code></a> method will be called and the parameters will be available by <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29"" rel=""noreferrer""><code>HttpServletRequest#getParameter()</code></a>.</p>
<p>For testing purposes, you can print the response body to <a href=""https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29"" rel=""noreferrer"">standard output</a> as below:</p>
<pre><code>try (Scanner scanner = new Scanner(response)) {
    String responseBody = scanner.useDelimiter(&quot;\\A&quot;).next();
    System.out.println(responseBody);
}
</code></pre>
<hr />
<h3>Firing an <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5"" rel=""noreferrer"">HTTP POST</a> request with query parameters</h3>
<p>Setting the <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29"" rel=""noreferrer""><code>URLConnection#setDoOutput()</code></a> to <code>true</code> implicitly sets the request method to POST. The standard HTTP POST as web forms do is of type <code>application/x-www-form-urlencoded</code> wherein the query string is written to the request body.</p>
<pre><code>URLConnection connection = new URL(url).openConnection();
connection.setDoOutput(true); // Triggers POST.
connection.setRequestProperty(&quot;Accept-Charset&quot;, charset);
connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded;charset=&quot; + charset);

try (OutputStream output = connection.getOutputStream()) {
    output.write(query.getBytes(charset));
}

InputStream response = connection.getInputStream();
// ...
</code></pre>
<p>Note: whenever you'd like to submit a HTML form programmatically, don't forget to take the <code>name=value</code> pairs of any <code>&lt;input type=&quot;hidden&quot;&gt;</code> elements into the query string and of course also the <code>name=value</code> pair of the <code>&lt;input type=&quot;submit&quot;&gt;</code> element which you'd like to &quot;press&quot; programmatically (because that's usually been used in the server side to distinguish if a button was pressed and if so, which one).</p>
<p>You can also cast the obtained <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html"" rel=""noreferrer""><code>URLConnection</code></a> to <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html"" rel=""noreferrer""><code>HttpURLConnection</code></a> and use its <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setRequestMethod%28java.lang.String%29"" rel=""noreferrer""><code>HttpURLConnection#setRequestMethod()</code></a> instead. But if you're trying to use the connection for output you still need to set <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29"" rel=""noreferrer""><code>URLConnection#setDoOutput()</code></a> to <code>true</code>.</p>
<pre><code>HttpURLConnection httpConnection = (HttpURLConnection) new URL(url).openConnection();
httpConnection.setRequestMethod(&quot;POST&quot;);
// ...
</code></pre>
<p>Either way, if the other side is an <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html"" rel=""noreferrer""><code>HttpServlet</code></a>, then its <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29"" rel=""noreferrer""><code>doPost()</code></a> method will be called and the parameters will be available by <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29"" rel=""noreferrer""><code>HttpServletRequest#getParameter()</code></a>.</p>
<hr />
<h3>Actually firing the HTTP request</h3>
<p>You can fire the HTTP request explicitly with <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#connect%28%29"" rel=""noreferrer""><code>URLConnection#connect()</code></a>, but the request will automatically be fired on demand when you want to get any information about the HTTP response, such as the response body using <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#getInputStream%28%29"" rel=""noreferrer""><code>URLConnection#getInputStream()</code></a> and so on. The above examples does exactly that, so the <code>connect()</code> call is in fact superfluous.</p>
<hr />
<h3>Gathering HTTP response information</h3>
<ol>
<li><a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"" rel=""noreferrer"">HTTP response status</a>:</li>
</ol>
<p>You need an <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html"" rel=""noreferrer""><code>HttpURLConnection</code></a> here. Cast it first if necessary.</p>
<pre><code>    int status = httpConnection.getResponseCode();
</code></pre>
<ol start=""2"">
<li><p><a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html"" rel=""noreferrer"">HTTP response headers</a>:</p>
<pre><code> for (Entry&lt;String, List&lt;String&gt;&gt; header : connection.getHeaderFields().entrySet()) {
     System.out.println(header.getKey() + &quot;=&quot; + header.getValue());
 }
</code></pre>
</li>
<li><p><a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17"" rel=""noreferrer"">HTTP response encoding</a>:</p>
</li>
</ol>
<p>When the <code>Content-Type</code> contains a <code>charset</code> parameter, then the response body is likely text based and we'd like to process the response body with the server-side specified character encoding then.</p>
<pre><code>    String contentType = connection.getHeaderField(&quot;Content-Type&quot;);
    String charset = null;

    for (String param : contentType.replace(&quot; &quot;, &quot;&quot;).split(&quot;;&quot;)) {
        if (param.startsWith(&quot;charset=&quot;)) {
            charset = param.split(&quot;=&quot;, 2)[1];
            break;
        }
    }

    if (charset != null) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(response, charset))) {
            for (String line; (line = reader.readLine()) != null;) {
                // ... System.out.println(line)?
            }
        }
    } else {
        // It's likely binary content, use InputStream/OutputStream.
    }
</code></pre>
<hr />
<h3>Maintaining the session</h3>
<p>The server side session is usually backed by a cookie. Some web forms require that you're logged in and/or are tracked by a session. You can use the <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html"" rel=""noreferrer""><code>CookieHandler</code></a> API to maintain cookies. You need to prepare a <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/CookieManager.html"" rel=""noreferrer""><code>CookieManager</code></a> with a <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html"" rel=""noreferrer""><code>CookiePolicy</code></a> of <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html#ACCEPT_ALL"" rel=""noreferrer""><code>ACCEPT_ALL</code></a> before sending all HTTP requests.</p>
<pre><code>// First set the default cookie manager.
CookieHandler.setDefault(new CookieManager(null, CookiePolicy.ACCEPT_ALL));

// All the following subsequent URLConnections will use the same cookie manager.
URLConnection connection = new URL(url).openConnection();
// ...

connection = new URL(url).openConnection();
// ...

connection = new URL(url).openConnection();
// ...
</code></pre>
<p>Note that this is known to not always work properly in all circumstances. If it fails for you, then best is to manually gather and set the cookie headers. You basically need to grab all <code>Set-Cookie</code> headers from the response of the login or the first <code>GET</code> request and then pass this through the subsequent requests.</p>
<pre><code>// Gather all cookies on the first request.
URLConnection connection = new URL(url).openConnection();
List&lt;String&gt; cookies = connection.getHeaderFields().get(&quot;Set-Cookie&quot;);
// ...

// Then use the same cookies on all subsequent requests.
connection = new URL(url).openConnection();
for (String cookie : cookies) {
    connection.addRequestProperty(&quot;Cookie&quot;, cookie.split(&quot;;&quot;, 2)[0]);
}
// ...
</code></pre>
<p>The <code>split(&quot;;&quot;, 2)[0]</code> is there to get rid of cookie attributes which are irrelevant for the server side like <code>expires</code>, <code>path</code>, etc. Alternatively, you could also use <code>cookie.substring(0, cookie.indexOf(';'))</code> instead of <code>split()</code>.</p>
<hr />
<h3>Streaming mode</h3>
<p>The <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html"" rel=""noreferrer""><code>HttpURLConnection</code></a> will by default buffer the <em>entire</em> request body before actually sending it, regardless of whether you've set a fixed content length yourself using <code>connection.setRequestProperty(&quot;Content-Length&quot;, contentLength);</code>. This may cause <code>OutOfMemoryException</code>s whenever you concurrently send large POST requests (e.g. uploading files). To avoid this, you would like to set the <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setFixedLengthStreamingMode%28int%29"" rel=""noreferrer""><code>HttpURLConnection#setFixedLengthStreamingMode()</code></a>.</p>
<pre><code>httpConnection.setFixedLengthStreamingMode(contentLength);
</code></pre>
<p>But if the content length is really not known beforehand, then you can make use of chunked streaming mode by setting the <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setChunkedStreamingMode%28int%29"" rel=""noreferrer""><code>HttpURLConnection#setChunkedStreamingMode()</code></a> accordingly. This will set the HTTP <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41"" rel=""noreferrer""><code>Transfer-Encoding</code></a> header to <code>chunked</code> which will force the request body being sent in chunks. The below example will send the body in chunks of 1¬†KB.</p>
<pre><code>httpConnection.setChunkedStreamingMode(1024);
</code></pre>
<hr />
<h3>User-Agent</h3>
<p>It can happen that <a href=""https://stackoverflow.com/questions/13670692/403-forbidden-with-java-but-not-web-browser"">a request returns an unexpected response, while it works fine with a real web browser</a>. The server side is probably blocking requests based on the <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43"" rel=""noreferrer""><code>User-Agent</code></a> request header. The <code>URLConnection</code> will by default set it to <code>Java/1.6.0_19</code> where the last part is obviously the JRE version. You can override this as follows:</p>
<pre><code>connection.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36&quot;); // Do as if you're using Chrome 41 on Windows 7.
</code></pre>
<p>Use the User-Agent string from a <a href=""http://www.useragentstring.com/pages/useragentstring.php"" rel=""noreferrer"">recent browser</a>.</p>
<hr />
<h3>Error handling</h3>
<p>If the HTTP response code is <code>4nn</code> (Client Error) or <code>5nn</code> (Server Error), then you may want to read the <code>HttpURLConnection#getErrorStream()</code> to see if the server has sent any useful error information.</p>
<pre><code>InputStream error = ((HttpURLConnection) connection).getErrorStream();
</code></pre>
<p>If the HTTP response code is -1, then something went wrong with connection and response handling. The <code>HttpURLConnection</code> implementation is in older JREs somewhat buggy with keeping connections alive. You may want to turn it off by setting the <code>http.keepAlive</code> system property to <code>false</code>. You can do this programmatically in the beginning of your application by:</p>
<pre><code>System.setProperty(&quot;http.keepAlive&quot;, &quot;false&quot;);
</code></pre>
<hr />
<h3>Uploading files</h3>
<p>You'd normally use <a href=""http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2"" rel=""noreferrer""><code>multipart/form-data</code></a> encoding for mixed POST content (binary and character data). The encoding is in more detail described in <a href=""http://www.faqs.org/rfcs/rfc2388.html"" rel=""noreferrer"">RFC2388</a>.</p>
<pre><code>String param = &quot;value&quot;;
File textFile = new File(&quot;/path/to/file.txt&quot;);
File binaryFile = new File(&quot;/path/to/file.bin&quot;);
String boundary = Long.toHexString(System.currentTimeMillis()); // Just generate some unique random value.
String CRLF = &quot;\r\n&quot;; // Line separator required by multipart/form-data.
URLConnection connection = new URL(url).openConnection();
connection.setDoOutput(true);
connection.setRequestProperty(&quot;Content-Type&quot;, &quot;multipart/form-data; boundary=&quot; + boundary);

try (
    OutputStream output = connection.getOutputStream();
    PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, charset), true);
) {
    // Send normal param.
    writer.append(&quot;--&quot; + boundary).append(CRLF);
    writer.append(&quot;Content-Disposition: form-data; name=\&quot;param\&quot;&quot;).append(CRLF);
    writer.append(&quot;Content-Type: text/plain; charset=&quot; + charset).append(CRLF);
    writer.append(CRLF).append(param).append(CRLF).flush();

    // Send text file.
    writer.append(&quot;--&quot; + boundary).append(CRLF);
    writer.append(&quot;Content-Disposition: form-data; name=\&quot;textFile\&quot;; filename=\&quot;&quot; + textFile.getName() + &quot;\&quot;&quot;).append(CRLF);
    writer.append(&quot;Content-Type: text/plain; charset=&quot; + charset).append(CRLF); // Text file itself must be saved in this charset!
    writer.append(CRLF).flush();
    Files.copy(textFile.toPath(), output);
    output.flush(); // Important before continuing with writer!
    writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.

    // Send binary file.
    writer.append(&quot;--&quot; + boundary).append(CRLF);
    writer.append(&quot;Content-Disposition: form-data; name=\&quot;binaryFile\&quot;; filename=\&quot;&quot; + binaryFile.getName() + &quot;\&quot;&quot;).append(CRLF);
    writer.append(&quot;Content-Type: &quot; + URLConnection.guessContentTypeFromName(binaryFile.getName())).append(CRLF);
    writer.append(&quot;Content-Transfer-Encoding: binary&quot;).append(CRLF);
    writer.append(CRLF).flush();
    Files.copy(binaryFile.toPath(), output);
    output.flush(); // Important before continuing with writer!
    writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.

    // End of multipart/form-data.
    writer.append(&quot;--&quot; + boundary + &quot;--&quot;).append(CRLF).flush();
}
</code></pre>
<p>If the other side is an <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html"" rel=""noreferrer""><code>HttpServlet</code></a>, then its <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29"" rel=""noreferrer""><code>doPost()</code></a> method will be called and the parts will be available by <a href=""http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getPart%28java.lang.String%29"" rel=""noreferrer""><code>HttpServletRequest#getPart()</code></a> (note, thus <strong>not</strong> <code>getParameter()</code> and so on!). The <code>getPart()</code> method is however relatively new, it's introduced in Servlet 3.0 (Glassfish 3, Tomcat 7, etc.). Prior to Servlet 3.0, your best choice is using <a href=""http://commons.apache.org/fileupload"" rel=""noreferrer"">Apache Commons FileUpload</a> to parse a <code>multipart/form-data</code> request. Also see <a href=""https://stackoverflow.com/questions/2422468/upload-big-file-to-servlet/2424824#2424824"">this answer</a> for examples of both the FileUpload and the Servelt 3.0 approaches.</p>
<hr />
<h3>Dealing with untrusted or misconfigured HTTPS sites</h3>
<p><sup><em>In case you're developing for Android instead of Java, <strong>be careful</strong>: the workaround below may save your day if you don't have correct certificates deployed during development. But you should not use it for production. These days (April 2021) Google will not allow your app be distributed on Play Store if they detect insecure hostname verifier, see <a href=""https://support.google.com/faqs/answer/7188426."" rel=""noreferrer"">https://support.google.com/faqs/answer/7188426.</a></em></sup></p>
<p>Sometimes you need to connect an HTTPS URL, perhaps because you're writing a web scraper. In that case, you may likely face a <code>javax.net.ssl.SSLException: Not trusted server certificate</code> on some HTTPS sites who doesn't keep their SSL certificates up to date, or a <code>java.security.cert.CertificateException: No subject alternative DNS name matching [hostname] found</code> or <code>javax.net.ssl.SSLProtocolException: handshake alert: unrecognized_name</code> on some misconfigured HTTPS sites.</p>
<p>The following one-time-run <code>static</code> initializer in your web scraper class should make <code>HttpsURLConnection</code> more lenient as to those HTTPS sites and thus not throw those exceptions anymore.</p>
<pre><code>static {
    TrustManager[] trustAllCertificates = new TrustManager[] {
        new X509TrustManager() {
            @Override
            public X509Certificate[] getAcceptedIssuers() {
                return null; // Not relevant.
            }
            @Override
            public void checkClientTrusted(X509Certificate[] certs, String authType) {
                // Do nothing. Just allow them all.
            }
            @Override
            public void checkServerTrusted(X509Certificate[] certs, String authType) {
                // Do nothing. Just allow them all.
            }
        }
    };

    HostnameVerifier trustAllHostnames = new HostnameVerifier() {
        @Override
        public boolean verify(String hostname, SSLSession session) {
            return true; // Just allow them all.
        }
    };

    try {
        System.setProperty(&quot;jsse.enableSNIExtension&quot;, &quot;false&quot;);
        SSLContext sc = SSLContext.getInstance(&quot;SSL&quot;);
        sc.init(null, trustAllCertificates, new SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        HttpsURLConnection.setDefaultHostnameVerifier(trustAllHostnames);
    }
    catch (GeneralSecurityException e) {
        throw new ExceptionInInitializerError(e);
    }
}
</code></pre>
<hr />
<h3>Last words</h3>
<p>The <a href=""http://hc.apache.org/httpcomponents-client-ga/"" rel=""noreferrer"">Apache HttpComponents HttpClient</a> is <em>much</em> more convenient in this all :)</p>
<ul>
<li><a href=""http://hc.apache.org/httpcomponents-client-ga/tutorial/html/"" rel=""noreferrer"">HttpClient Tutorial</a></li>
<li><a href=""http://hc.apache.org/httpcomponents-client-ga/examples.html"" rel=""noreferrer"">HttpClient Examples</a></li>
</ul>
<hr />
<h3>Parsing and extracting HTML</h3>
<p>If all you want is parsing and extracting data from HTML, then better use a HTML parser like <a href=""http://jsoup.org"" rel=""noreferrer"">Jsoup</a>.</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/3152138/what-are-the-pros-and-cons-of-the-leading-java-html-parsers/3154281#3154281"">What are the pros/cons of leading HTML parsers in Java</a></li>
<li><a href=""https://stackoverflow.com/questions/2835505/how-to-scan-a-website-or-page-for-info-and-bring-it-into-my-program/2835555#2835555"">How to scan and extract a webpage in Java</a></li>
</ul>
",157882,,63550,,8/11/2021 12:27,8/11/2021 12:27,,,,24,,,5/8/2010 6:16,CC BY-SA 4.0
11508490,2,,11508463,7/16/2012 16:26,,2735,,"<p>You need to make the object first, then use <code>[]</code> to set it.</p>
<pre><code>var key = &quot;happyCount&quot;;
var obj = {};

obj[key] = someValueArray;
myArray.push(obj);
</code></pre>
<hr />
<p>UPDATE 2021:</p>
<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names"" rel=""noreferrer"">Computed property names</a> feature was introduced in ECMAScript 2015 (ES6) that allows you to dynamically compute the names of the object properties in JavaScript object literal notation.</p>
<pre><code>const yourKeyVariable = &quot;happyCount&quot;;
const someValueArray= [...];

const obj = {
    [yourKeyVariable]: someValueArray,
}
</code></pre>
",206403,,206403,,9/27/2021 16:25,9/27/2021 16:25,,,,11,,,,CC BY-SA 4.0
21718555,6,,,2/12/2014 4:19,,2693,,"<p><strong><a href=""http://meta.stackexchange.com/a/221857"">Siddharth's answers to your questions</a></strong></p>

<hr>

<p><strong>Brief Intro</strong></p>

<p>My name is Siddharth Rout &amp; I would like to nominate myself.</p>

<p>Stack Overflow is always open with 2 other sites on my firefox tabs. If I am not answering new questions, I would probably be visiting old questions/comments &amp; answering/editing/retagging/flagging them or clearing the queues.</p>

<hr>

<p><strong>Reasons Why I feel that I can be a Stack Overflow mod</strong></p>

<ol>
<li>I'm already a mod in vbforums &amp; msdn. So the concept of moderation isn't new to me &amp; I come with relevant expertise which is required for moderation</li>
<li>I work from home so I've enough time on my hands to devote to moderation. Especially on weekends. (TimeZone: UTC + 05:30)</li>
<li>I'm very friendly, approachable &amp; a fast learner besides being a good team player.</li>
</ol>

<hr>

<p><strong>What would be my main focus if I become a mod</strong></p>

<p>My main focus will <strong>NOT</strong> be to clear the mod queues or perform a specific mod duty like opening/closing questions etc. These duties come ""<strong>As Is</strong>"" when one becomes a mod &amp; one has to do them.</p>

<p>My <strong>special agenda</strong> would be to make Stack Overflow a more welcoming place for new users. I believe if all of us actually put in special efforts to do this then the flags will automatically reduce drastically.</p>
",1140579,,-1,,4/25/2014 11:18,2/19/2014 20:08,,,,76,,,2/12/2014 4:19,CC BY-SA 3.0
2906586,2,,2906582,5/25/2010 16:40,,2673,,"<h2>HTML</h2>
<p>The plain HTML way is to put it in a <code>&lt;form&gt;</code> wherein you specify the desired target URL in the <code>action</code> attribute.</p>
<pre><code>&lt;form action=&quot;https://google.com&quot;&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Go to Google&quot; /&gt;
&lt;/form&gt;
</code></pre>
<p>If necessary, set CSS <code>display: inline;</code> on the form to keep it in the flow with the surrounding text. Instead of <code>&lt;input type=&quot;submit&quot;&gt;</code> in above example, you can also use <code>&lt;button type=&quot;submit&quot;&gt;</code>. The only difference is that the <code>&lt;button&gt;</code> element allows children.</p>
<p>You'd intuitively expect to be able to use <code>&lt;button href=&quot;https://google.com&quot;&gt;</code> analogous with the <code>&lt;a&gt;</code> element, but unfortunately no, this attribute does not exist according to <a href=""https://html.spec.whatwg.org/multipage/form-elements.html#the-button-element"" rel=""noreferrer"">HTML specification</a>.</p>
<h2>CSS</h2>
<p>If CSS is allowed, simply use an <code>&lt;a&gt;</code> which you style to look like a button using among others the <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/appearance"" rel=""noreferrer""><code>appearance</code></a> property (<a href=""https://caniuse.com/#feat=css-appearance"" rel=""noreferrer"">it's only not supported in Internet¬†Explorer</a>).</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>a.button {
    -webkit-appearance: button;
    -moz-appearance: button;
    appearance: button;

    text-decoration: none;
    color: initial;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;a href=""https://google.com"" class=""button""&gt;Go to Google&lt;/a&gt;</code></pre>
</div>
</div>
</p>
<p>Or pick one of those many CSS libraries like <a href=""https://getbootstrap.com/docs/5.1/components/buttons/"" rel=""noreferrer"">Bootstrap</a>.</p>
<pre><code>&lt;a href=&quot;https://google.com&quot; class=&quot;btn btn-primary&quot;&gt;Go to Google&lt;/a&gt;
</code></pre>
<h2>JavaScript</h2>
<p>If JavaScript is allowed, set the <code>window.location.href</code>.</p>
<pre><code>&lt;input type=&quot;button&quot; onclick=&quot;location.href='https://google.com';&quot; value=&quot;Go to Google&quot; /&gt;
</code></pre>
<p>Instead of <code>&lt;input type=&quot;button&quot;&gt;</code> in above example, you can also use <code>&lt;button&gt;</code>. The only difference is that the <code>&lt;button&gt;</code> element allows children.</p>
",157882,,2741678,,5/16/2022 15:17,5/16/2022 15:17,,,,24,,,,CC BY-SA 4.0
886979,2,,886955,5/20/2009 9:11,,2668,,"<p>Like other answerers, I'd definitely <em>prefer</em> to put the loops in a different method, at which point you can just return to stop iterating completely. This answer just shows how the requirements in the question can be met.</p>

<p>You can use <code>break</code> with a label for the outer loop. For example:</p>

<pre><code>public class Test {
    public static void main(String[] args) {
        outerloop:
        for (int i=0; i &lt; 5; i++) {
            for (int j=0; j &lt; 5; j++) {
                if (i * j &gt; 6) {
                    System.out.println(""Breaking"");
                    break outerloop;
                }
                System.out.println(i + "" "" + j);
            }
        }
        System.out.println(""Done"");
    }
}
</code></pre>

<p>This prints:</p>

<pre><code>0 0
0 1
0 2
0 3
0 4
1 0
1 1
1 2
1 3
1 4
2 0
2 1
2 2
2 3
Breaking
Done
</code></pre>
",22656,,22656,,12/5/2018 7:27,12/5/2018 7:27,,,,2,,,,CC BY-SA 4.0
49266052,6,,,3/13/2018 21:21,,2662,,"<p>Hello I'm <a href=""https://stackoverflow.com/users/6451573/jean-fran%c3%a7ois-fabre"">Jean-Fran√ßois Fabre</a></p>

<p>I'm a member since 2016 only, but I already do my best to moderate the site given my 20k+ reputation and badges. I've voted 11000+ times, 5900 times to close. I also raised 200 useful flags.</p>

<p>I frequently visit SOCVR where off-topic questions are closed (or not) in an efficient way.</p>

<p>I'm not too much of a meta pundit (even if I have some well-received stuff there), sometimes missing the spirit of some aspects of the site, but I try to do the best I can on the main site by</p>

<ul>
<li>avoiding to answer unclear/too broad questions, closing instead</li>
<li>being a FFGITW to find the best duplicate when I can hammer before dupe answers pour in.</li>
<li>try to comment to help OP even if the question is a duplicate or off-topic.</li>
</ul>

<p>I've been tempted to be chatty or snarky at first, but that was becoming ""too easy"", I find that more rewarding to try to respect others (while downvoting &amp; closing questions when needed).</p>

<p>I visited the site every day (but one) since 07/2016.</p>

<p>Being a moderator would take the experience one step further.</p>

<p><a href=""https://meta.stackoverflow.com/a/364580"">MetaQuestionnaire</a></p>
",6451573,,6451573,,3/20/2018 14:10,3/20/2018 14:10,,,,28,,,3/13/2018 21:21,CC BY-SA 3.0
406333,2,,406294,1/2/2009 8:51,,2657,,"<p>As per the documentation: <a href=""http://msdn.microsoft.com/en-us/library/ms177634%28SQL.90%29.aspx"" rel=""noreferrer"">FROM (Transact-SQL)</a>:</p>
<pre><code>&lt;join_type&gt; ::= 
    [ { INNER | { { LEFT | RIGHT | FULL } [ OUTER ] } } [ &lt;join_hint&gt; ] ]
    JOIN
</code></pre>
<p>The keyword <code>OUTER</code> is marked as optional (enclosed in square brackets). In this specific case, whether you specify <code>OUTER</code> or not makes no difference.  Note that while the other elements of the join clause is also marked as optional, leaving <em>them</em> out <em>will</em> make a difference.</p>
<p>For instance, the entire type-part of the <code>JOIN</code> clause is optional, in which case the default is <code>INNER</code> if you just specify <code>JOIN</code>. In other words, this is legal:</p>
<pre><code>SELECT *
FROM A JOIN B ON A.X = B.Y
</code></pre>
<p>Here's a list of equivalent syntaxes:</p>
<pre><code>A LEFT JOIN B            A LEFT OUTER JOIN B
A RIGHT JOIN B           A RIGHT OUTER JOIN B
A FULL JOIN B            A FULL OUTER JOIN B
A INNER JOIN B           A JOIN B
</code></pre>
<p>Also take a look at the answer I left on this other SO question: <a href=""https://stackoverflow.com/a/894659/267"">SQL left join vs multiple tables on FROM line?</a>.</p>
",267,lassevk,3404097,,6/3/2022 11:02,6/3/2022 11:02,,,,4,,,,CC BY-SA 4.0
4660186,2,,4660142,1/11/2011 16:52,,2651,,"<h1>What is the cause?</h1>
<h2>Bottom Line</h2>
<p>You are trying to use something that is <code>null</code> (or <code>Nothing</code> in VB.NET). This means you either set it to <code>null</code>, or you never set it to anything at all.</p>
<p>Like anything else, <code>null</code> gets passed around. If it is <code>null</code> <em>in</em> method &quot;A&quot;, it could be that method &quot;B&quot; passed a <code>null</code> <em>to</em> method &quot;A&quot;.</p>
<p><code>null</code> can have different meanings:</p>
<ol>
<li>Object variables that are <strong>uninitialized</strong> and hence <strong>point to nothing.</strong> In this case, if you access members of such objects, it causes a <code>NullReferenceException</code>.</li>
<li>The developer is <strong>using <code>null</code> intentionally to indicate there is no meaningful value available.</strong> Note that C# has the concept of nullable datatypes for variables (like database tables can have nullable fields) - you can assign <code>null</code> to them to indicate there is no value stored in it, for example <code>int? a = null;</code> (which is a shortcut for <code>Nullable&lt;int&gt; a = null;</code>) where the question mark indicates it is allowed to store <code>null</code> in variable <code>a</code>. You can check that either with <code>if (a.HasValue) {...}</code> or with <code>if (a==null) {...}</code>. Nullable variables, like <code>a</code> this example, allow to access the value via <code>a.Value</code> explicitly, or just as normal via <code>a</code>. <br/><strong>Note</strong> that accessing it via <code>a.Value</code> throws an <code>InvalidOperationException</code> instead of a <code>NullReferenceException</code> if <code>a</code> is <code>null</code> - you should do the check beforehand, i.e. if you have another non-nullable variable <code>int b;</code> then you should do assignments like <code>if (a.HasValue) { b = a.Value; }</code> or shorter <code>if (a != null) { b = a; }</code>.</li>
</ol>
<p>The rest of this article goes into more detail and shows mistakes that many programmers often make which can lead to a <code>NullReferenceException</code>.</p>
<h2>More Specifically</h2>
<p>The <code>runtime</code> throwing a <code>NullReferenceException</code> <strong>always</strong> means the same thing: you are trying to use a reference, and the reference is not initialized (or it was <em>once</em> initialized, but is <em>no longer</em> initialized).</p>
<p>This means the reference is <code>null</code>, and you cannot access members (such as methods) through a <code>null</code> reference. The simplest case:</p>
<pre class=""lang-cs prettyprint-override""><code>string foo = null;
foo.ToUpper();
</code></pre>
<p>This will throw a <code>NullReferenceException</code> at the second line because you can't call the instance method <code>ToUpper()</code> on a <code>string</code> reference pointing to <code>null</code>.</p>
<h1>Debugging</h1>
<p>How do you find the source of a <code>NullReferenceException</code>? Apart from looking at the exception itself, which will be thrown exactly at the location where it occurs, the general rules of debugging in Visual Studio apply: place strategic breakpoints and <a href=""https://learn.microsoft.com/en-us/visualstudio/debugger/debugger-windows"" rel=""noreferrer"">inspect your variables</a>, either by hovering the mouse over their names, opening a (Quick)Watch window or using the various debugging panels like Locals and Autos.</p>
<p>If you want to find out where the reference is or isn't set, right-click its name and select &quot;Find All References&quot;. You can then place a breakpoint at every found location and run your program with the debugger attached. Every time the debugger breaks on such a breakpoint, you need to determine whether you expect the reference to be non-null, inspect the variable, and verify that it points to an instance when you expect it to.</p>
<p>By following the program flow this way, you can find the location where the instance should not be null, and why it isn't properly set.</p>
<h1>Examples</h1>
<p>Some common scenarios where the exception can be thrown:</p>
<h3>Generic</h3>
<pre class=""lang-cs prettyprint-override""><code>ref1.ref2.ref3.member
</code></pre>
<p>If ref1 or ref2 or ref3 is null, then you'll get a <code>NullReferenceException</code>. If you want to solve the problem, then find out which one is null by rewriting the expression to its simpler equivalent:</p>
<pre class=""lang-cs prettyprint-override""><code>var r1 = ref1;
var r2 = r1.ref2;
var r3 = r2.ref3;
r3.member
</code></pre>
<p>Specifically, in <code>HttpContext.Current.User.Identity.Name</code>, the <code>HttpContext.Current</code> could be null, or the <code>User</code> property could be null, or the <code>Identity</code> property could be null.</p>
<h3>Indirect</h3>
<pre class=""lang-cs prettyprint-override""><code>public class Person 
{
    public int Age { get; set; }
}
public class Book 
{
    public Person Author { get; set; }
}
public class Example 
{
    public void Foo() 
    {
        Book b1 = new Book();
        int authorAge = b1.Author.Age; // You never initialized the Author property.
                                       // there is no Person to get an Age from.
    }
}
</code></pre>
<p>If you want to avoid the child (Person) null reference, you could initialize it in the parent (Book) object's constructor.</p>
<h3>Nested Object Initializers</h3>
<p>The same applies to nested object initializers:</p>
<pre class=""lang-cs prettyprint-override""><code>Book b1 = new Book 
{ 
   Author = { Age = 45 } 
};
</code></pre>
<p>This translates to:</p>
<pre class=""lang-cs prettyprint-override""><code>Book b1 = new Book();
b1.Author.Age = 45;
</code></pre>
<p>While the <code>new</code> keyword is used, it only creates a new instance of <code>Book</code>, but not a new instance of <code>Person</code>, so the <code>Author</code> the property is still <code>null</code>.</p>
<h3>Nested Collection Initializers</h3>
<pre class=""lang-cs prettyprint-override""><code>public class Person 
{
    public ICollection&lt;Book&gt; Books { get; set; }
}
public class Book 
{
    public string Title { get; set; }
}
</code></pre>
<p>The nested collection <code>Initializers</code> behave the same:</p>
<pre class=""lang-cs prettyprint-override""><code>Person p1 = new Person 
{
    Books = {
         new Book { Title = &quot;Title1&quot; },
         new Book { Title = &quot;Title2&quot; },
    }
};
</code></pre>
<p>This translates to:</p>
<pre class=""lang-cs prettyprint-override""><code>Person p1 = new Person();
p1.Books.Add(new Book { Title = &quot;Title1&quot; });
p1.Books.Add(new Book { Title = &quot;Title2&quot; });
</code></pre>
<p>The <code>new Person</code> only creates an instance of <code>Person</code>, but the <code>Books</code> collection is still <code>null</code>. The collection <code>Initializer</code> syntax does not create a collection
for <code>p1.Books</code>, it only translates to the <code>p1.Books.Add(...)</code> statements.</p>
<h3>Array</h3>
<pre class=""lang-cs prettyprint-override""><code>int[] numbers = null;
int n = numbers[0]; // numbers is null. There is no array to index.
</code></pre>
<h3>Array Elements</h3>
<pre><code>Person[] people = new Person[5];
people[0].Age = 20 // people[0] is null. The array was allocated but not
                   // initialized. There is no Person to set the Age for.
</code></pre>
<h3>Jagged Arrays</h3>
<pre class=""lang-cs prettyprint-override""><code>long[][] array = new long[1][];
array[0][0] = 3; // is null because only the first dimension is yet initialized.
                 // Use array[0] = new long[2]; first.
</code></pre>
<h3>Collection/List/Dictionary</h3>
<pre class=""lang-cs prettyprint-override""><code>Dictionary&lt;string, int&gt; agesForNames = null;
int age = agesForNames[&quot;Bob&quot;]; // agesForNames is null.
                               // There is no Dictionary to perform the lookup.
</code></pre>
<h3>Range Variable (Indirect/Deferred)</h3>
<pre class=""lang-cs prettyprint-override""><code>public class Person 
{
    public string Name { get; set; }
}
var people = new List&lt;Person&gt;();
people.Add(null);
var names = from p in people select p.Name;
string firstName = names.First(); // Exception is thrown here, but actually occurs
                                  // on the line above.  &quot;p&quot; is null because the
                                  // first element we added to the list is null.
</code></pre>
<h3>Events (C#)</h3>
<pre class=""lang-cs prettyprint-override""><code>public class Demo
{
    public event EventHandler StateChanged;
    
    protected virtual void OnStateChanged(EventArgs e)
    {        
        StateChanged(this, e); // Exception is thrown here 
                               // if no event handlers have been attached
                               // to StateChanged event
    }
}
</code></pre>
<p>(Note: The VB.NET compiler inserts null checks for event usage, so it's not necessary to check events for <code>Nothing</code> in VB.NET.)</p>
<h3>Bad Naming Conventions:</h3>
<p>If you named fields differently from locals, you might have realized that you never initialized the field.</p>
<pre class=""lang-cs prettyprint-override""><code>public class Form1
{
    private Customer customer;
    
    private void Form1_Load(object sender, EventArgs e) 
    {
        Customer customer = new Customer();
        customer.Name = &quot;John&quot;;
    }
    
    private void Button_Click(object sender, EventArgs e)
    {
        MessageBox.Show(customer.Name);
    }
}
</code></pre>
<p>This can be solved by following the convention to prefix fields with an underscore:</p>
<pre class=""lang-cs prettyprint-override""><code>    private Customer _customer;
</code></pre>
<h3>ASP.NET Page Life cycle:</h3>
<pre class=""lang-cs prettyprint-override""><code>public partial class Issues_Edit : System.Web.UI.Page
{
    protected TestIssue myIssue;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
             // Only called on first load, not when button clicked
             myIssue = new TestIssue(); 
        }
    }
        
    protected void SaveButton_Click(object sender, EventArgs e)
    {
        myIssue.Entry = &quot;NullReferenceException here!&quot;;
    }
}
</code></pre>
<h3>ASP.NET Session Values</h3>
<pre class=""lang-cs prettyprint-override""><code>// if the &quot;FirstName&quot; session value has not yet been set,
// then this line will throw a NullReferenceException
string firstName = Session[&quot;FirstName&quot;].ToString();
</code></pre>
<h3>ASP.NET MVC empty view models</h3>
<p>If the exception occurs when referencing a property of <code>@Model</code> in an <code>ASP.NET MVC View</code>, you need to understand that the <code>Model</code> gets set in your action method, when you <code>return</code> a view. When you return an empty model (or model property) from your controller, the exception occurs when the views access it:</p>
<pre class=""lang-cs prettyprint-override""><code>// Controller
public class Restaurant:Controller
{
    public ActionResult Search()
    {
        return View();  // Forgot the provide a Model here.
    }
}

// Razor view 
@foreach (var restaurantSearch in Model.RestaurantSearch)  // Throws.
{
}
    
&lt;p&gt;@Model.somePropertyName&lt;/p&gt; &lt;!-- Also throws --&gt;
</code></pre>
<h3>WPF Control Creation Order and Events</h3>
<p><code>WPF</code> controls are created during the call to <code>InitializeComponent</code> in the order they appear in the visual tree.  A <code>NullReferenceException</code> will be raised in the case of early-created controls with event handlers, etc., that fire during <code>InitializeComponent</code> which reference late-created controls.</p>
<p>For example:</p>
<pre class=""lang-xml prettyprint-override""><code>&lt;Grid&gt;
    &lt;!-- Combobox declared first --&gt;
    &lt;ComboBox Name=&quot;comboBox1&quot; 
              Margin=&quot;10&quot;
              SelectedIndex=&quot;0&quot; 
              SelectionChanged=&quot;comboBox1_SelectionChanged&quot;&gt;
       &lt;ComboBoxItem Content=&quot;Item 1&quot; /&gt;
       &lt;ComboBoxItem Content=&quot;Item 2&quot; /&gt;
       &lt;ComboBoxItem Content=&quot;Item 3&quot; /&gt;
    &lt;/ComboBox&gt;
        
    &lt;!-- Label declared later --&gt;
    &lt;Label Name=&quot;label1&quot; 
           Content=&quot;Label&quot;
           Margin=&quot;10&quot; /&gt;
&lt;/Grid&gt;
</code></pre>
<p>Here <code>comboBox1</code> is created before <code>label1</code>. If <code>comboBox1_SelectionChanged</code> attempts to reference `label1, it will not yet have been created.</p>
<pre class=""lang-cs prettyprint-override""><code>private void comboBox1_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    label1.Content = comboBox1.SelectedIndex.ToString(); // NullReferenceException here!!
}
</code></pre>
<p>Changing the order of the declarations in the <code>XAML</code> (i.e., listing <code>label1</code> before <code>comboBox1</code>, ignoring issues of design philosophy) would at least resolve the <code>NullReferenceException</code> here.</p>
<h3>Cast with <code>as</code></h3>
<pre class=""lang-cs prettyprint-override""><code>var myThing = someObject as Thing;
</code></pre>
<p>This doesn't throw an <code>InvalidCastException</code> but returns a <code>null</code> when the cast fails (and when <code>someObject</code> is itself null). So be aware of that.</p>
<h3>LINQ <code>FirstOrDefault()</code> and <code>SingleOrDefault()</code></h3>
<p>The plain versions <code>First()</code> and <code>Single()</code> throw exceptions when there is nothing. The &quot;OrDefault&quot; versions return <code>null</code> in that case. So be aware of that.</p>
<h3>foreach</h3>
<p><code>foreach</code> throws when you try to iterate on a <code>null</code> collection. Usually caused by unexpected <code>null</code> result from methods that return collections.</p>
<pre class=""lang-cs prettyprint-override""><code>List&lt;int&gt; list = null;    
foreach(var v in list) { } // NullReferenceException here
</code></pre>
<p>More realistic example - select nodes from XML document. Will throw if nodes are not found but initial debugging shows that all properties valid:</p>
<pre class=""lang-cs prettyprint-override""><code>foreach (var node in myData.MyXml.DocumentNode.SelectNodes(&quot;//Data&quot;))
</code></pre>
<hr />
<h1>Ways to Avoid</h1>
<h3>Explicitly check for <code>null</code> and ignore <code>null</code> values.</h3>
<p>If you expect the reference sometimes to be <code>null</code>, you can check for it being <code>null</code> before accessing instance members:</p>
<pre class=""lang-cs prettyprint-override""><code>void PrintName(Person p)
{
    if (p != null) 
    {
        Console.WriteLine(p.Name);
    }
}
</code></pre>
<h3>Explicitly check for <code>null</code> and provide a default value.</h3>
<p>Methods you call expecting an instance can return <code>null</code>, for example when the object being sought cannot be found. You can choose to return a default value when this is the case:</p>
<pre class=""lang-cs prettyprint-override""><code>string GetCategory(Book b) 
{
    if (b == null)
        return &quot;Unknown&quot;;
    return b.Category;
}
</code></pre>
<h3>Explicitly check for <code>null</code> from method calls and throw a custom exception.</h3>
<p>You can also throw a custom exception, only to catch it in the calling code:</p>
<pre class=""lang-cs prettyprint-override""><code>string GetCategory(string bookTitle) 
{
    var book = library.FindBook(bookTitle);  // This may return null
    if (book == null)
        throw new BookNotFoundException(bookTitle);  // Your custom exception
    return book.Category;
}
</code></pre>
<h3>Use <code>Debug.Assert</code> if a value should never be <code>null</code>, to catch the problem earlier than the exception occurs.</h3>
<p>When you know during development that a method could, but never should return <code>null</code>, you can use <code>Debug.Assert()</code> to break as soon as possible when it does occur:</p>
<pre class=""lang-cs prettyprint-override""><code>string GetTitle(int knownBookID) 
{
    // You know this should never return null.
    var book = library.GetBook(knownBookID);  

    // Exception will occur on the next line instead of at the end of this method.
    Debug.Assert(book != null, &quot;Library didn't return a book for known book ID.&quot;);

    // Some other code

    return book.Title; // Will never throw NullReferenceException in Debug mode.
}
</code></pre>
<p>Though this check <a href=""https://stackoverflow.com/questions/3021538/debug-assert-appears-in-release-mode"">will not end up in your release build</a>, causing it to throw the <code>NullReferenceException</code> again when <code>book == null</code> at runtime in release mode.</p>
<h3>Use <code>GetValueOrDefault()</code> for <code>nullable</code> value types to provide a default value when they are <code>null</code>.</h3>
<pre class=""lang-cs prettyprint-override""><code>DateTime? appointment = null;
Console.WriteLine(appointment.GetValueOrDefault(DateTime.Now));
// Will display the default value provided (DateTime.Now), because appointment is null.

appointment = new DateTime(2022, 10, 20);
Console.WriteLine(appointment.GetValueOrDefault(DateTime.Now));
// Will display the appointment date, not the default
</code></pre>
<h3>Use the null coalescing operator: <code>??</code> [C#] or <code>If()</code> [VB].</h3>
<p>The shorthand to providing a default value when a <code>null</code> is encountered:</p>
<pre class=""lang-cs prettyprint-override""><code>IService CreateService(ILogger log, Int32? frobPowerLevel)
{
   var serviceImpl = new MyService(log ?? NullLog.Instance);
 
   // Note that the above &quot;GetValueOrDefault()&quot; can also be rewritten to use
   // the coalesce operator:
   serviceImpl.FrobPowerLevel = frobPowerLevel ?? 5;
}
</code></pre>
<h3>Use the null condition operator: <code>?.</code> or <code>?[x]</code> for arrays (available in C# 6 and VB.NET 14):</h3>
<p>This is also sometimes called the safe navigation or Elvis (after its shape) operator. If the expression on the left side of the operator is null, then the right side will not be evaluated, and null is returned instead. That means cases like this:</p>
<pre class=""lang-cs prettyprint-override""><code>var title = person.Title.ToUpper();
</code></pre>
<p>If the person does not have a title, this will throw an exception because it is trying to call <code>ToUpper</code> on a property with a null value.</p>
<p>In <code>C# 5</code> and below, this can be guarded with:</p>
<pre class=""lang-cs prettyprint-override""><code>var title = person.Title == null ? null : person.Title.ToUpper();
</code></pre>
<p>Now the title variable will be null instead of throwing an exception. C# 6 introduces a shorter syntax for this:</p>
<pre class=""lang-cs prettyprint-override""><code>var title = person.Title?.ToUpper();
</code></pre>
<p>This will result in the title variable being <code>null</code>, and the call to <code>ToUpper</code> is not made if <code>person.Title</code> is <code>null</code>.</p>
<p>Of course, you <em>still</em> have to check <code>title</code> for <code>null</code> or use the null condition operator together with the null coalescing operator (<code>??</code>) to supply a default value:</p>
<pre class=""lang-cs prettyprint-override""><code>// regular null check
int titleLength = 0;
if (title != null)
    titleLength = title.Length; // If title is null, this would throw NullReferenceException
    
// combining the `?` and the `??` operator
int titleLength = title?.Length ?? 0;
</code></pre>
<p>Likewise, for arrays you can use <code>?[i]</code> as follows:</p>
<pre class=""lang-cs prettyprint-override""><code>int[] myIntArray = null;
var i = 5;
int? elem = myIntArray?[i];
if (!elem.HasValue) Console.WriteLine(&quot;No value&quot;);
</code></pre>
<p>This will do the following: If <code>myIntArray</code> is <code>null</code>, the expression returns <code>null</code> and you can safely check it. If it contains an array, it will do the same as:
<code>elem = myIntArray[i];</code> and returns the i<sup>th</sup> element.</p>
<h3>Use null context (available in C# 8):</h3>
<p>Introduced in <code>C# 8</code>, null contexts and nullable reference types perform static analysis on variables and provide a compiler warning if a value can be potentially <code>null</code> or have been set to <code>null</code>. The nullable reference types allow types to be explicitly allowed to be <code>null</code>.</p>
<p>The nullable annotation context and nullable warning context can be set for a project using the <code>Nullable</code> element in your <code>csproj</code> file. This element configures how the compiler interprets the nullability of types and what warnings are generated. Valid settings are:</p>
<ul>
<li><code>enable</code>: The nullable annotation context is enabled. The nullable warning context is enabled. Variables of a reference type, string, for example, are non-nullable. All nullability warnings are enabled.</li>
<li><code>disable</code>: The nullable annotation context is disabled. The nullable warning context is disabled. Variables of a reference type are oblivious, just like earlier versions of C#. All nullability warnings are disabled.</li>
<li><code>safeonly</code>: The nullable annotation context is enabled. The nullable warning context is safeonly. Variables of a reference type are non-nullable. All safety nullability warnings are enabled.</li>
<li><code>warnings</code>: The nullable annotation context is disabled. The nullable warning context is enabled. Variables of a reference type are oblivious. All nullability warnings are enabled.</li>
<li><code>safeonlywarnings</code>: The nullable annotation context is disabled. The nullable warning context is safeonly.
Variables of a reference type are oblivious. All safety nullability warnings are enabled.</li>
</ul>
<p>A nullable reference type is noted using the same syntax as nullable value types: a <code>?</code> is appended to the type of the variable.</p>
<h3>Special techniques for debugging and fixing null derefs in iterators</h3>
<p><code>C#</code> supports &quot;iterator blocks&quot; (called &quot;generators&quot; in some other popular languages). <code>NullReferenceException</code> can be particularly tricky to debug in iterator blocks because of deferred execution:</p>
<pre class=""lang-cs prettyprint-override""><code>public IEnumerable&lt;Frob&gt; GetFrobs(FrobFactory f, int count)
{
    for (int i = 0; i &lt; count; ++i)
    yield return f.MakeFrob();
}
...
FrobFactory factory = whatever;
IEnumerable&lt;Frobs&gt; frobs = GetFrobs();
...
foreach(Frob frob in frobs) { ... }
</code></pre>
<p>If <code>whatever</code> results in <code>null</code> then <code>MakeFrob</code> will throw. Now, you might think that the right thing to do is this:</p>
<pre class=""lang-cs prettyprint-override""><code>// DON'T DO THIS
public IEnumerable&lt;Frob&gt; GetFrobs(FrobFactory f, int count)
{
   if (f == null) 
      throw new ArgumentNullException(&quot;f&quot;, &quot;factory must not be null&quot;);
   for (int i = 0; i &lt; count; ++i)
      yield return f.MakeFrob();
}
</code></pre>
<p>Why is this wrong?  Because the iterator block does not actually <em>run</em> until the <code>foreach</code>!  The call to <code>GetFrobs</code> simply returns an object which <em>when iterated</em> will run the iterator block.</p>
<p>By writing a <code>null</code> check like this you prevent the <code>NullReferenceException</code>, but you move the <code>NullArgumentException</code> to the point of the <em>iteration</em>, not to the point of the <em>call</em>, and that is <em>very confusing to debug</em>.</p>
<p>The correct fix is:</p>
<pre class=""lang-cs prettyprint-override""><code>// DO THIS
public IEnumerable&lt;Frob&gt; GetFrobs(FrobFactory f, int count)
{
   // No yields in a public method that throws!
   if (f == null) 
       throw new ArgumentNullException(&quot;f&quot;, &quot;factory must not be null&quot;);
   return GetFrobsForReal(f, count);
}
private IEnumerable&lt;Frob&gt; GetFrobsForReal(FrobFactory f, int count)
{
   // Yields in a private method
   Debug.Assert(f != null);
   for (int i = 0; i &lt; count; ++i)
        yield return f.MakeFrob();
}
</code></pre>
<p>That is, make a private helper method that has the iterator block logic and a public surface method that does the <code>null</code> check and returns the iterator. Now when <code>GetFrobs</code> is called, the <code>null</code> check happens immediately, and then <code>GetFrobsForReal</code> executes when the sequence is iterated.</p>
<p>If you examine the reference source for <code>LINQ</code> to Objects you will see that this technique is used throughout. It is slightly more clunky to write, but it makes debugging nullity errors much easier. <strong>Optimize your code for the convenience of the caller, not the convenience of the author</strong>.</p>
<h3>A note on null dereferences in unsafe code</h3>
<p><code>C#</code> has an &quot;unsafe&quot; mode which is, as the name implies, extremely dangerous because the normal safety mechanisms which provide memory safety and type safety are not enforced. <strong>You should not be writing unsafe code unless you have a thorough and deep understanding of how memory works</strong>.</p>
<p>In unsafe mode, you should be aware of two important facts:</p>
<ul>
<li>dereferencing a null <strong>pointer</strong> produces the same exception as dereferencing a null <strong>reference</strong></li>
<li>dereferencing an invalid non-null pointer <strong>can</strong> produce that exception in some circumstances</li>
</ul>
<p>To understand why that is, it helps to understand how .NET produces <code>NullReferenceException</code> in the first place. (These details apply to .NET running on Windows; other operating systems use similar mechanisms.)</p>
<p>Memory is virtualized in <code>Windows</code>; each process gets a virtual memory space of many &quot;pages&quot; of memory that are tracked by the operating system. Each page of memory has flags set on it that determine how it may be used: read from, written to, executed, and so on. The <em>lowest</em> page is marked as &quot;produce an error if ever used in any way&quot;.</p>
<p>Both a null pointer and a null reference in <code>C#</code> are internally represented as the number zero, and so any attempt to dereference it into its corresponding memory storage causes the operating system to produce an error. The .NET runtime then detects this error and turns it into the <code>NullReferenceException</code>.</p>
<p>That's why dereferencing both a null pointer and a null reference produces the same exception.</p>
<p>What about the second point? Dereferencing <em>any</em> invalid pointer that falls in the lowest page of virtual memory causes the same operating system error, and thereby the same exception.</p>
<p>Why does this make sense?  Well, suppose we have a struct containing two ints, and an unmanaged pointer equal to null. If we attempt to dereference the second int in the struct, the <code>CLR</code> will not attempt to access the storage at location zero; it will access the storage at location four. But logically this is a null dereference because we are getting to that address <em>via</em> the null.</p>
<p>If you are working with unsafe code and you get a <code>NullReferenceException</code>, just be aware that the offending pointer need not be null. It can be any location in the lowest page, and this exception will be produced.</p>
",76337,,10045660,,4/5/2021 14:05,4/5/2021 14:05,,,,9,,,1/11/2011 16:52,CC BY-SA 4.0
12944035,2,,12943819,10/17/2012 21:54,,2635,,"<p>Use the <code>indent=</code> parameter of <a href=""https://docs.python.org/3/library/json.html#json.dump"" rel=""noreferrer""><code>json.dump()</code></a> or <a href=""https://docs.python.org/3/library/json.html#json.dumps"" rel=""noreferrer""><code>json.dumps()</code></a> to specify how many spaces to indent by:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt;
&gt;&gt;&gt; your_json = '[&quot;foo&quot;, {&quot;bar&quot;: [&quot;baz&quot;, null, 1.0, 2]}]'
&gt;&gt;&gt; parsed = json.loads(your_json)
&gt;&gt;&gt; print(json.dumps(parsed, indent=4))
[
    &quot;foo&quot;,
    {
        &quot;bar&quot;: [
            &quot;baz&quot;,
            null,
            1.0,
            2
        ]
    }
]
</code></pre>
<p>To parse a file, use <a href=""https://docs.python.org/3/library/json.html#json.load"" rel=""noreferrer""><code>json.load()</code></a>:</p>
<pre><code>with open('filename.txt', 'r') as handle:
    parsed = json.load(handle)
</code></pre>
",464744,,3064538,,9/2/2022 18:41,9/2/2022 18:41,,,,8,,,,CC BY-SA 4.0
5591169,2,,5590381,4/8/2011 6:13,,2628,,"<p>C++11 introduces <a href=""http://en.cppreference.com/w/cpp/string/basic_string/stol"" rel=""noreferrer""><code>std::stoi</code></a> (and variants for each numeric type) and <a href=""http://en.cppreference.com/w/cpp/string/basic_string/to_string"" rel=""noreferrer""><code>std::to_string</code></a>, the counterparts of the C <code>atoi</code> and <code>itoa</code> but expressed in term of <code>std::string</code>.</p>

<pre><code>#include &lt;string&gt; 

std::string s = std::to_string(42);
</code></pre>

<p>is therefore the shortest way I can think of. You can even omit naming the type, using the <code>auto</code> keyword:</p>

<pre><code>auto s = std::to_string(42);
</code></pre>

<p><em>Note: see <strong>[string.conversions]</strong> (<strong>21.5</strong> in <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf"" rel=""noreferrer"">n3242</a>)</em></p>
",147192,,1787434,,3/14/2018 20:51,3/14/2018 20:51,,,,22,,,,CC BY-SA 3.0
15080458,6,,,2/26/2013 2:45,,2618,,"<p>Greetings! I‚Äôm Ryan O‚ÄôHara, and I would like to nominate myself. Again.</p>

<p>Why would I make a good moderator, you ask? Well, I like to improve things! <a href=""http://stackoverflow.com/users/707111/minitech?tab=activity&amp;sort=revisions"">My revision history</a> might be relevant. I would love to help more things ‚Äî say, arguments, spam‚Ä¶ <a href=""http://meta.stackexchange.com/questions/147784/compass-shouldnt-be-a-synonym-of-compass-geolocation"">tags</a>‚Ä¶ (Not that I would stop fixing <code>it's</code>s. I will <em>never</em> stop.)</p>

<p>That‚Äôs more or less it ‚Äî improving Stack Overflow is what moderatorship is all about. I like to think I still do that without the diamond, but it certainly helps ‚Äî and to help, I‚Äôm glad.</p>

<p>As usual, statistics instead of words can be found on <a href=""http://elections.stackexchange.com/#stackoverflow"" rel=""nofollow"">the elections.SE page</a>, so check that out! And yes, I have been away for a stretch; I promise that I‚Äôm back now and forever.<sup>1</sup></p>

<hr>

<p><sup>1</sup> Well, actually, I‚Äôve still been visiting every day ‚Äî can‚Äôt help it. This is a <em>good</em> thing, right?</p>
",707111,,-1,,4/25/2014 11:18,2/26/2013 2:45,,,,45,,,2/26/2013 2:45,CC BY-SA 3.0
4482701,2,,4482686,12/19/2010 11:26,,2598,,"<p>The answer to this question has changed over the years. The <em>current</em> answer is here at the top, followed by the various answers over the years in chronological order:</p>

<h2>Current Answer</h2>

<p>You can use <a href=""http://nodejs.org/api/fs.html#fs_fs_existssync_path"" rel=""noreferrer""><code>fs.existsSync()</code></a>:</p>

<pre><code>const fs = require(""fs""); // Or `import fs from ""fs"";` with ESM
if (fs.existsSync(path)) {
    // Do something
}
</code></pre>

<p>It was deprecated for several years, but no longer is. From the docs:</p>

<blockquote>
  <p>Note that <code>fs.exists()</code> is deprecated, but <code>fs.existsSync()</code> is not. (The
  callback parameter to <code>fs.exists()</code> accepts parameters that are
  inconsistent with other Node.js callbacks. <code>fs.existsSync()</code> does not
  use a callback.)</p>
</blockquote>

<p>You've specifically asked for a <em>synchronous</em> check, but if you can use an <em>asynchronous</em> check instead (usually best with I/O), use <a href=""https://nodejs.org/api/fs.html#fs_fspromises_access_path_mode"" rel=""noreferrer""><code>fs.promises.access</code></a> if you're using <code>async</code> functions or <a href=""https://nodejs.org/api/fs.html#fs_fs_access_path_mode_callback"" rel=""noreferrer""><code>fs.access</code></a> (since <a href=""http://nodejs.org/api/fs.html#fs_fs_exists_path_callback"" rel=""noreferrer""><code>exists</code> is deprecated</a>) if not:</p>

<p>In an <code>async</code> function:</p>

<pre><code>try {
    await fs.promises.access(""somefile"");
    // The check succeeded
} catch (error) {
    // The check failed
}
</code></pre>

<p>Or with a callback:</p>

<pre><code>fs.access(""somefile"", error =&gt; {
    if (!error) {
        // The check succeeded
    } else {
        // The check failed
    }
});
</code></pre>

<hr>

<h2>Historical Answers</h2>

<p>Here are the historical answers in chronological order:</p>

<ul>
<li><strong>Original answer from 2010</strong>
<br>(<code>stat</code>/<code>statSync</code> or <code>lstat</code>/<code>lstatSync</code>)</li>
<li><strong>Update September 2012</strong>
<br>(<code>exists</code>/<code>existsSync</code>)</li>
<li><strong>Update February 2015</strong>
<br>(Noting impending deprecation of <code>exists</code>/<code>existsSync</code>, so we're probably back to <code>stat</code>/<code>statSync</code> or <code>lstat</code>/<code>lstatSync</code>)</li>
<li><strong>Update December 2015</strong>
<br>(There's also <code>fs.access(path, fs.F_OK, function(){})</code> / <code>fs.accessSync(path, fs.F_OK)</code>, but note that if the file/directory doesn't exist, it's an error; docs for <code>fs.stat</code> recommend using <code>fs.access</code> if you need to check for existence without opening)</li>
<li><strong>Update December 2016</strong>
<br><code>fs.exists()</code> is still deprecated but <code>fs.existsSync()</code> is no longer deprecated. So you can safely use it now.</li>
</ul>

<h3>Original answer from 2010:</h3>

<p>You can use <code>statSync</code> or <code>lstatSync</code> (<a href=""http://nodejs.org/api/fs.html#fs_fs_lstatsync_path"" rel=""noreferrer"">docs link</a>), which give you an <a href=""http://nodejs.org/api/fs.html#fs_class_fs_stats"" rel=""noreferrer""><code>fs.Stats</code> object</a>. In general, if a synchronous version of a function is available, it will have the same name as the async version with <code>Sync</code> at the end. So <code>statSync</code> is the synchronous version of <code>stat</code>; <code>lstatSync</code> is the synchronous version of <code>lstat</code>, etc.</p>

<p><code>lstatSync</code> tells you both whether something exists, and if so, whether it's a file or a directory (or in some file systems, a symbolic link, block device, character device, etc.), e.g. if you need to know if it exists and is a directory:</p>

<pre><code>var fs = require('fs');
try {
    // Query the entry
    stats = fs.lstatSync('/the/path');

    // Is it a directory?
    if (stats.isDirectory()) {
        // Yes it is
    }
}
catch (e) {
    // ...
}
</code></pre>

<p>...and similarly, if it's a file, there's <code>isFile</code>; if it's a block device, there's <code>isBlockDevice</code>, etc., etc. Note the <code>try/catch</code>; it throws an error if the entry doesn't exist at all.</p>

<p><s>If you don't care what the entry <em>is</em> and only want to know whether it exists, you can use <a href=""http://nodejs.org/api/path.html#path_path_existssync_p"" rel=""noreferrer""><code>path.existsSync</code></a> (or with latest, <code>fs.existsSync</code>) as <a href=""https://stackoverflow.com/a/5008295/157247"">noted by user618408</a>:</p>

<pre><code>var path = require('path');
if (path.existsSync(""/the/path"")) { // or fs.existsSync
    // ...
}
</code></pre>

<p>It doesn't require a <code>try/catch</code> but gives you no information about what the thing is, just that it's there.</s> <code>path.existsSync</code> was deprecated long ago.</p>

<hr>

<p>Side note: You've expressly asked how to check <em>synchronously</em>, so I've used the <code>xyzSync</code> versions of the functions above. But wherever possible, with I/O, it really is best to avoid synchronous calls. Calls into the I/O subsystem take significant time from a CPU's point of view. Note how easy it is to call <a href=""http://nodejs.org/api/fs.html#fs_fs_lstat_path_callback"" rel=""noreferrer""><code>lstat</code></a> rather than <code>lstatSync</code>:</p>

<pre><code>// Is it a directory?
lstat('/the/path', function(err, stats) {
    if (!err &amp;&amp; stats.isDirectory()) {
        // Yes it is
    }
});
</code></pre>

<p>But if you need the synchronous version, it's there.</p>

<h3>Update September 2012</h3>

<p>The below answer from a couple of years ago is now a bit out of date. The current way is to use <a href=""http://nodejs.org/api/fs.html#fs_fs_existssync_path"" rel=""noreferrer""><code>fs.existsSync</code></a> to do a synchronous check for file/directory existence (or of course  <a href=""http://nodejs.org/api/fs.html#fs_fs_exists_path_callback"" rel=""noreferrer""><code>fs.exists</code></a> for an asynchronous check), rather than the <code>path</code> versions below.</p>

<p>Example:</p>

<pre><code>var fs = require('fs');

if (fs.existsSync(path)) {
    // Do something
}

// Or

fs.exists(path, function(exists) {
    if (exists) {
        // Do something
    }
});
</code></pre>

<h3>Update February 2015</h3>

<p>And here we are in 2015 and the Node docs now say that <code>fs.existsSync</code> (and <code>fs.exists</code>) ""will be deprecated"". (Because the Node folks think it's dumb to check whether something exists before opening it, which it is; but that's not the only reason for checking whether something exists!)</p>

<p>So we're probably back to the various <code>stat</code> methods... Until/unless this changes yet again, of course.</p>

<h3>Update December 2015</h3>

<p>Don't know how long it's been there, but there's also <a href=""https://nodejs.org/api/fs.html#fs_fs_access_path_mode_callback"" rel=""noreferrer""><code>fs.access(path, fs.F_OK, ...)</code> / <code>fs.accessSync(path, fs.F_OK)</code></a>. And at least as of October 2016, the <a href=""https://nodejs.org/api/fs.html#fs_fs_stat_path_callback"" rel=""noreferrer""><code>fs.stat</code> documentation</a> recommends using <code>fs.access</code> to do existence checks (<em>""To check if a file exists without manipulating it afterwards, <code>fs.access()</code> is recommended.""</em>). But note that the access not being available is considered an <em>error</em>, so this would probably be best if you're expecting the file to be accessible:</p>

<pre><code>var fs = require('fs');

try {
    fs.accessSync(path, fs.F_OK);
    // Do something
} catch (e) {
    // It isn't accessible
}

// Or

fs.access(path, fs.F_OK, function(err) {
    if (!err) {
        // Do something
    } else {
        // It isn't accessible
    }
});
</code></pre>

<h3>Update December 2016</h3>

<p>You can use <a href=""http://nodejs.org/api/fs.html#fs_fs_existssync_path"" rel=""noreferrer""><code>fs.existsSync()</code></a>:</p>

<pre><code>if (fs.existsSync(path)) {
    // Do something
}
</code></pre>

<p>It was deprecated for several years, but no longer is. From the docs:</p>

<blockquote>
  <p>Note that <code>fs.exists()</code> is deprecated, but <code>fs.existsSync()</code> is not. (The
  callback parameter to <code>fs.exists()</code> accepts parameters that are
  inconsistent with other Node.js callbacks. <code>fs.existsSync()</code> does not
  use a callback.)</p>
</blockquote>
",157247,,157247,,7/5/2019 12:07,7/5/2019 12:07,,,,30,,,,CC BY-SA 4.0
979995,2,,979975,6/11/2009 8:37,,2589,,"<p>JavaScript <em>itself</em> has nothing built in for handling query string parameters.</p>
<p>Code running in a (<a href=""https://caniuse.com/url"" rel=""noreferrer"">modern</a>) browser  can use the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams"" rel=""noreferrer""><code>URL</code> object</a> (a <a href=""https://developer.mozilla.org/en-US/docs/Web/API"" rel=""noreferrer"">Web API</a>). <code>URL</code> is also implemented by <a href=""https://nodejs.org/api/url.html#the-whatwg-url-api"" rel=""noreferrer"">Node.js</a>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// You can get url_string from window.location.href if you want to work with
// the URL of the current page
var url_string = ""http://www.example.com/t.html?a=1&amp;b=3&amp;c=m2-m3-m4-m5""; 
var url = new URL(url_string);
var c = url.searchParams.get(""c"");
console.log(c);</code></pre>
</div>
</div>
</p>
<hr />
<p>For older browsers (including Internet Explorer), you can use <a href=""https://github.com/webcomponents/URL"" rel=""noreferrer"">this polyfill</a>.</p>
<p>You could also use one for <a href=""https://github.com/ungap/url-search-params"" rel=""noreferrer"">URLSearchParams</a> and extract the query string to pass to it with <code>window.location.search.substring(1)</code>.</p>
<hr />
<p>You could also use the code from the original version of this answer that predates <code>URL</code>. The above polyfill is robust and well tested and I strongly recommend it over this though.</p>
<p>You could access <code>location.search</code>, which would give you from the <code>?</code> character on to the end of the URL or the start of the fragment identifier (#foo), whichever comes first.</p>
<p>Then you can parse it with this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function parse_query_string(query) {
  var vars = query.split(""&amp;"");
  var query_string = {};
  for (var i = 0; i &lt; vars.length; i++) {
    var pair = vars[i].split(""="");
    var key = decodeURIComponent(pair.shift());
    var value = decodeURIComponent(pair.join(""=""));
    // If first entry with this name
    if (typeof query_string[key] === ""undefined"") {
      query_string[key] = value;
      // If second entry with this name
    } else if (typeof query_string[key] === ""string"") {
      var arr = [query_string[key], value];
      query_string[key] = arr;
      // If third or later entry with this name
    } else {
      query_string[key].push(value);
    }
  }
  return query_string;
}

var query_string = ""a=1&amp;b=3&amp;c=m2-m3-m4-m5"";
var parsed_qs = parse_query_string(query_string);
console.log(parsed_qs.c);</code></pre>
</div>
</div>
</p>
<p>You can get the query string from the URL of the current page with:</p>
<pre><code>var query = window.location.search.substring(1);
var qs = parse_query_string(query);
</code></pre>
",19068,,19068,,8/5/2022 8:02,8/5/2022 8:02,,,,3,,,,CC BY-SA 4.0
16162000,2,,1260748,4/23/2013 5:57,,2587,,"<p>Since <a href=""https://github.com/git/git/blob/v1.8.3-rc0/Documentation/RelNotes/1.8.3.txt#L135-L137"" rel=""noreferrer"">git1.8.3 (April 22d, 2013)</a>:</p>
<blockquote>
<p>There was no Porcelain way to say &quot;I no longer am interested in this submodule&quot;, once you express your interest in a submodule with &quot;<code>git submodule init</code>&quot;.<br />
&quot;<strong><code>git submodule deinit</code></strong>&quot; is the way to do so.</p>
</blockquote>
<p>The deletion process also uses <code>git rm</code> (since git1.8.5 October 2013).</p>
<h2>Summary</h2>
<p>The 3-steps removal process would then be:</p>
<pre><code>0. mv a/submodule a/submodule_tmp

1. git submodule deinit -f -- a/submodule    
2. rm -rf .git/modules/a/submodule
3. git rm -f a/submodule
# Note: a/submodule (no trailing slash)

# or, if you want to leave it in your working tree and have done step 0
3.   git rm --cached a/submodule
3bis mv a/submodule_tmp a/submodule
</code></pre>
<h2>Explanation</h2>
<p><code>rm -rf</code>: This is mentioned in <a href=""https://stackoverflow.com/users/2753241/daniel-schroeder"">Daniel Schroeder</a>'s <a href=""https://stackoverflow.com/a/26505847/6309"">answer</a>, and summarized by <a href=""https://stackoverflow.com/users/246776/eonil"">Eonil</a> in <a href=""https://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule/16162000?noredirect=1#comment41729982_16162000"">the comments</a>:</p>
<blockquote>
<p>This leaves <code>.git/modules/&lt;path-to-submodule&gt;/</code> unchanged.<br />
So if you once delete a submodule with this method and re-add them again, it will not be possible because repository already been corrupted.</p>
</blockquote>
<hr />
<p><code>git rm</code>: See <a href=""https://github.com/git/git/commit/95c16418f0375e2fc325f32c3d7578fba9cfd7ef"" rel=""noreferrer"">commit 95c16418</a>:</p>
<blockquote>
<p>Currently using &quot;<code>git rm</code>&quot; on a submodule removes the submodule's work tree from that of the superproject and the gitlink from the index.<br />
But the submodule's section in <code>.gitmodules</code> is left untouched, which is a leftover of the now removed submodule and might irritate users (as opposed to the setting in <code>.git/config</code>, this must stay as a reminder that the user showed interest in this submodule so it will be repopulated later when an older commit is checked out).</p>
</blockquote>
<blockquote>
<p>Let &quot;<code>git rm</code>&quot; help the user by not only removing the submodule from the work tree but by also removing the &quot;<code>submodule.&lt;submodule name&gt;</code>&quot; section from the <code>.gitmodules</code> file and stage both.</p>
</blockquote>
<hr />
<p><code>git submodule deinit</code>: It stems from <a href=""http://git.661346.n2.nabble.com/PATCH-v3-submodule-add-deinit-command-td7576946.html"" rel=""noreferrer"">this patch</a>:</p>
<blockquote>
<p>With &quot;<code>git submodule init</code>&quot; the user is able to tell git they care about one or more submodules and wants to have it populated on the next call to &quot;<code>git submodule update</code>&quot;.<br />
But currently there is no easy way they can tell git they do not care about a submodule anymore and wants to get rid of the local work tree (unless the user knows a lot about submodule internals and removes the &quot;<code>submodule.$name.url</code>&quot; setting from <code>.git/config</code> together with the work tree himself).</p>
</blockquote>
<blockquote>
<p>Help those users by providing a '<strong><code>deinit</code></strong>' command.<br />
This <strong>removes the whole <code>submodule.&lt;name&gt;</code> section from <code>.git/config</code> either for the given
submodule(s)</strong> (or for all those which have been initialized if '<code>.</code>' is given).<br />
Fail if the current work tree contains modifications unless forced.<br />
Complain when for a submodule given on the command line the url setting can't be found in <code>.git/config</code>, but nonetheless don't fail.</p>
</blockquote>
<p>This takes care if the (de)initialization steps (<code>.git/config</code> and <code>.git/modules/xxx</code>)</p>
<p>Since git1.8.5, the <code>git rm</code> takes <em>also</em> care of the:</p>
<ul>
<li>'<code>add</code>' step which records the url of a submodule in the <code>.gitmodules</code> file: it is need to removed for you.</li>
<li>the submodule <strong><a href=""https://stackoverflow.com/questions/1992018/git-submodule-update-needed-only-initially/2227598#2227598"">special entry</a></strong> (as illustrated by <a href=""https://stackoverflow.com/q/16574625/6309"">this question</a>): the git rm removes it from the index:<br />
<code>git rm --cached path_to_submodule</code> (no trailing slash)<br />
That will remove that directory stored in the index with a special mode &quot;160000&quot;, marking it as a submodule root directory.</li>
</ul>
<p>If you forget that last step, and try to add what was a submodule as a regular directory, you would get error message like:</p>
<pre><code>git add mysubmodule/file.txt 
Path 'mysubmodule/file.txt' is in submodule 'mysubmodule'
</code></pre>
<hr />
<p>Note: since Git 2.17 (Q2 2018), git submodule deinit is no longer a shell script.<br />
It is a call to a C function.</p>
<p>See <a href=""https://github.com/git/git/commit/2e612731b55f1a83fb5b7f4ecb9391f0cba63cb2"" rel=""noreferrer"">commit 2e61273</a>, <a href=""https://github.com/git/git/commit/13424764db3273091d136bd470cf14852255c98c"" rel=""noreferrer"">commit 1342476</a> (14 Jan 2018) by <a href=""https://github.com/pratham-pc"" rel=""noreferrer"">Prathamesh Chavan (<code>pratham-pc</code>)</a>.<br />
<sup>(Merged by <a href=""https://github.com/gitster"" rel=""noreferrer"">Junio C Hamano -- <code>gitster</code> --</a> in <a href=""https://github.com/git/git/commit/ead8dbe2e14ee9a2a18ccd0ad7bca806e1be0d54"" rel=""noreferrer"">commit ead8dbe</a>, 13 Feb 2018)</sup></p>
<pre><code>git ${wt_prefix:+-C &quot;$wt_prefix&quot;} submodule--helper deinit \
  ${GIT_QUIET:+--quiet} \
  ${prefix:+--prefix &quot;$prefix&quot;} \
  ${force:+--force} \
  ${deinit_all:+--all} &quot;$@&quot;
</code></pre>
",6309,,2146491,,4/15/2021 13:59,4/15/2021 13:59,,,,44,,,,CC BY-SA 4.0
14419556,2,,14415881,1/19/2013 22:27,,2555,,"<p>Sorting solutions have been proposed, but <strong>sorting is a little too much</strong>: We don't need order; <strong>we just need equality groups</strong>.</p>

<p>So <strong>hashing</strong> would be enough (and faster).</p>

<ol>
<li>For each color of socks, <strong>form a pile</strong>. Iterate over all socks in your input basket <strong>and distribute them onto the color piles</strong>.</li>
<li>Iterate over each pile and <strong>distribute it by some other metric</strong> (e.g. pattern) into the second set of piles</li>
<li><strong>Recursively apply this scheme</strong> until you have distributed all socks onto <strong>very small piles that you can visually process immediately</strong></li>
</ol>

<p>This kind of recursive hash partitioning is actually being done by <a href=""http://en.wikipedia.org/wiki/Microsoft_SQL_Server"" rel=""noreferrer"">SQL Server</a> when it needs to hash join or hash aggregate over huge data sets. It distributes its build input stream into many partitions which are independent. This scheme scales to arbitrary amounts of data and multiple CPUs linearly.</p>

<p>You don't need recursive partitioning if you can find a distribution key (hash key) that <strong>provides enough buckets</strong> that each bucket is small enough to be processed very quickly. Unfortunately, I don't think socks have such a property.</p>

<p>If each sock had an integer called ""PairID"" one could easily distribute them into 10 buckets according to <code>PairID % 10</code> (the last digit).</p>

<p>The best real-world partitioning I can think of is creating a <strong>rectangle of piles</strong>: one dimension is color, the other is the pattern. Why a rectangle? Because we need O(1) random-access to piles. (A 3D <a href=""http://en.wikipedia.org/wiki/Cuboid"" rel=""noreferrer"">cuboid</a> would also work, but that is not very practical.)</p>

<hr/>

<p>Update:</p>

<p>What about <strong>parallelism</strong>? Can multiple humans match the socks faster?</p>

<ol>
<li>The simplest parallelization strategy is to have multiple workers take from the input basket and put the socks onto the piles. This only scales up so much - imagine 100 people fighting over 10 piles. <strong>The synchronization costs</strong> (manifesting themselves as hand-collisions and human communication) <strong>destroy efficiency and speed-up</strong> (see the <a href=""http://www.perfdynamics.com/Manifesto/USLscalability.html"" rel=""noreferrer"">Universal Scalability Law</a>!). Is this prone to <strong>deadlocks</strong>? No, because each worker only needs to access one pile at a time. With just one ""lock"" there cannot be a deadlock. <strong>Livelocks</strong> might be possible depending on how the humans coordinate access to piles. They might just use <a href=""http://en.wikipedia.org/wiki/Exponential_backoff"" rel=""noreferrer"">random backoff</a> like network cards do that on a physical level to determine what card can exclusively access the network wire. If it works for <a href=""http://en.wikipedia.org/wiki/Network_interface_controller"" rel=""noreferrer"">NICs</a>, it should work for humans as well.</li>
<li>It scales nearly indefinitely if <strong>each worker has its own set of piles</strong>. Workers can then take big chunks of socks from the input basket (very little contention as they are doing it rarely) and they do not need to synchronise when distributing the socks at all (because they have thread-local piles). At the end, all workers need to union their pile-sets. I believe that can be done in O(log (worker count * piles per worker)) if the workers form an <strong>aggregation tree</strong>.</li>
</ol>

<p>What about the <a href=""http://en.wikipedia.org/wiki/Element_distinctness_problem"" rel=""noreferrer"">element distinctness problem</a>? As the article states, the element distinctness problem can be solved in <code>O(N)</code>. This is the same for the socks problem (also <code>O(N)</code>, if you need only one distribution step (I proposed multiple steps only because humans are bad at calculations - one step is enough if you distribute on <code>md5(color, length, pattern, ...)</code>, i.e. a <strong>perfect hash</strong> of all attributes)).</p>

<p>Clearly, one cannot go faster than <code>O(N)</code>, so we have reached the <strong>optimal lower bound</strong>.</p>

<p>Although the outputs are not exactly the same (in one case, just a boolean. In the other case, the pairs of socks), the asymptotic complexities are the same.</p>
",122718,,122718,,12/24/2017 17:50,12/24/2017 17:50,,,,36,,,12/28/2013 9:57,CC BY-SA 3.0
9899701,2,,9899372,3/28/2012 0:46,,2535,,"<p>The simplest thing to do in the absence of a framework that does all the cross-browser compatibility for you is to just put a call to your code at the end of the body.  This is faster to execute than an <code>onload</code> handler because this waits only for the DOM to be ready, not for all images to load.  And, this works in every browser.</p>

<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
Your HTML here

&lt;script&gt;
// self executing function here
(function() {
   // your page initialization code here
   // the DOM will be available here

})();
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<hr>

<p>For modern browsers (anything from IE9 and newer and any version of Chrome, Firefox or Safari), if you want to be able to implement a jQuery like <code>$(document).ready()</code> method that you can call from anywhere (without worrying about where the calling script is positioned), you can just use something like this:</p>

<pre><code>function docReady(fn) {
    // see if DOM is already available
    if (document.readyState === ""complete"" || document.readyState === ""interactive"") {
        // call on next available tick
        setTimeout(fn, 1);
    } else {
        document.addEventListener(""DOMContentLoaded"", fn);
    }
}    
</code></pre>

<p>Usage:</p>

<pre><code>docReady(function() {
    // DOM is loaded and ready for manipulation here
});
</code></pre>

<hr>

<p>If you need full cross browser compatibility (including old versions of IE) and you don't want to wait for <code>window.onload</code>, then you probably should go look at how a framework like jQuery implements its <code>$(document).ready()</code> method.  It's fairly involved depending upon the capabilities of the browser.</p>

<p>To give you a little idea what jQuery does (which will work wherever the script tag is placed).</p>

<p>If supported, it tries the standard:</p>

<pre><code>document.addEventListener('DOMContentLoaded', fn, false);
</code></pre>

<p>with a fallback to:</p>

<pre><code>window.addEventListener('load', fn, false )
</code></pre>

<p>or for older versions of IE, it uses:</p>

<pre><code>document.attachEvent(""onreadystatechange"", fn);
</code></pre>

<p>with a fallback to:</p>

<pre><code>window.attachEvent(""onload"", fn);
</code></pre>

<p>And, there are some work-arounds in the IE code path that I don't quite follow, but it looks like it has something to do with frames.</p>

<hr>

<p>Here is a full substitute for jQuery's <code>.ready()</code> written in plain javascript:</p>

<pre><code>(function(funcName, baseObj) {
    // The public function name defaults to window.docReady
    // but you can pass in your own object and own function name and those will be used
    // if you want to put them in a different namespace
    funcName = funcName || ""docReady"";
    baseObj = baseObj || window;
    var readyList = [];
    var readyFired = false;
    var readyEventHandlersInstalled = false;

    // call this when the document is ready
    // this function protects itself against being called more than once
    function ready() {
        if (!readyFired) {
            // this must be set to true before we start calling callbacks
            readyFired = true;
            for (var i = 0; i &lt; readyList.length; i++) {
                // if a callback here happens to add new ready handlers,
                // the docReady() function will see that it already fired
                // and will schedule the callback to run right after
                // this event loop finishes so all handlers will still execute
                // in order and no new ones will be added to the readyList
                // while we are processing the list
                readyList[i].fn.call(window, readyList[i].ctx);
            }
            // allow any closures held by these functions to free
            readyList = [];
        }
    }

    function readyStateChange() {
        if ( document.readyState === ""complete"" ) {
            ready();
        }
    }

    // This is the one public interface
    // docReady(fn, context);
    // the context argument is optional - if present, it will be passed
    // as an argument to the callback
    baseObj[funcName] = function(callback, context) {
        if (typeof callback !== ""function"") {
            throw new TypeError(""callback for docReady(fn) must be a function"");
        }
        // if ready has already fired, then just schedule the callback
        // to fire asynchronously, but right away
        if (readyFired) {
            setTimeout(function() {callback(context);}, 1);
            return;
        } else {
            // add the function and context to the list
            readyList.push({fn: callback, ctx: context});
        }
        // if document already ready to go, schedule the ready function to run
        if (document.readyState === ""complete"") {
            setTimeout(ready, 1);
        } else if (!readyEventHandlersInstalled) {
            // otherwise if we don't have event handlers installed, install them
            if (document.addEventListener) {
                // first choice is DOMContentLoaded event
                document.addEventListener(""DOMContentLoaded"", ready, false);
                // backup is window load event
                window.addEventListener(""load"", ready, false);
            } else {
                // must be IE
                document.attachEvent(""onreadystatechange"", readyStateChange);
                window.attachEvent(""onload"", ready);
            }
            readyEventHandlersInstalled = true;
        }
    }
})(""docReady"", window);
</code></pre>

<p>The latest version of the code is shared publicly on GitHub at <a href=""https://github.com/jfriend00/docReady"" rel=""noreferrer"">https://github.com/jfriend00/docReady</a></p>

<p>Usage:</p>

<pre><code>// pass a function reference
docReady(fn);

// use an anonymous function
docReady(function() {
    // code here
});

// pass a function reference and a context
// the context will be passed to the function as the first argument
docReady(fn, context);

// use an anonymous function with a context
docReady(function(context) {
    // code here that can use the context argument that was passed to docReady
}, ctx);
</code></pre>

<hr>

<p>This has been tested in:</p>

<pre class=""lang-none prettyprint-override""><code>IE6 and up
Firefox 3.6 and up
Chrome 14 and up
Safari 5.1 and up
Opera 11.6 and up
Multiple iOS devices
Multiple Android devices
</code></pre>

<p>Working implementation and test bed: <a href=""http://jsfiddle.net/jfriend00/YfD3C/"" rel=""noreferrer"">http://jsfiddle.net/jfriend00/YfD3C/</a></p>

<hr>

<p>Here's a summary of how it works:</p>

<ol>
<li>Create an <a href=""http://benalman.com/news/2010/11/immediately-invoked-function-expression/"" rel=""noreferrer"">IIFE</a> (immediately invoked function expression) so we can have non-public state variables.</li>
<li>Declare a public function <code>docReady(fn, context)</code></li>
<li>When <code>docReady(fn, context)</code> is called, check if the ready handler has already fired.  If so, just schedule the newly added callback to fire right after this thread of JS finishes with <code>setTimeout(fn, 1)</code>.</li>
<li>If the ready handler has not already fired, then add this new callback to the list of callbacks to be called later.</li>
<li>Check if the document is already ready.  If so, execute all ready handlers.</li>
<li>If we haven't installed event listeners yet to know when the document becomes ready, then install them now.</li>
<li>If <code>document.addEventListener</code> exists, then install event handlers using <code>.addEventListener()</code> for both <code>""DOMContentLoaded""</code> and <code>""load""</code> events.  The ""load"" is a backup event for safety and should not be needed.</li>
<li>If <code>document.addEventListener</code> doesn't exist, then install event handlers using <code>.attachEvent()</code> for <code>""onreadystatechange""</code> and <code>""onload""</code> events.</li>
<li>In the <code>onreadystatechange</code> event, check to see if the <code>document.readyState === ""complete""</code> and if so, call a function to fire all the ready handlers.</li>
<li>In all the other event handlers, call a function to fire all the ready handlers.</li>
<li>In the function to call all the ready handlers, check a state variable to see if we've already fired.  If we have, do nothing.  If we haven't yet been called, then loop through the array of ready functions and call each one in the order they were added.  Set a flag to indicate these have all been called so they are never executed more than once.</li>
<li>Clear the function array so any closures they might be using can be freed.</li>
</ol>

<p>Handlers registered with <code>docReady()</code> are guaranteed to be fired in the order they were registered.</p>

<p>If you call <code>docReady(fn)</code> after the document is already ready, the callback will be scheduled to execute as soon as the current thread of execution completes using <code>setTimeout(fn, 1)</code>.  This allows the calling code to always assume they are async callbacks that will be called later, even if later is as soon as the current thread of JS finishes and it preserves calling order.</p>
",816620,,5921548,,9/11/2019 21:24,9/11/2019 21:24,,,,3,,,,CC BY-SA 4.0
285809,2,,285793,11/12/2008 23:30,,2516,,"<p>The docs for <a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Serializable.html"" rel=""noreferrer""><code>java.io.Serializable</code></a> are probably about as good an explanation as you'll get:</p>
<blockquote>
<p>The serialization runtime associates with each serializable class a version number, called a <code>serialVersionUID</code>, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. If the receiver has loaded a class for the object that has a different <code>serialVersionUID</code> than that of the corresponding sender's class, then deserialization will result in an
<a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/InvalidClassException.html"" rel=""noreferrer""><code>InvalidClassException</code></a>. A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that must be static, final, and of type <code>long</code>:</p>
</blockquote>
<blockquote>
<pre><code>ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;
</code></pre>
</blockquote>
<blockquote>
<p>If a serializable class does not explicitly declare a <code>serialVersionUID</code>, then the serialization runtime will calculate a default <code>serialVersionUID</code> value for that class based on various aspects of the class, as described in the Java(TM) Object Serialization Specification. However, it is <em>strongly recommended</em> that all serializable classes explicitly declare <code>serialVersionUID</code> values, since the default <code>serialVersionUID</code> computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected <code>InvalidClassExceptions</code> during deserialization. Therefore, to guarantee a consistent <code>serialVersionUID</code> value across different java compiler implementations, a serializable class must declare an explicit <code>serialVersionUID</code> value. It is also strongly advised that explicit <code>serialVersionUID</code> declarations use the private modifier where possible, since such declarations apply only to the immediately declaring class ‚Äî <code>serialVersionUID</code> fields are not useful as inherited members.</p>
</blockquote>
",22656,Jon Skeet,131160,,1/14/2021 19:54,1/14/2021 19:54,,,,20,,,,CC BY-SA 4.0
618596,2,,618535,3/6/2009 11:56,,2507,,"<p><code>float</code> and <code>double</code> are <a href=""http://csharpindepth.com/Articles/General/FloatingPoint.aspx"" rel=""noreferrer"">floating <em>binary</em> point types</a> (<code>float</code> is 32-bit; <code>double</code> is 64-bit). In other words, they represent a number like this:</p>
<pre><code>10001.10010110011
</code></pre>
<p>The binary number and the location of the binary point are both encoded within the value.</p>
<p><code>decimal</code> is a <a href=""http://csharpindepth.com/Articles/General/Decimal.aspx"" rel=""noreferrer"">floating <em>decimal</em> point type</a>. In other words, they represent a number like this:</p>
<pre><code>12345.65789
</code></pre>
<p>Again, the number and the location of the <em>decimal</em> point are both encoded within the value ‚Äì that's what makes <code>decimal</code> still a floating point type instead of a fixed point type.</p>
<p>The important thing to note is that humans are used to representing non-integers in a decimal form, and expect exact results in decimal representations; not all decimal numbers are exactly representable in binary floating point ‚Äì 0.1, for example ‚Äì so if you use a binary floating point value you'll actually get an approximation to 0.1. You'll still get approximations when using a floating decimal point as well ‚Äì the result of dividing 1 by 3 can't be exactly represented, for example.</p>
<p>As for what to use when:</p>
<ul>
<li><p>For values which are &quot;naturally exact decimals&quot; it's good to use <code>decimal</code>. This is usually suitable for any concepts invented by humans: financial values are the most obvious example, but there are others too. Consider the score given to divers or ice skaters, for example.</p>
</li>
<li><p>For values which are more artefacts of nature which can't really be measured <em>exactly</em> anyway, <code>float</code>/<code>double</code> are more appropriate. For example, scientific data would usually be represented in this form. Here, the original values won't be &quot;decimally accurate&quot; to start with, so it's not important for the expected results to maintain the &quot;decimal accuracy&quot;. Floating binary point types are much faster to work with than decimals.</p>
</li>
</ul>
",22656,Jon Skeet,22656,,7/16/2022 6:56,7/16/2022 6:56,,,,13,,,,CC BY-SA 4.0
3430395,2,,3430372,8/7/2010 12:24,,2490,,"<p>The special variable <a href=""https://stackoverflow.com/questions/9271464/what-does-the-file-variable-mean-do""><code>__file__</code></a> contains the path to the current file. From that we can get the directory using either <a href=""https://docs.python.org/3/library/pathlib.html"" rel=""noreferrer""><code>pathlib</code></a> or the <a href=""https://docs.python.org/3.8/library/os.path.html"" rel=""noreferrer""><code>os.path</code></a> module.</p>
<h2>Python 3</h2>
<p>For the directory of the script being run:</p>
<pre><code>import pathlib
pathlib.Path(__file__).parent.resolve()
</code></pre>
<p>For the current working directory:</p>
<pre><code>import pathlib
pathlib.Path().resolve()
</code></pre>
<h2>Python 2 and 3</h2>
<p>For the directory of the script being run:</p>
<pre><code>import os
os.path.dirname(os.path.abspath(__file__))
</code></pre>
<p>If you mean the current working directory:</p>
<pre><code>import os
os.path.abspath(os.getcwd())
</code></pre>
<p>Note that before and after <code>file</code> is two underscores, not just one.</p>
<p>Also note that if you are running interactively or have loaded code from something other than a file (eg: a database or online resource), <code>__file__</code> may not be set since there is no notion of &quot;current file&quot;. The above answer assumes the most common scenario of running a python script that is in a file.</p>
<h2>References</h2>
<ol>
<li><a href=""https://docs.python.org/3/library/pathlib.html"" rel=""noreferrer"">pathlib</a> in the python documentation.</li>
<li><a href=""https://docs.python.org/2.7/library/os.path.html"" rel=""noreferrer"">os.path - Python 2.7</a>, <a href=""https://docs.python.org/3/library/os.path.html"" rel=""noreferrer"">os.path - Python 3</a></li>
<li><a href=""https://docs.python.org/2.7/library/os.html#os.getcwd"" rel=""noreferrer"">os.getcwd - Python 2.7</a>, <a href=""https://docs.python.org/3/library/os.html#os.getcwd"" rel=""noreferrer"">os.getcwd - Python 3</a></li>
<li><a href=""https://stackoverflow.com/questions/9271464/what-does-the-file-variable-mean-do"">what does the __file__ variable mean/do?</a></li>
</ol>
",7432,,365102,,6/5/2022 19:47,6/5/2022 19:47,,,,27,,,,CC BY-SA 4.0
3279550,2,,3279543,7/19/2010 8:43,,2476,,"<h1>Overview</h1>
<h3>Why do we need the copy-and-swap idiom?</h3>
<p>Any class that manages a resource (a <em>wrapper</em>, like a smart pointer) needs to implement <a href=""https://stackoverflow.com/questions/4172722/what-is-the-rule-of-three"">The Big Three</a>. While the goals and implementation of the copy-constructor and destructor are straightforward, the copy-assignment operator is arguably the most nuanced and difficult. How should it be done? What pitfalls need to be avoided?</p>
<p>The <em>copy-and-swap idiom</em> is the solution, and elegantly assists the assignment operator in achieving two things: avoiding <a href=""http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"" rel=""noreferrer"">code duplication</a>, and providing a <a href=""http://en.wikipedia.org/wiki/Exception_guarantees"" rel=""noreferrer"">strong exception guarantee</a>.</p>
<h3>How does it work?</h3>
<p><a href=""https://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom/3279616#3279616"">Conceptually</a>, it works by using the copy-constructor's functionality to create a local copy of the data, then takes the copied data with a <code>swap</code> function, swapping the old data with the new data. The temporary copy then destructs, taking the old data with it. We are left with a copy of the new data.</p>
<p>In order to use the copy-and-swap idiom, we need three things: a working copy-constructor, a working destructor (both are the basis of any wrapper, so should be complete anyway), and a <code>swap</code> function.</p>
<p>A swap function is a <em>non-throwing</em> function that swaps two objects of a class, member for member. We might be tempted to use <code>std::swap</code> instead of providing our own, but this would be impossible; <code>std::swap</code> uses the copy-constructor and copy-assignment operator within its implementation, and we'd ultimately be trying to define the assignment operator in terms of itself!</p>
<p>(Not only that, but unqualified calls to <code>swap</code> will use our custom swap operator, skipping over the unnecessary construction and destruction of our class that <code>std::swap</code> would entail.)</p>
<hr />
<h1>An in-depth explanation</h1>
<h3>The goal</h3>
<p>Let's consider a concrete case. We want to manage, in an otherwise useless class, a dynamic array. We start with a working constructor, copy-constructor, and destructor:</p>
<pre><code>#include &lt;algorithm&gt; // std::copy
#include &lt;cstddef&gt; // std::size_t

class dumb_array
{
public:
    // (default) constructor
    dumb_array(std::size_t size = 0)
        : mSize(size),
          mArray(mSize ? new int[mSize]() : nullptr)
    {
    }

    // copy-constructor
    dumb_array(const dumb_array&amp; other)
        : mSize(other.mSize),
          mArray(mSize ? new int[mSize] : nullptr)
    {
        // note that this is non-throwing, because of the data
        // types being used; more attention to detail with regards
        // to exceptions must be given in a more general case, however
        std::copy(other.mArray, other.mArray + mSize, mArray);
    }

    // destructor
    ~dumb_array()
    {
        delete [] mArray;
    }

private:
    std::size_t mSize;
    int* mArray;
};
</code></pre>
<p>This class almost manages the array successfully, but it needs <code>operator=</code> to work correctly.</p>
<h3>A failed solution</h3>
<p>Here's how a naive implementation might look:</p>
<pre><code>// the hard part
dumb_array&amp; operator=(const dumb_array&amp; other)
{
    if (this != &amp;other) // (1)
    {
        // get rid of the old data...
        delete [] mArray; // (2)
        mArray = nullptr; // (2) *(see footnote for rationale)

        // ...and put in the new
        mSize = other.mSize; // (3)
        mArray = mSize ? new int[mSize] : nullptr; // (3)
        std::copy(other.mArray, other.mArray + mSize, mArray); // (3)
    }

    return *this;
}
</code></pre>
<p>And we say we're finished; this now manages an array, without leaks. However, it suffers from three problems, marked sequentially in the code as <code>(n)</code>.</p>
<ol>
<li><p>The first is the self-assignment test.<br />
This check serves two purposes: it's an easy way to prevent us from running needless code on self-assignment, and it protects us from subtle bugs (such as deleting the array only to try and copy it). But in all other cases it merely serves to slow the program down, and act as noise in the code; self-assignment rarely occurs, so most of the time this check is a waste.<br />
It would be better if the operator could work properly without it.</p>
</li>
<li><p>The second is that it only provides a basic exception guarantee. If <code>new int[mSize]</code> fails, <code>*this</code> will have been modified. (Namely, the size is wrong and the data is gone!)<br />
For a strong exception guarantee, it would need to be something akin to:</p>
<pre><code> dumb_array&amp; operator=(const dumb_array&amp; other)
 {
     if (this != &amp;other) // (1)
     {
         // get the new data ready before we replace the old
         std::size_t newSize = other.mSize;
         int* newArray = newSize ? new int[newSize]() : nullptr; // (3)
         std::copy(other.mArray, other.mArray + newSize, newArray); // (3)

         // replace the old data (all are non-throwing)
         delete [] mArray;
         mSize = newSize;
         mArray = newArray;
     }

     return *this;
 }
</code></pre>
</li>
<li><p>The code has expanded! Which leads us to the third problem: code duplication.</p>
</li>
</ol>
<p>Our assignment operator effectively duplicates all the code we've already written elsewhere, and that's a terrible thing.</p>
<p>In our case, the core of it is only two lines (the allocation and the copy), but with more complex resources this code bloat can be quite a hassle. We should strive to never repeat ourselves.</p>
<p>(One might wonder: if this much code is needed to manage one resource correctly, what if my class manages more than one?<br />
While this may seem to be a valid concern, and indeed it requires non-trivial <code>try</code>/<code>catch</code> clauses, this is a non-issue.<br />
That's because a class should manage <a href=""http://en.wikipedia.org/wiki/Single_responsibility_principle"" rel=""noreferrer""><em>one resource only</em></a>!)</p>
<h3>A successful solution</h3>
<p>As mentioned, the copy-and-swap idiom will fix all these issues. But right now, we have all the requirements except one: a <code>swap</code> function. While The Rule of Three successfully entails the existence of our copy-constructor, assignment operator, and destructor, it should really be called &quot;The Big Three and A Half&quot;: any time your class manages a resource it also makes sense to provide a <code>swap</code> function.</p>
<p>We need to add swap functionality to our class, and we do that as follows‚Ä†:</p>
<pre><code>class dumb_array
{
public:
    // ...

    friend void swap(dumb_array&amp; first, dumb_array&amp; second) // nothrow
    {
        // enable ADL (not necessary in our case, but good practice)
        using std::swap;

        // by swapping the members of two objects,
        // the two objects are effectively swapped
        swap(first.mSize, second.mSize);
        swap(first.mArray, second.mArray);
    }

    // ...
};
</code></pre>
<p>(<a href=""https://stackoverflow.com/questions/5695548/public-friend-swap-member-function"">Here</a> is the explanation why <code>public friend swap</code>.) Now not only can we swap our <code>dumb_array</code>'s, but swaps in general can be more efficient; it merely swaps pointers and sizes, rather than allocating and copying entire arrays. Aside from this bonus in functionality and efficiency, we are now ready to implement the copy-and-swap idiom.</p>
<p>Without further ado, our assignment operator is:</p>
<pre><code>dumb_array&amp; operator=(dumb_array other) // (1)
{
    swap(*this, other); // (2)

    return *this;
}
</code></pre>
<p>And that's it! With one fell swoop, all three problems are elegantly tackled at once.</p>
<h3>Why does it work?</h3>
<p>We first notice an important choice: the parameter argument is taken <em>by-value</em>. While one could just as easily do the following (and indeed, many naive implementations of the idiom do):</p>
<pre><code>dumb_array&amp; operator=(const dumb_array&amp; other)
{
    dumb_array temp(other);
    swap(*this, temp);

    return *this;
}
</code></pre>
<p>We lose an <a href=""https://web.archive.org/web/20140113221447/http://cpp-next.com/archive/2009/08/want-speed-pass-by-value/"" rel=""noreferrer"">important optimization opportunity</a>. Not only that, but this choice is critical in C++11, which is discussed later. (On a general note, a remarkably useful guideline is as follows: if you're going to make a copy of something in a function, let the compiler do it in the parameter list.‚Ä°)</p>
<p>Either way, this method of obtaining our resource is the key to eliminating code duplication: we get to use the code from the copy-constructor to make the copy, and never need to repeat any bit of it. Now that the copy is made, we are ready to swap.</p>
<p>Observe that upon entering the function that all the new data is already allocated, copied, and ready to be used. This is what gives us a strong exception guarantee for free: we won't even enter the function if construction of the copy fails, and it's therefore not possible to alter the state of <code>*this</code>. (What we did manually before for a strong exception guarantee, the compiler is doing for us now; how kind.)</p>
<p>At this point we are home-free, because <code>swap</code> is non-throwing. We swap our current data with the copied data, safely altering our state, and the old data gets put into the temporary. The old data is then released when the function returns. (Where upon the parameter's scope ends and its destructor is called.)</p>
<p>Because the idiom repeats no code, we cannot introduce bugs within the operator. Note that this means we are rid of the need for a self-assignment check, allowing a single uniform implementation of <code>operator=</code>. (Additionally, we no longer have a performance penalty on non-self-assignments.)</p>
<p>And that is the copy-and-swap idiom.</p>
<h2>What about C++11?</h2>
<p>The next version of C++, C++11, makes one very important change to how we manage resources: the Rule of Three is now <strong>The Rule of Four</strong> (and a half). Why? Because not only do we need to be able to copy-construct our resource, <a href=""https://stackoverflow.com/questions/3106110/can-someone-please-explain-move-semantics-to-me"">we need to move-construct it as well</a>.</p>
<p>Luckily for us, this is easy:</p>
<pre><code>class dumb_array
{
public:
    // ...

    // move constructor
    dumb_array(dumb_array&amp;&amp; other) noexcept ‚Ä†‚Ä†
        : dumb_array() // initialize via default constructor, C++11 only
    {
        swap(*this, other);
    }

    // ...
};
</code></pre>
<p>What's going on here? Recall the goal of move-construction: to take the resources from another instance of the class, leaving it in a state guaranteed to be assignable and destructible.</p>
<p>So what we've done is simple: initialize via the default constructor (a C++11 feature), then swap with <code>other</code>; we know a default constructed instance of our class can safely be assigned and destructed, so we know <code>other</code> will be able to do the same, after swapping.</p>
<p>(Note that some compilers do not support constructor delegation; in this case, we have to manually default construct the class. This is an unfortunate but luckily trivial task.)</p>
<h3>Why does that work?</h3>
<p>That is the only change we need to make to our class, so why does it work? Remember the ever-important decision we made to make the parameter a value and not a reference:</p>
<pre><code>dumb_array&amp; operator=(dumb_array other); // (1)
</code></pre>
<p>Now, if <code>other</code> is being initialized with an rvalue, <em>it will be move-constructed</em>. Perfect. In the same way C++03 let us re-use our copy-constructor functionality by taking the argument by-value, C++11 will <em>automatically</em> pick the move-constructor when appropriate as well. (And, of course, as mentioned in previously linked article, the copying/moving of the value may simply be elided altogether.)</p>
<p>And so concludes the copy-and-swap idiom.</p>
<hr />
<h3>Footnotes</h3>
<p>*Why do we set <code>mArray</code> to null? Because if any further code in the operator throws, the destructor of <code>dumb_array</code> might be called; and if that happens without setting it to null, we attempt to delete memory that's already been deleted! We avoid this by setting it to null, as deleting null is a no-operation.</p>
<p>‚Ä†There are other claims that we should specialize <code>std::swap</code> for our type, provide an in-class <code>swap</code> along-side a free-function <code>swap</code>, etc. But this is all unnecessary: any proper use of <code>swap</code> will be through an unqualified call, and our function will be found through <a href=""http://en.wikipedia.org/wiki/Argument-dependent_name_lookup"" rel=""noreferrer"">ADL</a>. One function will do.</p>
<p>‚Ä°The reason is simple: once you have the resource to yourself, you may swap and/or move it (C++11) anywhere it needs to be. And by making the copy in the parameter list, you maximize optimization.</p>
<p>‚Ä†‚Ä†The move constructor should generally be <code>noexcept</code>, otherwise some code (e.g. <code>std::vector</code> resizing logic) will use the copy constructor even when a move would make sense. Of course, only mark it noexcept if the code inside doesn't throw exceptions.</p>
",87234,,10996546,,4/24/2021 9:04,4/24/2021 9:04,,,,68,,,,CC BY-SA 4.0
3480785,2,,3480771,8/13/2010 21:28,,2324,,"<p>Like this:</p>
<pre><code>if (str.indexOf(&quot;Yes&quot;) &gt;= 0)
</code></pre>
<p>...or you can use the tilde operator:</p>
<pre><code>if (~str.indexOf(&quot;Yes&quot;))
</code></pre>
<p>This works because <code>indexOf()</code> returns <code>-1</code> if the string wasn't found at all.</p>
<p>Note that this is case-sensitive.<br />
If you want a case-insensitive search, you can write</p>
<pre><code>if (str.toLowerCase().indexOf(&quot;yes&quot;) &gt;= 0)
</code></pre>
<p>Or:</p>
<pre><code>if (/yes/i.test(str))
</code></pre>
<p>The latter is a <strong>regular expression</strong> or <strong>regex</strong>.</p>
<p>Regex breakdown:</p>
<ul>
<li><code>/</code> indicates this is a regex</li>
<li><code>yes</code> means that the regex will find those exact characters in that exact order</li>
<li><code>/</code> ends the regex</li>
<li><code>i</code> sets the regex as case-<em>in</em>sensitive</li>
<li><code>.test(str)</code> determines if the regular expression matches <code>str</code>
To sum it up, it means it will see if it can find the letters <code>y</code>, <code>e</code>, and <code>s</code> in that exact order, case-insensitively, in the variable <code>str</code></li>
</ul>
",34397,,11866686,,3/22/2021 9:07,3/22/2021 9:07,,,,2,,,,CC BY-SA 4.0
3279543,1,3279550,,7/19/2010 8:42,,2286,448102,"<p>What is the copy-and-swap idiom and when should it be used? What problems does it solve? Does it change for C++11?</p>
<p>Related:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/276173/what-are-your-favorite-c-coding-style-idioms/2034447#2034447"">What are your favorite C++ Coding Style idioms:  Copy-swap</a></li>
<li><a href=""https://stackoverflow.com/questions/1734628/copy-constructor-and-operator-overload-in-c-is-a-common-function-possible/1734640#1734640"">Copy constructor and = operator overload in C++: is a common function possible?</a></li>
<li><a href=""https://stackoverflow.com/questions/2143787/what-is-copy-elision-and-how-it-optimizes-copy-and-swap-idiom"">What is copy elision and how it optimizes copy-and-swap idiom</a></li>
<li><a href=""https://stackoverflow.com/questions/255612/c-dynamically-allocating-an-array-of-objects/255744#255744"">C++: dynamically allocating an array of objects?</a></li>
</ul>
",87234,,365102,,7/4/2022 21:56,9/8/2022 17:35,What is the copy-and-swap idiom?,<c++><copy-constructor><assignment-operator><c++-faq><copy-and-swap>,5,6,1961,,,CC BY-SA 4.0
133057,2,,133031,9/25/2008 12:39,,2284,,"<p>SQL Server 2005 onwards:</p>

<pre><code>IF EXISTS(SELECT 1 FROM sys.columns 
          WHERE Name = N'columnName'
          AND Object_ID = Object_ID(N'schemaName.tableName'))
BEGIN
    -- Column Exists
END
</code></pre>

<p>Martin Smith's version is shorter:</p>

<pre><code>IF COL_LENGTH('schemaName.tableName', 'columnName') IS NOT NULL
BEGIN
    -- Column Exists
END
</code></pre>
",16076,Mitch Wheat,16076,,4/12/2017 3:35,4/12/2017 3:35,,,,9,,,,CC BY-SA 3.0
2364223,2,,2364147,3/2/2010 15:23,,2256,,"<pre><code>git checkout master               # first get back to master
git checkout experiment -- app.js # then copy the version of app.js 
                                  # from branch &quot;experiment&quot;
</code></pre>
<p>See also <a href=""https://stackoverflow.com/questions/692246/git-how-to-undo-changes-of-one-file"">git how to undo changes of one file?</a></p>
<hr />
<h3>Update August 2019, Git 2.23</h3>
<p>With the new <a href=""https://stackoverflow.com/a/57066202/6309""><code>git switch</code></a> and <a href=""https://stackoverflow.com/a/57066072/6309""><code>git restore</code></a> commands, that would be:</p>
<pre><code>git switch master
git restore --source experiment -- app.js
</code></pre>
<p>By default, only the working tree is restored.<br />
If you want to update the index as well (meaning restore the file content, <em>and</em> add it to the index in one command):</p>
<pre><code>git restore --source experiment --staged --worktree -- app.js
# shorter:
git restore -s experiment -SW -- app.js
</code></pre>
<hr />
<p>As <a href=""https://stackoverflow.com/users/46058/jakub-narebski"">Jakub Narƒôbski</a> mentions in the comments:</p>
<pre><code>git show experiment:path/to/app.js &gt; path/to/app.js
</code></pre>
<p>works too, except that, as detailed in the SO question &quot;<a href=""https://stackoverflow.com/questions/610208/how-to-retrieve-a-single-file-from-specific-revision-in-git/610315#610315"">How to retrieve a single file from specific revision in Git?</a>&quot;, you need to use the full path from the root directory of the repo.<br />
Hence the path/to/app.js used by Jakub in his example.</p>
<p>As <a href=""https://stackoverflow.com/users/7476/frosty"">Frosty</a> mentions in the comment:</p>
<blockquote>
<p>you will only get the most recent state of app.js</p>
</blockquote>
<p>But, for <code>git checkout</code> or <code>git show</code>, you can actually reference any revision you want, as illustrated in the SO question &quot;<a href=""https://stackoverflow.com/questions/1507300/git-checkout-revision-of-a-file-in-git-gui/1507678#1507678"">git checkout revision of a file in git gui</a>&quot;:</p>
<pre><code>$ git show $REVISION:$FILENAME
$ git checkout $REVISION -- $FILENAME
</code></pre>
<p>would be the same is $FILENAME is a <strong>full path</strong> of a versioned file.</p>
<p><code>$REVISION</code> can be as shown in <a href=""http://www.kernel.org/pub/software/scm/git/docs/git-rev-parse.html"" rel=""noreferrer""><code>git rev-parse</code></a>:</p>
<pre><code>experiment@{yesterday}:app.js # app.js as it was yesterday 
experiment^:app.js            # app.js on the first commit parent
experiment@{2}:app.js         # app.js two commits ago
</code></pre>
<p>and so on.</p>
<p><a href=""https://stackoverflow.com/users/430418/schmijos"">schmijos</a> adds <a href=""https://stackoverflow.com/questions/2364147/how-to-get-just-one-file-from-another-branch/2364223#comment93480592_2364223"">in the comments</a>:</p>
<blockquote>
<p>you also can do this from a stash:</p>
<pre><code>git checkout stash -- app.js
</code></pre>
<p>This is very useful if you're working on two branches and don't want to commit.</p>
</blockquote>
",6309,,947271,,9/22/2020 4:19,9/22/2020 4:19,,,,17,,,,CC BY-SA 4.0
15077491,6,,,2/25/2013 22:11,,2244,,"<p>The <a href=""http://bit.ly/WnbJEQ"" rel=""nofollow"">folks in the PHP chat think I'd make a good mod</a>, so here's my nomination, elect me, maybe.</p>

<h2>Why me?</h2>

<p>I visit StackOverflow daily and am part of the <a href=""http://bit.ly/ZEQZi8"" rel=""nofollow"">cv-ring</a>; pruning the PHP tag of dupes and low quality stuff. I have helped to close more than 3200 questions. Becoming a moderator would allow me to extend my daily routine to handling flags. So I can better support you, the mods and StackOverflow as a whole in <a href=""http://bit.ly/X6TQxO"" rel=""nofollow"">keeping the PHP tag tidy</a>. </p>

<p>I am aware that being a mod would extend my duties beyond the PHP tag. I understand the Theory of Moderation and that being a mod is not about closing as much as possible. As a mod, I will simply keep closevoting as I do now (unless it's a really obvious case) and focus on helping my fellow mods with the flags.</p>

<h3>Trivia</h3>

<p>I have 2500+ answers, am the <a href=""http://bit.ly/Ytk8Z2"" rel=""nofollow"">#88 All Time user</a>, <a href=""http://bit.ly/h29Hz9"" rel=""nofollow"">Top 3 Answerer in the PHP tag</a>, author of the invaluable <a href=""http://bit.ly/lynWFk"" rel=""nofollow"">PHP Operator Reference</a> and own <a href=""http://bit.ly/ZER9pS"" rel=""nofollow"">Electorate, Copy Editor and Marshal</a> badges.</p>
",208809,,208809,,3/8/2013 16:42,3/8/2013 16:42,,,,58,,,2/25/2013 22:11,CC BY-SA 3.0
12860046,2,,12859942,10/12/2012 13:23,,2212,,"<p>The MySQL extension:</p>

<ul>
<li>Is not under active development</li>
<li>Is <strong>officially <a href=""https://wiki.php.net/rfc/mysql_deprecation"" rel=""noreferrer"">deprecated</a></strong> as of PHP 5.5 (released June 2013).</li>
<li>Has been <strong><a href=""https://wiki.php.net/rfc/remove_deprecated_functionality_in_php7#extmysql"" rel=""noreferrer"">removed</a> entirely</strong> as of PHP 7.0 (released December 2015)

<ul>
<li>This means that as of <a href=""https://www.php.net/eol.php"" rel=""noreferrer"">31 Dec 2018</a> it does not exist in any supported version of PHP. If you are using a version of PHP which supports it, you are using a version which doesn't get security problems fixed.</li>
</ul></li>
<li>Lacks an OO interface</li>
<li>Doesn't support:

<ul>
<li>Non-blocking, asynchronous queries</li>
<li><strong><a href=""http://php.net/manual/en/mysqli.quickstart.prepared-statements.php"" rel=""noreferrer"">Prepared statements</a> or parameterized queries</strong></li>
<li>Stored procedures</li>
<li>Multiple Statements</li>
<li>Transactions</li>
<li>The ""new"" password authentication method (on by default in MySQL 5.6; required in 5.7)</li>
<li>Any of the new functionality in MySQL 5.1 or later</li>
</ul></li>
</ul>

<p>Since it is deprecated, using it makes your code less future proof. </p>

<p>Lack of support for prepared statements is particularly important as they provide a clearer, less error-prone method of escaping and quoting external data than manually escaping it with a separate function call.</p>

<p>See <a href=""http://php.net/manual/en/mysqlinfo.api.choosing.php"" rel=""noreferrer""><strong>the comparison of SQL extensions</strong></a>.</p>
",19068,,19068,,7/21/2019 10:15,7/21/2019 10:15,,,,5,,,10/27/2012 15:20,CC BY-SA 4.0
20279485,2,,20279484,11/29/2013 6:13,,2204,,"<h2>What you should know about <code>this</code></h2>
<p><code>this</code> (aka &quot;the context&quot;) is a special keyword inside each function and its value only depends on <em>how</em> the function was called, not how/when/where it was defined. It is not affected by lexical scopes like other variables (except for arrow functions, see below). Here are some examples:</p>
<pre><code>function foo() {
    console.log(this);
}

// normal function call
foo(); // `this` will refer to `window`

// as object method
var obj = {bar: foo};
obj.bar(); // `this` will refer to `obj`

// as constructor function
new foo(); // `this` will refer to an object that inherits from `foo.prototype`
</code></pre>
<p>To learn more about <code>this</code>, have a look at the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"" rel=""noreferrer"">MDN documentation</a>.</p>
<hr />
<h2>How to refer to the correct <code>this</code></h2>
<h3>Use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"" rel=""noreferrer"">arrow functions</a></h3>
<p>ECMAScript 6 introduced <em>arrow functions</em>, which can be thought of as lambda functions. They don't have their own <code>this</code> binding. Instead, <code>this</code> is looked up in scope just like a normal variable. That means you don't have to call <code>.bind</code>. That's not the only special behavior they have, please refer to the MDN documentation for more information.</p>
<pre><code>function MyConstructor(data, transport) {
    this.data = data;
    transport.on('data', () =&gt; alert(this.data));
}
</code></pre>
<h3>Don't use <code>this</code></h3>
<p>You actually don't want to access <code>this</code> in particular, but <em>the object it refers to</em>. That's why an easy solution is to simply create a new variable that also refers to that object. The variable can have any name, but common ones are <code>self</code> and <code>that</code>.</p>
<pre><code>function MyConstructor(data, transport) {
    this.data = data;
    var self = this;
    transport.on('data', function() {
        alert(self.data);
    });
}
</code></pre>
<p>Since <code>self</code> is a normal variable, it obeys lexical scope rules and is accessible inside the callback. This also has the advantage that you can access the <code>this</code> value of the callback itself.</p>
<h3>Explicitly set <code>this</code> of the callback - part 1</h3>
<p>It might look like you have no control over the value of <code>this</code> because its value is set automatically, but that is actually not the case.</p>
<p>Every function has the method <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind"" rel=""noreferrer""><code>.bind</code> <em><sup>[docs]</sup></em></a>, which returns a new function with <code>this</code> bound to a value. The function has exactly the same behavior as the one you called <code>.bind</code> on, only that <code>this</code> was set by you. No matter how or when that function is called, <code>this</code> will always refer to the passed value.</p>
<pre><code>function MyConstructor(data, transport) {
    this.data = data;
    var boundFunction = (function() { // parenthesis are not necessary
        alert(this.data);             // but might improve readability
    }).bind(this); // &lt;- here we are calling `.bind()` 
    transport.on('data', boundFunction);
}
</code></pre>
<p>In this case, we are binding the callback's <code>this</code> to the value of <code>MyConstructor</code>'s <code>this</code>.</p>
<p><strong>Note:</strong> When a binding context for jQuery, use <a href=""http://api.jquery.com/jQuery.proxy/"" rel=""noreferrer""><code>jQuery.proxy</code> <em><sup>[docs]</sup></em></a> instead. The reason to do this is so that you don't need to store the reference to the function when unbinding an event callback. jQuery handles that internally.</p>
<h3>Set <code>this</code> of the callback - part 2</h3>
<p>Some functions/methods which accept callbacks also accept a value to which the callback's <code>this</code> should refer to. This is basically the same as binding it yourself, but the function/method does it for you. <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""noreferrer""><code>Array#map</code> <em><sup>[docs]</sup></em></a> is such a method. Its signature is:</p>
<pre><code>array.map(callback[, thisArg])
</code></pre>
<p>The first argument is the callback and the second argument is the value <code>this</code> should refer to. Here is a contrived example:</p>
<pre><code>var arr = [1, 2, 3];
var obj = {multiplier: 42};

var new_arr = arr.map(function(v) {
    return v * this.multiplier;
}, obj); // &lt;- here we are passing `obj` as second argument
</code></pre>
<p><strong>Note:</strong> Whether or not you can pass a value for <code>this</code> is usually mentioned in the documentation of that function/method. For example, <a href=""http://api.jquery.com/jQuery.ajax/"" rel=""noreferrer"">jQuery's <code>$.ajax</code> method <em><sup>[docs]</sup></em></a> describes an option called <code>context</code>:</p>
<blockquote>
<p>This object will be made the context of all Ajax-related callbacks.</p>
</blockquote>
<hr />
<h2>Common problem: Using object methods as callbacks/event handlers</h2>
<p>Another common manifestation of this problem is when an object method is used as callback/event handler. Functions are first-class citizens in JavaScript and the term &quot;method&quot; is just a colloquial term for a function that is a value of an object property. But that function doesn't have a specific link to its &quot;containing&quot; object.</p>
<p>Consider the following example:</p>
<pre><code>function Foo() {
    this.data = 42,
    document.body.onclick = this.method;
}

Foo.prototype.method = function() {
    console.log(this.data);
};
</code></pre>
<p>The function <code>this.method</code> is assigned as click event handler, but if the <code>document.body</code> is clicked, the value logged will be <code>undefined</code>, because inside the event handler, <code>this</code> refers to the <code>document.body</code>, not the instance of <code>Foo</code>.<br />
As already mentioned at the beginning, what <code>this</code> refers to depends on how the function is <strong>called</strong>, not how it is <strong>defined</strong>.<br />
If the code was like the following, it might be more obvious that the function doesn't have an implicit reference to the object:</p>
<pre><code>function method() {
    console.log(this.data);
}


function Foo() {
    this.data = 42,
    document.body.onclick = this.method;
}

Foo.prototype.method = method;
</code></pre>
<p><strong>The solution</strong> is the same as mentioned above: If available, use <code>.bind</code> to explicitly bind <code>this</code> to a specific value</p>
<pre><code>document.body.onclick = this.method.bind(this);
</code></pre>
<p>or explicitly call the function as a &quot;method&quot; of the object, by using an anonymous function as callback / event handler and assign the object (<code>this</code>) to another variable:</p>
<pre><code>var self = this;
document.body.onclick = function() {
    self.method();
};
</code></pre>
<p>or use an arrow function:</p>
<pre><code>document.body.onclick = () =&gt; this.method();
</code></pre>
",218196,,218196,,9/10/2020 11:58,9/10/2020 11:58,,,,4,,,,CC BY-SA 4.0
2532729,1,,,3/28/2010 11:37,,2160,471385,"<p>I am hoping to make this question and the answers to it the definitive guide to dealing with daylight saving time, in particular for dealing with the actual change overs. </p>

<p><strong>If you have anything to add, please do</strong></p>

<p>Many systems are dependent on keeping accurate time, the problem is with changes to time due to daylight savings - moving the clock forward or backwards.</p>

<p>For instance, one has business rules in an order taking system that depend on the time of the order - if the clock changes, the rules might not be as clear. How should the time of the order be persisted? There are of course an endless number of scenarios - this one is simply an illustrative one.</p>

<ul>
<li>How have you dealt with the daylight saving issue? </li>
<li>What assumptions are part of your solution? (looking for context here)</li>
</ul>

<p>As important, if not more so:</p>

<ul>
<li>What did you try that did not work? </li>
<li>Why did it not work?</li>
</ul>

<p>I would be interested in programming, OS, data persistence and other pertinent aspects of the issue.</p>

<p>General answers are great, but I would also like to see details especially if they are only available on one platform.</p>
",1583,,1828296,,7/25/2016 21:47,1/28/2022 17:18,Daylight saving time and time zone best practices,<datetime><timezone><utc><dst><datetimeoffset>,30,9,1716,2/16/2018 9:14,3/28/2010 11:37,CC BY-SA 3.0
3954451,2,,3954438,10/17/2010 17:45,,2122,,"<p>You can use the <a href=""https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/IndexOf"" rel=""noreferrer""><code>indexOf</code> method</a> like this:</p>
<pre class=""lang-js prettyprint-override""><code>var index = array.indexOf(item);
if (index !== -1) {
  array.splice(index, 1);
}
</code></pre>
<blockquote>
<p><strong>Note</strong>: <a href=""https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/IndexOf#Browser_compatibility"" rel=""noreferrer"">You'll need to shim it for IE8 and below</a></p>
</blockquote>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var array = [1,2,3,4]
var item = 3

var index = array.indexOf(item);
array.splice(index, 1);

console.log(array)</code></pre>
</div>
</div>
</p>
",34397,,4925661,,11/1/2020 7:55,11/1/2020 7:55,,,,11,,,,CC BY-SA 4.0
2793150,1,2793153,,5/8/2010 6:16,,2095,1163476,"<p>Use of <a href=""http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html"" rel=""noreferrer""><code>java.net.URLConnection</code></a> is asked about pretty often here, and the <a href=""http://download.oracle.com/javase/tutorial/networking/urls/connecting.html"" rel=""noreferrer"">Oracle tutorial</a> is <em>too</em> concise about it.</p>
<p>That tutorial basically only shows how to fire a <a href=""https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods"" rel=""noreferrer"">GET</a> request and read the response. It doesn't explain anywhere how to use it to, among others, perform a <a href=""https://en.wikipedia.org/wiki/POST_%28HTTP%29"" rel=""noreferrer"">POST</a> request, set request headers, read response headers, deal with cookies, submit a HTML form, upload a file, etc.</p>
<p>So, how can I use <code>java.net.URLConnection</code> to fire and handle &quot;advanced&quot; HTTP requests?</p>
",157882,,63550,,8/11/2021 12:23,10/8/2022 11:45,How to use java.net.URLConnection to fire and handle HTTP requests,<java><http><httprequest><httpurlconnection><urlconnection>,12,1,1370,,5/8/2010 6:16,CC BY-SA 4.0
1433387,2,,1433204,9/16/2009 14:37,,2068,,"<p>Using <code>extern</code> is only of relevance when the program you're building
consists of multiple source files linked together, where some of the
variables defined, for example, in source file <code>file1.c</code> need to be
referenced in other source files, such as <code>file2.c</code>.</p>
<p>It is important to <a href=""https://stackoverflow.com/questions/1410563"">understand the difference between <em>defining</em> a
variable and <em>declaring</em> a
variable</a>:</p>
<ul>
<li><p>A variable is <strong>declared</strong> when the compiler is informed that a
variable exists (and this is its type); it does not allocate the
storage for the variable at that point.</p>
</li>
<li><p>A variable is <strong>defined</strong> when the compiler allocates the storage for
the variable.</p>
</li>
</ul>
<p>You may declare a variable multiple times (though once is sufficient);
you may only define it once within a given scope.
A variable definition is also a declaration, but not all variable
declarations are definitions.</p>
<h2>Best way to declare and define global variables</h2>
<p>The clean, reliable way to declare and define global variables is to use
a header file to contain an <code>extern</code> <em>declaration</em> of the variable.</p>
<p>The header is included by the one source file that defines the variable
and by all the source files that reference the variable.
For each program, one source file (and only one source file) defines the
variable.
Similarly, one header file (and only one header file) should declare the
variable.
The header file is crucial; it enables cross-checking between
independent TUs (translation units ‚Äî think source files) and ensures
consistency.</p>
<p>Although there are other ways of doing it, this method is simple and
reliable.
It is demonstrated by <code>file3.h</code>, <code>file1.c</code> and <code>file2.c</code>:</p>
<h3>file3.h</h3>
<pre class=""lang-c prettyprint-override""><code>extern int global_variable;  /* Declaration of the variable */
</code></pre>
<h3>file1.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;file3.h&quot;  /* Declaration made available here */
#include &quot;prog1.h&quot;  /* Function declarations */

/* Variable defined here */
int global_variable = 37;    /* Definition checked against declaration */

int increment(void) { return global_variable++; }
</code></pre>
<h3>file2.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;file3.h&quot;
#include &quot;prog1.h&quot;
#include &lt;stdio.h&gt;

void use_it(void)
{
    printf(&quot;Global variable: %d\n&quot;, global_variable++);
}
</code></pre>
<p>That's the best way to declare and define global variables.</p>
<hr>
<p><em>The next two files complete the source for <code>prog1</code>:</em></p>
<p>The complete programs shown use functions, so function declarations have
crept in.
Both C99 and C11 require functions to be declared or defined before they
are used (whereas C90 did not, for good reasons).
I use the keyword <code>extern</code> in front of function declarations in headers
for consistency ‚Äî¬†to match the <code>extern</code> in front of variable
declarations in headers.
Many people prefer not to use <code>extern</code> in front of function
declarations; the compiler doesn't care ‚Äî and ultimately, neither do I
as long as you're consistent, at least within a source file.</p>
<h3>prog1.h</h3>
<pre class=""lang-c prettyprint-override""><code>extern void use_it(void);
extern int increment(void);
</code></pre>
<h3>prog1.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;file3.h&quot;
#include &quot;prog1.h&quot;
#include &lt;stdio.h&gt;

int main(void)
{
    use_it();
    global_variable += 19;
    use_it();
    printf(&quot;Increment: %d\n&quot;, increment());
    return 0;
}
</code></pre>
<ul>
<li><code>prog1</code> uses <code>prog1.c</code>, <code>file1.c</code>, <code>file2.c</code>, <code>file3.h</code> and <code>prog1.h</code>.</li>
</ul>
<p>The file <code>prog1.mk</code> is a makefile for <code>prog1</code> only.
It will work with most versions of <code>make</code> produced since about the turn
of the millennium.
It is not tied specifically to GNU Make.</p>
<h3>prog1.mk</h3>
<pre><code># Minimal makefile for prog1

PROGRAM = prog1
FILES.c = prog1.c file1.c file2.c
FILES.h = prog1.h file3.h
FILES.o = ${FILES.c:.c=.o}

CC      = gcc
SFLAGS  = -std=c11
GFLAGS  = -g
OFLAGS  = -O3
WFLAG1  = -Wall
WFLAG2  = -Wextra
WFLAG3  = -Werror
WFLAG4  = -Wstrict-prototypes
WFLAG5  = -Wmissing-prototypes
WFLAGS  = ${WFLAG1} ${WFLAG2} ${WFLAG3} ${WFLAG4} ${WFLAG5}
UFLAGS  = # Set on command line only

CFLAGS  = ${SFLAGS} ${GFLAGS} ${OFLAGS} ${WFLAGS} ${UFLAGS}
LDFLAGS =
LDLIBS  =

all:    ${PROGRAM}

${PROGRAM}: ${FILES.o}
    ${CC} -o $@ ${CFLAGS} ${FILES.o} ${LDFLAGS} ${LDLIBS}

prog1.o: ${FILES.h}
file1.o: ${FILES.h}
file2.o: ${FILES.h}

# If it exists, prog1.dSYM is a directory on macOS
DEBRIS = a.out core *~ *.dSYM
RM_FR  = rm -fr

clean:
    ${RM_FR} ${FILES.o} ${PROGRAM} ${DEBRIS}

</code></pre>
<hr>
<h2>Guidelines</h2>
<p>Rules to be broken by experts only, and only with good reason:</p>
<ul>
<li><p>A header file only contains <code>extern</code> declarations of variables ‚Äî never
<code>static</code> or unqualified variable definitions.</p>
</li>
<li><p>For any given variable, only one header file declares it (SPOT ‚Äî
Single Point of Truth).</p>
</li>
<li><p>A source file never contains <code>extern</code> declarations of variables ‚Äî
source files always include the (sole) header that declares them.</p>
</li>
<li><p>For any given variable, exactly one source file defines the variable,
preferably initializing it too.  (Although there is no need to
initialize explicitly to zero, it does no harm and can do some good,
because there can be only one initialized definition of a particular
global variable in a program).</p>
</li>
<li><p>The source file that defines the variable also includes the header to
ensure that the definition and the declaration are consistent.</p>
</li>
<li><p>A function should never need to declare a variable using <code>extern</code>.</p>
</li>
<li><p>Avoid global variables whenever possible ‚Äî use functions instead.</p>
</li>
</ul>
<p><sup><em>The source code and text of this answer are available in my
<a href=""https://github.com/jleffler/soq"" rel=""noreferrer"">SOQ</a> (Stack Overflow Questions)
repository on GitHub in the
<a href=""https://github.com/jleffler/soq/tree/master/src/so-0143-3204"" rel=""noreferrer"">src/so-0143-3204</a>
sub-directory.</em>
</sup></p>
<p><sup><em>If you're not an experienced C programmer, you could (and perhaps
should) stop reading here.</em>
</sup></p>
<h2>Not so good way to define global variables</h2>
<p>With some (indeed, many) C compilers, you can get away with what's
called a 'common' definition of a variable too.
'Common', here, refers to a technique used in Fortran for sharing
variables between source files, using a (possibly named) COMMON block.
What happens here is that each of a number of files provides a tentative
definition of the variable.
As long as no more than one file provides an initialized definition,
then the various files end up sharing a common single definition of the
variable:</p>
<h3>file10.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;prog2.h&quot;

long l;   /* Do not do this in portable code */

void inc(void) { l++; }
</code></pre>
<h3>file11.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;prog2.h&quot;

long l;   /* Do not do this in portable code */

void dec(void) { l--; }
</code></pre>
<h3>file12.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;prog2.h&quot;
#include &lt;stdio.h&gt;

long l = 9;   /* Do not do this in portable code */

void put(void) { printf(&quot;l = %ld\n&quot;, l); }
</code></pre>
<p>This technique does not conform to the letter of the C standard and the
'one definition rule' ‚Äî it is officially undefined behaviour:</p>
<blockquote>
<p><strong><a href=""http://port70.net/%7Ensz/c/c11/n1570.html#J.2"" rel=""noreferrer"">J.2 Undefined behavior</a></strong></p>
</blockquote>
<blockquote>
<p>An identifier with external linkage is used, but in the program there
does not exist exactly one external definition for the identifier, or
the identifier is not used and there exist multiple external
definitions for the identifier (6.9).</p>
</blockquote>
<blockquote>
<p><strong><a href=""http://port70.net/%7Ensz/c/c11/n1570.html#6.9p5"" rel=""noreferrer"">¬ß6.9 External definitions ¬∂5</a></strong></p>
</blockquote>
<blockquote>
<p>An <em>external definition</em> is an external declaration that is also a
definition of a function (other than an inline definition) or an
object.
If an identifier declared with external linkage is used in an
expression (other than as part of the operand of a <code>sizeof</code> or
<code>_Alignof</code> operator whose result is an integer constant), somewhere in
the entire program there shall be exactly one external definition for
the identifier; otherwise, there shall be no more than
one.<sup>161)</sup></p>
</blockquote>
<blockquote>
<p><sup>161)</sup> Thus, if an identifier declared with external linkage
is not used in an expression, there need be no external definition for
it.</p>
</blockquote>
<p>However, the C standard also lists it in informative Annex J as one of
the <a href=""http://port70.net/%7Ensz/c/c11/n1570.html#J.5"" rel=""noreferrer"">Common extensions</a>.</p>
<blockquote>
<p><a href=""http://port70.net/%7Ensz/c/c11/n1570.html#J.5.11"" rel=""noreferrer"">J.5.11 Multiple external definitions</a></p>
</blockquote>
<blockquote>
<p>There may be more than one external definition for the identifier of
an object, with or without the explicit use of the keyword extern; if
the definitions disagree, or more than one is initialized, the
behavior is undefined (6.9.2).</p>
</blockquote>
<p>Because this technique is not always supported, it is best to avoid
using it, <em>especially if your code needs to be portable</em>.
Using this technique, you can also end up with unintentional type
punning.</p>
<p>If one of the files above declared <code>l</code> as a <code>double</code> instead of as a
<code>long</code>, C's type-unsafe linkers probably would not spot the mismatch.
If you're on a machine with 64-bit <code>long</code> and <code>double</code>, you'd not even
get a warning; on a machine with 32-bit <code>long</code> and 64-bit <code>double</code>,
you'd probably get a warning about the different sizes ‚Äî the linker
would use the largest size, exactly as a Fortran program would take the
largest size of any common blocks.</p>
<p>Note that GCC 10.1.0, which was released on 2020-05-07, changes the
default compilation options to use
<a href=""https://gcc.gnu.org/gcc-10/porting_to.html"" rel=""noreferrer""><code>-fno-common</code></a>, which means
that by default, the code above no longer links unless you override the
default with <code>-fcommon</code> (or use attributes, etc ‚Äî see the link).</p>
<hr>
<p><em>The next two files complete the source for <code>prog2</code>:</em></p>
<h3>prog2.h</h3>
<pre class=""lang-c prettyprint-override""><code>extern void dec(void);
extern void put(void);
extern void inc(void);
</code></pre>
<h3>prog2.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;prog2.h&quot;
#include &lt;stdio.h&gt;

int main(void)
{
    inc();
    put();
    dec();
    put();
    dec();
    put();
}
</code></pre>
<ul>
<li><code>prog2</code> uses <code>prog2.c</code>, <code>file10.c</code>, <code>file11.c</code>, <code>file12.c</code>, <code>prog2.h</code>.</li>
</ul>
<hr>
<h3>Warning</h3>
<p>As noted in comments here, and as stated in my answer to a similar
<a href=""https://stackoverflow.com/questions/1490693"">question</a>, using multiple
definitions for a global variable leads to undefined behaviour (J.2;
¬ß6.9), which is the standard's way of saying &quot;anything could happen&quot;.
One of the things that can happen is that the program behaves as you
expect; and J.5.11 says, approximately, &quot;you might be lucky more often
than you deserve&quot;.
But a program that relies on multiple definitions of an extern variable
‚Äî with or without the explicit 'extern' keyword ‚Äî is not a strictly
conforming program and not guaranteed to work everywhere.
Equivalently: it contains a bug which may or may not show itself.</p>
<h2>Violating the guidelines</h2>
<p>There are, of course, many ways in which these guidelines can be broken.
Occasionally, there may be a good reason to break the guidelines, but
such occasions are extremely unusual.</p>
<h3>faulty_header.h</h3>
<pre class=""lang-c prettyprint-override""><code>int some_var;    /* Do not do this in a header!!! */
</code></pre>
<p>Note 1: if the header defines the variable without the <code>extern</code> keyword,
then each file that includes the header creates a tentative definition
of the variable.
As noted previously, this will often work, but the C standard does not
guarantee that it will work.</p>
<h3>broken_header.h</h3>
<pre class=""lang-c prettyprint-override""><code>int some_var = 13;    /* Only one source file in a program can use this */
</code></pre>
<p>Note 2: if the header defines and initializes the variable, then only
one source file in a given program can use the header.
Since headers are primarily for sharing information, it is a bit silly
to create one that can only be used once.</p>
<h3>seldom_correct.h</h3>
<pre class=""lang-c prettyprint-override""><code>static int hidden_global = 3;   /* Each source file gets its own copy  */
</code></pre>
<p>Note 3: if the header defines a static variable (with or without
initialization), then each source file ends up with its own private
version of the 'global' variable.</p>
<p>If the variable is actually a complex array, for example, this can lead
to extreme duplication of code.  It can, very occasionally, be a
sensible way to achieve some effect, but that is very unusual.</p>
<hr>
<h2>Summary</h2>
<p>Use the header technique I showed first.
It works reliably and everywhere.
Note, in particular, that the header declaring the <code>global_variable</code> is
included in every file that uses it ‚Äî including the one that defines it.
This ensures that everything is self-consistent.</p>
<p>Similar concerns arise with declaring and defining functions ‚Äî
analogous rules apply.
But the question was about variables specifically, so I've kept the
answer to variables only.</p>
<h3>End of Original Answer</h3>
<p><sup><em>If you're not an experienced C programmer, you probably should stop reading here.</em></sup></p>
<hr>
<p><em>Late Major Addition</em></p>
<h1>Avoiding Code Duplication</h1>
<p>One concern that is sometimes (and legitimately) raised about the
'declarations in headers, definitions in source' mechanism described
here is that there are two files to be kept synchronized ‚Äî the header
and the source.  This is usually followed up with an observation that a
macro can be used so that the header serves double duty ‚Äî normally
declaring the variables, but when a specific macro is set before the
header is included, it defines the variables instead.</p>
<p>Another concern can be that the variables need to be defined in each of
a number of 'main programs'.  This is normally a spurious concern; you
can simply introduce a C source file to define the variables and link
the object file produced with each of the programs.</p>
<p>A typical scheme works like this, using the original global variable
illustrated in <code>file3.h</code>:</p>
<h3>file3a.h</h3>
<pre class=""lang-c prettyprint-override""><code>#ifdef DEFINE_VARIABLES
#define EXTERN /* nothing */
#else
#define EXTERN extern
#endif /* DEFINE_VARIABLES */

EXTERN int global_variable;
</code></pre>
<h3>file1a.c</h3>
<pre class=""lang-c prettyprint-override""><code>#define DEFINE_VARIABLES
#include &quot;file3a.h&quot;  /* Variable defined - but not initialized */
#include &quot;prog3.h&quot;

int increment(void) { return global_variable++; }
</code></pre>
<h3>file2a.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;file3a.h&quot;
#include &quot;prog3.h&quot;
#include &lt;stdio.h&gt;

void use_it(void)
{
    printf(&quot;Global variable: %d\n&quot;, global_variable++);
}
</code></pre>
<hr>
<p><em>The next two files complete the source for <code>prog3</code>:</em></p>
<h3>prog3.h</h3>
<pre class=""lang-c prettyprint-override""><code>extern void use_it(void);
extern int increment(void);
</code></pre>
<h3>prog3.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;file3a.h&quot;
#include &quot;prog3.h&quot;
#include &lt;stdio.h&gt;

int main(void)
{
    use_it();
    global_variable += 19;
    use_it();
    printf(&quot;Increment: %d\n&quot;, increment());
    return 0;
}
</code></pre>
<ul>
<li><code>prog3</code> uses <code>prog3.c</code>, <code>file1a.c</code>, <code>file2a.c</code>, <code>file3a.h</code>, <code>prog3.h</code>.</li>
</ul>
<hr>
<h2>Variable initialization</h2>
<p>The problem with this scheme as shown is that it does not provide for
initialization of the global variable.  With C99 or C11 and variable argument
lists for macros, you could define a macro to support initialization too.
(With C89 and no support for variable argument lists in macros, there is no
easy way to handle arbitrarily long initializers.)</p>
<h3>file3b.h</h3>
<pre class=""lang-c prettyprint-override""><code>#ifdef DEFINE_VARIABLES
#define EXTERN                  /* nothing */
#define INITIALIZER(...)        = __VA_ARGS__
#else
#define EXTERN                  extern
#define INITIALIZER(...)        /* nothing */
#endif /* DEFINE_VARIABLES */

EXTERN int global_variable INITIALIZER(37);
EXTERN struct { int a; int b; } oddball_struct INITIALIZER({ 41, 43 });
</code></pre>
<p><sup>Reverse contents of <code>#if</code> and <code>#else</code> blocks, fixing bug identified by
<a href=""https://stackoverflow.com/users/369317/denis-kniazhev"">Denis Kniazhev</a></sup></p>
<h3>file1b.c</h3>
<pre class=""lang-c prettyprint-override""><code>#define DEFINE_VARIABLES
#include &quot;file3b.h&quot;  /* Variables now defined and initialized */
#include &quot;prog4.h&quot;

int increment(void) { return global_variable++; }
int oddball_value(void) { return oddball_struct.a + oddball_struct.b; }

</code></pre>
<h3>file2b.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;file3b.h&quot;
#include &quot;prog4.h&quot;
#include &lt;stdio.h&gt;

void use_them(void)
{
    printf(&quot;Global variable: %d\n&quot;, global_variable++);
    oddball_struct.a += global_variable;
    oddball_struct.b -= global_variable / 2;
}
</code></pre>
<p>Clearly, the code for the oddball structure is not what you'd normally
write, but it illustrates the point.  The first argument to the second
invocation of <code>INITIALIZER</code> is <code>{ 41</code> and the remaining argument
(singular in this example) is <code>43 }</code>.  Without C99 or similar support
for variable argument lists for macros, initializers that need to
contain commas are very problematic.</p>
<p><sup>Correct header <code>file3b.h</code> included (instead of <code>fileba.h</code>) per
<a href=""https://stackoverflow.com/users/369317/denis-kniazhev"">Denis Kniazhev</a></sup></p>
<hr>
<p><em>The next two files complete the source for <code>prog4</code>:</em></p>
<h3>prog4.h</h3>
<pre class=""lang-c prettyprint-override""><code>extern int increment(void);
extern int oddball_value(void);
extern void use_them(void);
</code></pre>
<h3>prog4.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;file3b.h&quot;
#include &quot;prog4.h&quot;
#include &lt;stdio.h&gt;

int main(void)
{
    use_them();
    global_variable += 19;
    use_them();
    printf(&quot;Increment: %d\n&quot;, increment());
    printf(&quot;Oddball:   %d\n&quot;, oddball_value());
    return 0;
}
</code></pre>
<ul>
<li><code>prog4</code> uses <code>prog4.c</code>, <code>file1b.c</code>, <code>file2b.c</code>, <code>prog4.h</code>, <code>file3b.h</code>.</li>
</ul>
<hr>
<h2>Header Guards</h2>
<p>Any header should be protected against reinclusion, so that type
definitions (enum, struct or union types, or typedefs generally) do not
cause problems.  The standard technique is to wrap the body of the
header in a header guard such as:</p>
<pre><code>#ifndef FILE3B_H_INCLUDED
#define FILE3B_H_INCLUDED

...contents of header...

#endif /* FILE3B_H_INCLUDED */
</code></pre>
<p>The header might be included twice indirectly.  For example, if
<code>file4b.h</code> includes <code>file3b.h</code> for a type definition that isn't shown,
and <code>file1b.c</code> needs to use both header <code>file4b.h</code> and <code>file3b.h</code>, then
you have some more tricky issues to resolve.  Clearly, you might revise
the header list to include just <code>file4b.h</code>.  However, you might not be
aware of the internal dependencies ‚Äî and the code should, ideally,
continue to work.</p>
<p>Further, it starts to get tricky because you might include <code>file4b.h</code>
before including <code>file3b.h</code> to generate the definitions, but the normal
header guards on <code>file3b.h</code> would prevent the header being reincluded.</p>
<p>So, you need to include the body of <code>file3b.h</code> at most once for
declarations, and at most once for definitions, but you might need both
in a single translation unit (TU ‚Äî a combination of a source file and
the headers it uses).</p>
<h2>Multiple inclusion with variable definitions</h2>
<p>However, it can be done subject to a not too unreasonable constraint.
Let's introduce a new set of file names:</p>
<ul>
<li><p><code>external.h</code> for the EXTERN macro definitions, etc.</p>
</li>
<li><p><code>file1c.h</code> to define types (notably, <code>struct oddball</code>, the type of <code>oddball_struct</code>).</p>
</li>
<li><p><code>file2c.h</code> to define or declare the global variables.</p>
</li>
<li><p><code>file3c.c</code> which defines the global variables.</p>
</li>
<li><p><code>file4c.c</code> which simply uses the global variables.</p>
</li>
<li><p><code>file5c.c</code> which shows that you can declare and then define the global variables.</p>
</li>
<li><p><code>file6c.c</code> which shows that you can define and then (attempt to) declare the global variables.</p>
</li>
</ul>
<p>In these examples, <code>file5c.c</code> and <code>file6c.c</code> directly include the header
<code>file2c.h</code> several times, but that is the simplest way to show that the
mechanism works.  It means that if the header was indirectly included
twice, it would also be safe.</p>
<p>The restrictions for this to work are:</p>
<ol>
<li><p>The header defining or declaring the global variables may not itself
define any types.</p>
</li>
<li><p>Immediately before you include a header that should define variables,
you define the macro DEFINE_VARIABLES.</p>
</li>
<li><p>The header defining or declaring the variables has stylized contents.</p>
</li>
</ol>
<h3>external.h</h3>
<pre class=""lang-c prettyprint-override""><code>/*
** This header must not contain header guards (like &lt;assert.h&gt; must not).
** Each time it is invoked, it redefines the macros EXTERN, INITIALIZE
** based on whether macro DEFINE_VARIABLES is currently defined.
*/
#undef EXTERN
#undef INITIALIZE

#ifdef DEFINE_VARIABLES
#define EXTERN              /* nothing */
#define INITIALIZE(...)     = __VA_ARGS__
#else
#define EXTERN              extern
#define INITIALIZE(...)     /* nothing */
#endif /* DEFINE_VARIABLES */
</code></pre>
<h3>file1c.h</h3>
<pre class=""lang-c prettyprint-override""><code>#ifndef FILE1C_H_INCLUDED
#define FILE1C_H_INCLUDED

struct oddball
{
    int a;
    int b;
};

extern void use_them(void);
extern int increment(void);
extern int oddball_value(void);

#endif /* FILE1C_H_INCLUDED */

</code></pre>
<h3>file2c.h</h3>
<pre class=""lang-c prettyprint-override""><code>
/* Standard prologue */
#if defined(DEFINE_VARIABLES) &amp;&amp; !defined(FILE2C_H_DEFINITIONS)
#undef FILE2C_H_INCLUDED
#endif

#ifndef FILE2C_H_INCLUDED
#define FILE2C_H_INCLUDED

#include &quot;external.h&quot;   /* Support macros EXTERN, INITIALIZE */
#include &quot;file1c.h&quot;     /* Type definition for struct oddball */

#if !defined(DEFINE_VARIABLES) || !defined(FILE2C_H_DEFINITIONS)

/* Global variable declarations / definitions */
EXTERN int global_variable INITIALIZE(37);
EXTERN struct oddball oddball_struct INITIALIZE({ 41, 43 });

#endif /* !DEFINE_VARIABLES || !FILE2C_H_DEFINITIONS */

/* Standard epilogue */
#ifdef DEFINE_VARIABLES
#define FILE2C_H_DEFINITIONS
#endif /* DEFINE_VARIABLES */

#endif /* FILE2C_H_INCLUDED */
</code></pre>
<h3>file3c.c</h3>
<pre class=""lang-c prettyprint-override""><code>#define DEFINE_VARIABLES
#include &quot;file2c.h&quot;  /* Variables now defined and initialized */

int increment(void) { return global_variable++; }
int oddball_value(void) { return oddball_struct.a + oddball_struct.b; }

</code></pre>
<h3>file4c.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;file2c.h&quot;
#include &lt;stdio.h&gt;

void use_them(void)
{
    printf(&quot;Global variable: %d\n&quot;, global_variable++);
    oddball_struct.a += global_variable;
    oddball_struct.b -= global_variable / 2;
}

</code></pre>
<h3>file5c.c</h3>
<pre class=""lang-c prettyprint-override""><code>
#include &quot;file2c.h&quot;     /* Declare variables */

#define DEFINE_VARIABLES
#include &quot;file2c.h&quot;  /* Variables now defined and initialized */

int increment(void) { return global_variable++; }
int oddball_value(void) { return oddball_struct.a + oddball_struct.b; }

</code></pre>
<h3>file6c.c</h3>
<pre class=""lang-c prettyprint-override""><code>
#define DEFINE_VARIABLES
#include &quot;file2c.h&quot;     /* Variables now defined and initialized */

#include &quot;file2c.h&quot;     /* Declare variables */

int increment(void) { return global_variable++; }
int oddball_value(void) { return oddball_struct.a + oddball_struct.b; }

</code></pre>
<hr>
<p><em>The next source file completes the source (provides a main program) for <code>prog5</code>, <code>prog6</code> and <code>prog7</code>:</em></p>
<h3>prog5.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;file2c.h&quot;
#include &lt;stdio.h&gt;

int main(void)
{
    use_them();
    global_variable += 19;
    use_them();
    printf(&quot;Increment: %d\n&quot;, increment());
    printf(&quot;Oddball:   %d\n&quot;, oddball_value());
    return 0;
}
</code></pre>
<ul>
<li><p><code>prog5</code> uses <code>prog5.c</code>, <code>file3c.c</code>, <code>file4c.c</code>, <code>file1c.h</code>, <code>file2c.h</code>, <code>external.h</code>.</p>
</li>
<li><p><code>prog6</code> uses <code>prog5.c</code>, <code>file5c.c</code>, <code>file4c.c</code>, <code>file1c.h</code>, <code>file2c.h</code>, <code>external.h</code>.</p>
</li>
<li><p><code>prog7</code> uses <code>prog5.c</code>, <code>file6c.c</code>, <code>file4c.c</code>, <code>file1c.h</code>, <code>file2c.h</code>, <code>external.h</code>.</p>
</li>
</ul>
<hr>
<p>This scheme avoids most problems.  You only run into a problem if a
header that defines variables (such as <code>file2c.h</code>) is included by
another header (say <code>file7c.h</code>) that defines variables.  There isn't an
easy way around that other than &quot;don't do it&quot;.</p>
<p>You can partially work around the problem by revising <code>file2c.h</code> into
<code>file2d.h</code>:</p>
<h3>file2d.h</h3>
<pre class=""lang-c prettyprint-override""><code>/* Standard prologue */
#if defined(DEFINE_VARIABLES) &amp;&amp; !defined(FILE2D_H_DEFINITIONS)
#undef FILE2D_H_INCLUDED
#endif

#ifndef FILE2D_H_INCLUDED
#define FILE2D_H_INCLUDED

#include &quot;external.h&quot;   /* Support macros EXTERN, INITIALIZE */
#include &quot;file1c.h&quot;     /* Type definition for struct oddball */

#if !defined(DEFINE_VARIABLES) || !defined(FILE2D_H_DEFINITIONS)

/* Global variable declarations / definitions */
EXTERN int global_variable INITIALIZE(37);
EXTERN struct oddball oddball_struct INITIALIZE({ 41, 43 });

#endif /* !DEFINE_VARIABLES || !FILE2D_H_DEFINITIONS */

/* Standard epilogue */
#ifdef DEFINE_VARIABLES
#define FILE2D_H_DEFINITIONS
#undef DEFINE_VARIABLES
#endif /* DEFINE_VARIABLES */

#endif /* FILE2D_H_INCLUDED */
</code></pre>
<p>The issue becomes 'should the header include <code>#undef DEFINE_VARIABLES</code>?'
If you omit that from the header and wrap any defining invocation with
<code>#define</code> and <code>#undef</code>:</p>
<pre><code>#define DEFINE_VARIABLES
#include &quot;file2c.h&quot;
#undef DEFINE_VARIABLES
</code></pre>
<p>in the source code (so the headers never alter the value of
<code>DEFINE_VARIABLES</code>), then you should be clean.  It is just a nuisance to
have to remember to write the the extra line.  An alternative might be:</p>
<pre><code>#define HEADER_DEFINING_VARIABLES &quot;file2c.h&quot;
#include &quot;externdef.h&quot;
</code></pre>
<h3>externdef.h</h3>
<pre class=""lang-c prettyprint-override""><code>/*
** This header must not contain header guards (like &lt;assert.h&gt; must not).
** Each time it is included, the macro HEADER_DEFINING_VARIABLES should
** be defined with the name (in quotes - or possibly angle brackets) of
** the header to be included that defines variables when the macro
** DEFINE_VARIABLES is defined.  See also: external.h (which uses
** DEFINE_VARIABLES and defines macros EXTERN and INITIALIZE
** appropriately).
**
** #define HEADER_DEFINING_VARIABLES &quot;file2c.h&quot;
** #include &quot;externdef.h&quot;
*/

#if defined(HEADER_DEFINING_VARIABLES)
#define DEFINE_VARIABLES
#include HEADER_DEFINING_VARIABLES
#undef DEFINE_VARIABLES
#undef HEADER_DEFINING_VARIABLES
#endif /* HEADER_DEFINING_VARIABLES */

</code></pre>
<p>This is getting a tad convoluted, but seems to be secure (using the
<code>file2d.h</code>, with no <code>#undef DEFINE_VARIABLES</code> in the <code>file2d.h</code>).</p>
<h3>file7c.c</h3>
<pre class=""lang-c prettyprint-override""><code>/* Declare variables */
#include &quot;file2d.h&quot;

/* Define variables */
#define HEADER_DEFINING_VARIABLES &quot;file2d.h&quot;
#include &quot;externdef.h&quot;

/* Declare variables - again */
#include &quot;file2d.h&quot;

/* Define variables - again */
#define HEADER_DEFINING_VARIABLES &quot;file2d.h&quot;
#include &quot;externdef.h&quot;

int increment(void) { return global_variable++; }
int oddball_value(void) { return oddball_struct.a + oddball_struct.b; }

</code></pre>
<h3>file8c.h</h3>
<pre class=""lang-c prettyprint-override""><code>/* Standard prologue */
#if defined(DEFINE_VARIABLES) &amp;&amp; !defined(FILE8C_H_DEFINITIONS)
#undef FILE8C_H_INCLUDED
#endif

#ifndef FILE8C_H_INCLUDED
#define FILE8C_H_INCLUDED

#include &quot;external.h&quot;   /* Support macros EXTERN, INITIALIZE */
#include &quot;file2d.h&quot;     /* struct oddball */

#if !defined(DEFINE_VARIABLES) || !defined(FILE8C_H_DEFINITIONS)

/* Global variable declarations / definitions */
EXTERN struct oddball another INITIALIZE({ 14, 34 });

#endif /* !DEFINE_VARIABLES || !FILE8C_H_DEFINITIONS */

/* Standard epilogue */
#ifdef DEFINE_VARIABLES
#define FILE8C_H_DEFINITIONS
#endif /* DEFINE_VARIABLES */

#endif /* FILE8C_H_INCLUDED */

</code></pre>
<h3>file8c.c</h3>
<pre class=""lang-c prettyprint-override""><code>/* Define variables */
#define HEADER_DEFINING_VARIABLES &quot;file2d.h&quot;
#include &quot;externdef.h&quot;

/* Define variables */
#define HEADER_DEFINING_VARIABLES &quot;file8c.h&quot;
#include &quot;externdef.h&quot;

int increment(void) { return global_variable++; }
int oddball_value(void) { return oddball_struct.a + oddball_struct.b; }

</code></pre>
<hr>
<p><em>The next two files complete the source for <code>prog8</code> and <code>prog9</code>:</em></p>
<h3>prog8.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;file2d.h&quot;
#include &lt;stdio.h&gt;

int main(void)
{
    use_them();
    global_variable += 19;
    use_them();
    printf(&quot;Increment: %d\n&quot;, increment());
    printf(&quot;Oddball:   %d\n&quot;, oddball_value());
    return 0;
}
</code></pre>
<h3>file9c.c</h3>
<pre class=""lang-c prettyprint-override""><code>#include &quot;file2d.h&quot;
#include &lt;stdio.h&gt;

void use_them(void)
{
    printf(&quot;Global variable: %d\n&quot;, global_variable++);
    oddball_struct.a += global_variable;
    oddball_struct.b -= global_variable / 2;
}

</code></pre>
<ul>
<li><p><code>prog8</code> uses <code>prog8.c</code>, <code>file7c.c</code>, <code>file9c.c</code>.</p>
</li>
<li><p><code>prog9</code> uses <code>prog8.c</code>, <code>file8c.c</code>, <code>file9c.c</code>.</p>
</li>
</ul>
<hr>
<p>However, the problems are relatively unlikely to occur in practice,
especia",,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,
ly if you take the standard advice to</p>,,,,,,,,,,,,,,,,,,,,,,
<h1>Avoid global variables</h1>,,,,,,,,,,,,,,,,,,,,,,
<hr>,,,,,,,,,,,,,,,,,,,,,,
<p>Does this exposition miss anything?</p>,,,,,,,,,,,,,,,,,,,,,,
<sup>,,,,,,,,,,,,,,,,,,,,,,
_Confession_: The 'avoiding duplicated code' scheme outlined here was,,,,,,,,,,,,,,,,,,,,,,
developed because the issue affects some code I work on (but don't own),,,,,,,,,,,,,,,,,,,,,,
and is a niggling concern with the scheme outlined in the first part of,,,,,,,,,,,,,,,,,,,,,,
the answer.  However, the original scheme leaves you with just two,,,,,,,,,,,,,,,,,,,,,
places to modify to keep variable definitions and declarations,,,,,,,,,,,,,,,,,,,,,,
synchronized, which is a big step forward over having exernal variable,,,,,,,,,,,,,,,,,,,,,
declarations scattered throughout the code base (which really matters,,,,,,,,,,,,,,,,,,,,,,
when there are thousands of files in total).  However, the code in the,,,,,,,,,,,,,,,,,,,,,
files with the names `fileNc.[ch]` (plus `external.h` and `externdef.h`),,,,,,,,,,,,,,,,,,,,,,
shows that it can be made to work.  Clearly, it would not be hard to,,,,,,,,,,,,,,,,,,,,,
create a header generator script to give you the standardized template,,,,,,,,,,,,,,,,,,,,,,
for a variable defining and declaring header file.,,,,,,,,,,,,,,,,,,,,,,
</sup>,,,,,,,,,,,,,,,,,,,,,,
<p><em>NB</em> These are toy programs with just barely enough code to make them,,,,,,,,,,,,,,,,,,,,,,
marginally interesting.  There is repetition within the examples that,,,,,,,,,,,,,,,,,,,,,,
could be removed, but isn't to simplify the pedagogical explanation.,,,,,,,,,,,,,,,,,,,,,
(For example: the difference between <code>prog5.c</code> and <code>prog8.c</code> is the name,,,,,,,,,,,,,,,,,,,,,,
of one of the headers that are included.  It would be possible to,,,,,,,,,,,,,,,,,,,,,,
reorganize the code so that the <code>main()</code> function was not repeated, but,,,,,,,,,,,,,,,,,,,,,
it would conceal more than it revealed.)</p>,,,,,,,,,,,,,,,,,,,,,,
",15168""",,15168,,7/28/2020 17:00,7/28/2020 17:00,,,,33,,,,CC BY-SA 4.0,,,,,,,,,
40355466,2,,40354978,11/1/2016 7:04,,2068,,"<p>If you think a 64-bit DIV instruction is a good way to divide by two, then no wonder the compiler's asm output beat your hand-written code, even with <code>-O0</code> (compile fast, no extra optimization, and store/reload to memory after/before every C statement so a debugger can modify variables).</p>
<p>See <a href=""http://agner.org/optimize/"" rel=""noreferrer"">Agner Fog's Optimizing Assembly guide</a> to learn how to write efficient asm.  He also has instruction tables and a microarch guide for specific details for specific CPUs.  See also the <a href=""/questions/tagged/x86"" class=""post-tag"" title=""show questions tagged &#39;x86&#39;"" rel=""tag"">x86</a> tag wiki for more perf links.</p>
<p>See also this more general question about beating the compiler with hand-written asm: <a href=""https://stackoverflow.com/questions/9601427"">Is inline assembly language slower than native C++ code?</a>.  TL:DR: yes if you do it wrong (like this question).</p>
<p>Usually you're fine letting the compiler do its thing, especially if you <strong>try to write C++ that can compile efficiently</strong>.  Also see <a href=""https://stackoverflow.com/questions/1866316/assembly-language-compiled-languages"">is assembly faster than compiled languages?</a>.  One of the answers links to <a href=""http://www.linux-kongress.org/2009/slides/compiler_survey_felix_von_leitner.pdf"" rel=""noreferrer"">these neat slides</a> showing how various C compilers optimize some really simple functions with cool tricks.  <strong>Matt Godbolt's CppCon2017 talk ‚Äú<a href=""https://youtu.be/bSkpMdDe4g4"" rel=""noreferrer"">What Has My Compiler Done for Me Lately? Unbolting the Compiler's Lid</a>‚Äù is in a similar vein.</strong></p>
<hr />
<pre><code>even:
    mov rbx, 2
    xor rdx, rdx
    div rbx
</code></pre>
<p>On Intel Haswell, <strong><code>div r64</code></strong> is 36 uops, with a <strong>latency of 32-96 cycles</strong>, and a throughput of one per 21-74 cycles.  (Plus the 2 uops to set up RBX and zero RDX, but out-of-order execution can run those early).  <a href=""https://stackoverflow.com/q/26907523/224132"">High-uop-count instructions like DIV are microcoded, which can also cause front-end bottlenecks.</a> In this case, latency is the most relevant factor because it's part of a loop-carried dependency chain.</p>
<p><strong><code>shr rax, 1</code> does the same unsigned division: It's 1 uop, with 1c latency</strong>, and can run 2 per clock cycle.</p>
<p>For comparison, 32-bit division is faster, but still horrible vs. shifts. <code>idiv r32</code> is 9 uops, 22-29c latency, and one per 8-11c throughput on Haswell.</p>
<hr />
<p><strong>As you can see from looking at gcc's <code>-O0</code> asm output (<a href=""http://gcc.godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(j:1,options:(colouriseAsm:%270%27,compileOnChange:%270%27),source:%27%23include+%3Ciostream%3E%0A%23include+%3Cstdint.h%3E%0Ausing+namespace+std%3B%0A%0A//+unsigned+types+give+better+asm+output+for+divides+by+2.%0A//+Even+with+-O3,+%60long%60+sucks+(try+it:+godbolt+recompiles+automatically+after+edits)%0A//+I+used+this+version+as+a+starting+point+for+hand-optimizing.%0Aint+sequence(uint64_t+n)+%7B%0A++//+CHANGED+FROM+THE+QUESTION!%27S+CODE:+long+-%3E+uint64_t+%0A++++int+count+%3D+1%3B%0A++++while+(n+!!%3D+1)+%7B%0A++++++++if+(n+%25+2+%3D%3D+0)%0A++++++++++++n+/%3D+2%3B%0A++++++++else%0A++++++++++++n+%3D+n*3+%2B+1%3B%0A%0A++++++++%2B%2Bcount%3B%0A++++%7D%0A++++return+count%3B%0A%7D%0A%0Aint+main()+%7B%0A++++int+max+%3D+0,+maxi%3B%0A++++for+(int+i+%3D+999999%3B+i+%3E+0%3B+--i)+%7B%0A++++++++int+s+%3D+sequence(i)%3B%0A++++++++if+(s+%3E+max)+%7B%0A++++++++++++max+%3D+s%3B%0A++++++++++++maxi+%3D+i%3B%0A++++++++%7D%0A++++%7D%0A++++cout+%3C%3C+maxi+%3C%3C+endl%3B%0A%7D%0A%0A//+as+discussed,+gcc+-O0+still+uses+a+multiplicative+inverse%0A//+for+non-power-of-2+constants%0Aunsigned+long+div_by_13(unsigned+long+a)+%7B%0A++return+a/13%3B%0A%7D%0A%27),l:%275%27,n:%271%27,o:%27C%2B%2B+source+%231%27,t:%270%27)),k:40.81295963439001,l:%274%27,n:%270%27,o:%27%27,s:0,t:%270%27),(g:!((h:compiler,i:(compiler:g540,filters:(b:%270%27,commentOnly:%270%27,directives:%270%27,intel:%270%27),options:%27-O0+-std%3Dgnu%2B%2B11+-Wall+-Wextra+-fverbose-asm%27),l:%275%27,n:%270%27,o:%27%231+with+x86-64+gcc+5.4%27,t:%270%27)),k:31.237103409492676,l:%274%27,n:%270%27,o:%27%27,s:0,t:%270%27),(g:!((h:compiler,i:(compiler:g540,filters:(b:%270%27,commentOnly:%270%27,directives:%270%27,intel:%270%27),options:%27-O3+-std%3Dgnu%2B%2B11+-Wall+-Wextra+-fno-verbose-asm%27),l:%275%27,n:%270%27,o:%27%231+with+x86-64+gcc+5.4%27,t:%270%27)),k:27.94993695611732,l:%274%27,n:%270%27,o:%27%27,s:0,t:%270%27)),l:%272%27,n:%270%27,o:%27%27,t:%270%27)),version:4"" rel=""noreferrer"">Godbolt compiler explorer</a>), it only uses shifts instructions</strong>. clang <code>-O0</code> does compile naively like you thought, even using 64-bit IDIV twice. (When optimizing, compilers do use both outputs of IDIV when the source does a division and modulus with the same operands, if they use IDIV at all)</p>
<p>GCC doesn't have a totally-naive mode; <a href=""https://stackoverflow.com/a/33284629/224132"">it always transforms through GIMPLE, which means some &quot;optimizations&quot; can't be disabled</a>.  This includes recognizing division-by-constant and using shifts (power of 2) or <a href=""https://stackoverflow.com/questions/41183935/why-does-gcc-use-multiplication-by-a-strange-number-in-implementing-integer-divi"">a fixed-point multiplicative inverse</a> (non power of 2) to avoid IDIV (see <code>div_by_13</code> in the above godbolt link).</p>
<p><code>gcc -Os</code> (optimize for size) <em>does</em> use IDIV for non-power-of-2 division,
unfortunately even in cases where the multiplicative inverse code is only slightly larger but much faster.</p>
<hr />
<h1>Helping the compiler</h1>
<p>(summary for this case: use <code>uint64_t n</code>)</p>
<p>First of all, it's only interesting to look at optimized compiler output.  (<code>-O3</code>).<br />
<strong><a href=""https://stackoverflow.com/a/32001196/224132""><code>-O0</code> speed is basically meaningless.</a></strong></p>
<p>Look at your asm output (on Godbolt, or see <a href=""https://stackoverflow.com/q/38552116/224132"">How to remove &quot;noise&quot; from GCC/clang assembly output?</a>).  When the compiler doesn't make optimal code in the first place: <strong>Writing your C/C++ source in a way that guides the compiler into making better code is usually the best approach</strong>.  You have to know asm, and know what's efficient, but you apply this knowledge indirectly.  Compilers are also a good source of ideas: sometimes clang will do something cool, and you can hand-hold gcc into doing the same thing: see <a href=""https://stackoverflow.com/a/34410357/224132"">this answer</a> and what I did with the non-unrolled loop in @Veedrac's code below.)</p>
<p>This approach is portable, and in 20 years some future compiler can compile it to whatever is efficient on future hardware (x86 or not), maybe using new ISA extension or auto-vectorizing.  Hand-written x86-64 asm from 15 years ago would usually not be optimally tuned for Skylake.  e.g. compare&amp;branch macro-fusion didn't exist back then.  <strong>What's optimal now for hand-crafted asm for one microarchitecture might not be optimal for other current and future CPUs.</strong>  <a href=""https://stackoverflow.com/questions/40354978/why-is-this-c-code-faster-than-my-hand-written-assembly-for-testing-the-collat#comment67966852_40356449"">Comments on @johnfound's answer</a> discuss major differences between AMD Bulldozer and Intel Haswell, which have a big effect on this code.  But in theory, <code>g++ -O3 -march=bdver3</code> and <code>g++ -O3 -march=skylake</code> will do the right thing.  (Or <code>-march=native</code>.)   Or <code>-mtune=...</code> to just tune, without using instructions that other CPUs might not support.</p>
<p>My feeling is that guiding the compiler to asm that's good for a current CPU you care about shouldn't be a problem for future compilers.  They're hopefully better than current compilers at finding ways to transform code, and can find a way that works for future CPUs.  Regardless, future x86 probably won't be terrible at anything that's good on current x86, and the future compiler will avoid any asm-specific pitfalls while implementing something like the data movement from your C source, if it doesn't see something better.</p>
<p>Hand-written asm is a black-box for the optimizer, so constant-propagation doesn't work when inlining makes an input a compile-time constant.  Other optimizations are also affected.  Read <a href=""https://gcc.gnu.org/wiki/DontUseInlineAsm"" rel=""noreferrer"">https://gcc.gnu.org/wiki/DontUseInlineAsm</a> before using asm.  (And avoid MSVC-style inline asm: inputs/outputs have to go through memory <a href=""https://stackoverflow.com/a/35959859/224132"">which adds overhead</a>.)</p>
<p><strong>In this case</strong>: your <code>n</code> has a signed type, and gcc uses the SAR/SHR/ADD sequence that gives the correct rounding.  (IDIV and arithmetic-shift &quot;round&quot; differently for negative inputs, see the <a href=""http://www.felixcloutier.com/x86/SAL:SAR:SHL:SHR.html"" rel=""noreferrer"">SAR insn set ref manual entry</a>).  (IDK if gcc tried and failed to prove that <code>n</code> can't be negative, or what.  Signed-overflow is undefined behaviour, so it should have been able to.)</p>
<p>You should have used <code>uint64_t n</code>, so it can just SHR.  And so it's portable to systems where <code>long</code> is only 32-bit (e.g. x86-64 Windows).</p>
<hr />
<p>BTW, <strong>gcc's <em>optimized</em> asm output looks pretty good (using <code>unsigned long n</code>)</strong>: the inner loop it inlines into <code>main()</code> does this:</p>
<pre><code> # from gcc5.4 -O3  plus my comments

 # edx= count=1
 # rax= uint64_t n

.L9:                   # do{
    lea    rcx, [rax+1+rax*2]   # rcx = 3*n + 1
    mov    rdi, rax
    shr    rdi         # rdi = n&gt;&gt;1;
    test   al, 1       # set flags based on n%2 (aka n&amp;1)
    mov    rax, rcx
    cmove  rax, rdi    # n= (n%2) ? 3*n+1 : n/2;
    add    edx, 1      # ++count;
    cmp    rax, 1
    jne   .L9          #}while(n!=1)

  cmp/branch to update max and maxi, and then do the next n
</code></pre>
<p>The inner loop is branchless, and the critical path of the loop-carried dependency chain is:</p>
<ul>
<li>3-component LEA (3 cycles)</li>
<li>cmov (2 cycles on Haswell, 1c on Broadwell or later).</li>
</ul>
<p><strong>Total: 5 cycle per iteration, latency bottleneck</strong>.  Out-of-order execution takes care of everything else in parallel with this (in theory: I haven't tested with perf counters to see if it really runs at 5c/iter).</p>
<p>The FLAGS input of <code>cmov</code> (produced by TEST) is faster to produce than the RAX input (from LEA-&gt;MOV), so it's not on the critical path.</p>
<p>Similarly, the MOV-&gt;SHR that produces CMOV's RDI input is off the critical path, because it's also faster than the LEA.  MOV on IvyBridge and later has zero latency (handled at register-rename time).  (It still takes a uop, and a slot in the pipeline, so it's not free, just zero latency).  The extra MOV in the LEA dep chain is part of the bottleneck on other CPUs.</p>
<p>The cmp/jne is also not part of the critical path: it's not loop-carried, because control dependencies are handled with branch prediction + speculative execution, unlike data dependencies on the critical path.</p>
<hr />
<h1>Beating the compiler</h1>
<p>GCC did a pretty good job here.  It could save one code byte by using <a href=""https://stackoverflow.com/a/36510865/224132""><code>inc edx</code> instead of <code>add edx, 1</code></a>, because nobody cares about P4 and its false-dependencies for partial-flag-modifying instructions.</p>
<p>It could also save all the MOV instructions, and the TEST:  SHR sets CF= the bit shifted out, so we can use <code>cmovc</code> instead of <code>test</code> / <code>cmovz</code>.</p>
<pre><code> ### Hand-optimized version of what gcc does
.L9:                       #do{
    lea     rcx, [rax+1+rax*2] # rcx = 3*n + 1
    shr     rax, 1         # n&gt;&gt;=1;    CF = n&amp;1 = n%2
    cmovc   rax, rcx       # n= (n&amp;1) ? 3*n+1 : n/2;
    inc     edx            # ++count;
    cmp     rax, 1
    jne     .L9            #}while(n!=1)
</code></pre>
<p>See @johnfound's answer for another clever trick: remove the CMP by branching on SHR's flag result as well as using it for CMOV:  zero only if n was 1 (or 0) to start with.  (Fun fact: <a href=""https://stackoverflow.com/a/36510865/224132"">SHR with count != 1 on Nehalem or earlier causes a stall if you read the flag results</a>.  That's how they made it single-uop.  The shift-by-1 special encoding is fine, though.)</p>
<p>Avoiding MOV doesn't help with the latency at all on Haswell (<a href=""https://stackoverflow.com/q/44169342"">Can x86&#39;s MOV really be &quot;free&quot;? Why can&#39;t I reproduce this at all?</a>).  It does help <em>significantly</em> on CPUs like Intel pre-IvB, and AMD Bulldozer-family, where MOV is not zero-latency (and Ice Lake with updated microcode).  The compiler's wasted MOV instructions do affect the critical path.  BD's complex-LEA and CMOV are both lower latency (2c and 1c respectively), so it's a bigger fraction of the latency.  Also, throughput bottlenecks become an issue, because it only has two integer ALU pipes.  <a href=""https://stackoverflow.com/questions/40354978/why-is-this-c-code-faster-than-assembly/40356449#40356449"">See @johnfound's answer</a>, where he has timing results from an AMD CPU.</p>
<p>Even on Haswell, this version may help a bit by avoiding some occasional delays where a non-critical uop steals an execution port from one on the critical path, delaying execution by 1 cycle.  (This is called a resource conflict).  It also saves a register, which may help when doing multiple <code>n</code> values in parallel in an interleaved loop (see below).</p>
<p><strong>LEA's latency depends on the addressing mode</strong>, on Intel SnB-family CPUs.  3c for 3 components (<code>[base+idx+const]</code>, which takes two separate adds), but only 1c with 2 or fewer components (one add).  Some CPUs (like Core2) do even a 3-component LEA in a single cycle, but SnB-family doesn't.  Worse, <a href=""https://stackoverflow.com/a/40212446/224132"">Intel SnB-family standardizes latencies so there are no 2c uops</a>, otherwise 3-component LEA would be only 2c like Bulldozer.  (3-component LEA is slower on AMD as well, just not by as much).</p>
<p>So <code>lea  rcx, [rax + rax*2]</code> / <code>inc rcx</code> is only 2c latency, faster than <code>lea  rcx, [rax + rax*2 + 1]</code>, on Intel SnB-family CPUs like Haswell.  Break-even on BD, and worse on Core2.  It does cost an extra uop, which normally isn't worth it to save 1c latency, but latency is the major bottleneck here and Haswell has a wide enough pipeline to handle the extra uop throughput.</p>
<p><strong>Neither gcc, icc, nor clang (on godbolt) used SHR's CF output, always using an AND or TEST</strong>.  Silly compilers. :P  They're great pieces of complex machinery, but a clever human can often beat them on small-scale problems.  (Given thousands to millions of times longer to think about it, of course!  Compilers don't use exhaustive algorithms to search for every possible way to do things, because that would take too long when optimizing a lot of inlined code, which is what they do best.  They also don't model the pipeline in the target microarchitecture, at least not in the same detail as <a href=""https://stackoverflow.com/questions/26021337/what-is-iaca-and-how-do-i-use-it"">IACA</a> or other static-analysis tools; they just use some heuristics.)</p>
<hr />
<p><strong>Simple loop unrolling won't help</strong>; this loop bottlenecks on the latency of a loop-carried dependency chain, not on loop overhead / throughput.  This means it would do well with hyperthreading (or any other kind of SMT), since the CPU has lots of time to interleave instructions from two threads.  This would mean parallelizing the loop in <code>main</code>, but that's fine because each thread can just check a range of <code>n</code> values and produce a pair of integers as a result.</p>
<p><strong>Interleaving by hand within a single thread might be viable, too</strong>.  Maybe compute the sequence for a pair of numbers in parallel, since each one only takes a couple registers, and they can all update the same <code>max</code> / <code>maxi</code>.  This creates more <a href=""https://en.wikipedia.org/wiki/Instruction-level_parallelism"" rel=""noreferrer"">instruction-level parallelism</a>.</p>
<p>The trick is deciding whether to wait until all the <code>n</code> values have reached <code>1</code> before getting another pair of starting <code>n</code> values, or whether to break out and get a new start point for just one that reached the end condition, without touching the registers for the other sequence.  Probably it's best to keep each chain working on useful data, otherwise you'd have to conditionally increment its counter.</p>
<hr />
<p>You could maybe even do this with SSE packed-compare stuff to conditionally increment the counter for vector elements where <code>n</code> hadn't reached <code>1</code> yet.  And then to hide the even longer latency of a SIMD conditional-increment implementation, you'd need to keep more vectors of <code>n</code> values up in the air.  Maybe only worth with 256b vector (4x <code>uint64_t</code>).</p>
<p>I think the best strategy to make detection of a <code>1</code> &quot;sticky&quot; is to mask the vector of all-ones that you add to increment the counter.  So after you've seen a <code>1</code> in an element, the increment-vector will have a zero, and +=0 is a no-op.</p>
<h3>Untested idea for manual vectorization</h3>
<pre><code># starting with YMM0 = [ n_d, n_c, n_b, n_a ]  (64-bit elements)
# ymm4 = _mm256_set1_epi64x(1):  increment vector
# ymm5 = all-zeros:  count vector

.inner_loop:
    vpaddq    ymm1, ymm0, xmm0
    vpaddq    ymm1, ymm1, xmm0
    vpaddq    ymm1, ymm1, set1_epi64(1)     # ymm1= 3*n + 1.  Maybe could do this more efficiently?

    vpsllq    ymm3, ymm0, 63                # shift bit 1 to the sign bit

    vpsrlq    ymm0, ymm0, 1                 # n /= 2

    # FP blend between integer insns may cost extra bypass latency, but integer blends don't have 1 bit controlling a whole qword.
    vpblendvpd ymm0, ymm0, ymm1, ymm3       # variable blend controlled by the sign bit of each 64-bit element.  I might have the source operands backwards, I always have to look this up.

    # ymm0 = updated n  in each element.

    vpcmpeqq ymm1, ymm0, set1_epi64(1)
    vpandn   ymm4, ymm1, ymm4         # zero out elements of ymm4 where the compare was true

    vpaddq   ymm5, ymm5, ymm4         # count++ in elements where n has never been == 1

    vptest   ymm4, ymm4
    jnz  .inner_loop
    # Fall through when all the n values have reached 1 at some point, and our increment vector is all-zero

    vextracti128 ymm0, ymm5, 1
    vpmaxq .... crap this doesn't exist
    # Actually just delay doing a horizontal max until the very very end.  But you need some way to record max and maxi.
</code></pre>
<p>You can and should implement this with intrinsics instead of hand-written asm.</p>
<hr />
<h2>Algorithmic / implementation improvement:</h2>
<p>Besides just implementing the same logic with more efficient asm, look for ways to simplify the logic, or avoid redundant work.  e.g. memoize to detect common endings to sequences. Or even better, look at 8 trailing bits at once (gnasher's answer)</p>
<p>@EOF points out that <code>tzcnt</code> (or <code>bsf</code>) could be used to do multiple <code>n/=2</code> iterations in one step. That's probably better than SIMD vectorizing; no SSE or AVX instruction can do that. It's still compatible with doing multiple scalar <code>n</code>s in parallel in different integer registers, though.</p>
<p>So the loop might look like this:</p>
<pre><code>goto loop_entry;  // C++ structured like the asm, for illustration only
do {
   n = n*3 + 1;
  loop_entry:
   shift = _tzcnt_u64(n);
   n &gt;&gt;= shift;
   count += shift;
} while(n != 1);
</code></pre>
<p>This may do significantly fewer iterations, but variable-count shifts are slow on Intel SnB-family CPUs without BMI2. 3 uops, 2c latency.  (They have an input dependency on the FLAGS because count=0 means the flags are unmodified. They handle this as a data dependency, and take multiple uops because a uop can only have 2 inputs (pre-HSW/BDW anyway)).  This is the kind that people complaining about x86's crazy-CISC design are referring to. It makes x86 CPUs slower than they would be if the ISA was designed from scratch today, even in a mostly-similar way.  (i.e. this is part of the &quot;x86 tax&quot; that costs speed / power.) SHRX/SHLX/SARX (BMI2) are a big win (1 uop / 1c latency).</p>
<p>It also puts tzcnt (3c on Haswell and later) on the critical path, so it significantly lengthens the total latency of the loop-carried dependency chain. It does remove any need for a CMOV, or for preparing a register holding <code>n&gt;&gt;1</code>, though. <strong>@Veedrac's answer overcomes all this by deferring the tzcnt/shift for multiple iterations, which is highly effective (see below).</strong></p>
<p>We can safely use <a href=""http://www.felixcloutier.com/x86/BSF.html"" rel=""noreferrer"">BSF</a> or <a href=""http://www.felixcloutier.com/x86/TZCNT.html"" rel=""noreferrer"">TZCNT</a> interchangeably, because <code>n</code> can never be zero at that point. TZCNT's machine-code decodes as BSF on CPUs that don't support BMI1. (Meaningless prefixes are ignored, so REP BSF runs as BSF).</p>
<p>TZCNT performs much better than BSF on AMD CPUs that support it,  so it can be a good idea to use <code>REP BSF</code>, even if you don't care about setting ZF if the input is zero rather than the output.  Some compilers do this when you use <code>__builtin_ctzll</code> even with <code>-mno-bmi</code>.</p>
<p>They perform the same on Intel CPUs, so just save the byte if that's all that matters. TZCNT on Intel (pre-Skylake) still has a false-dependency on the supposedly write-only output operand, just like BSF, to support the undocumented behaviour that BSF with input = 0 leaves its destination unmodified. So you need to work around that unless optimizing only for Skylake, so there's nothing to gain from the extra REP byte. (Intel often goes above and beyond what the x86 ISA manual requires, to avoid breaking widely-used code that depends on something it shouldn't, or that is retroactively disallowed. e.g. <a href=""http://blog.stuffedcow.net/2015/08/pagewalk-coherence/"" rel=""noreferrer"">Windows 9x's assumes no speculative prefetching of TLB entries</a>, which was safe when the code was written, <a href=""https://stackoverflow.com/questions/17395557/observing-stale-instruction-fetching-on-x86-with-self-modifying-code#comment68191467_18388700"">before Intel updated the TLB management rules</a>.)</p>
<p>Anyway, LZCNT/TZCNT on Haswell have the same false dep as POPCNT: see <a href=""https://stackoverflow.com/questions/25078285/replacing-a-32-bit-loop-count-variable-with-64-bit-introduces-crazy-performance"">this Q&amp;A</a>. This is why in gcc's asm output for @Veedrac's code, you see it <a href=""https://stackoverflow.com/a/33668295/224132"">breaking the dep chain with xor-zeroing</a> on the register it's about to use as TZCNT's destination when it doesn't use dst=src. Since TZCNT/LZCNT/POPCNT never leave their destination undefined or unmodified, this false dependency on the output on Intel CPUs is a performance bug / limitation. Presumably it's worth some transistors / power to have them behave like other uops that go to the same execution unit. The only perf upside is interaction with another uarch limitation: <a href=""https://stackoverflow.com/questions/26046634/micro-fusion-and-addressing-modes"">they can micro-fuse a memory operand with an indexed addressing mode</a> on Haswell, but on Skylake where Intel removed the false dep for LZCNT/TZCNT they &quot;un-laminate&quot; indexed addressing modes while POPCNT can still micro-fuse any addr mode.</p>
<hr />
<h1>Improvements to ideas / code from other answers:</h1>
<p><strong>@hidefromkgb's answer</strong> has a nice observation that you're guaranteed to be able to do one right shift after a 3n+1.  You can compute this more even more efficiently than just leaving out the checks between steps.  The asm implementation in that answer is broken, though (it depends on OF, which is undefined after SHRD with a count &gt; 1), and slow: <code>ROR rdi,2</code> is faster than <code>SHRD rdi,rdi,2</code>, and using two CMOV instructions on the critical path is slower than an extra TEST that can run in parallel.</p>
<p>I put tidied / improved C (which guides the compiler to produce better asm), and tested+working faster asm (in comments below the C) up on Godbolt: see the link in <a href=""https://stackoverflow.com/questions/40354978/why-is-this-c-code-faster-than-my-hand-written-assembly-for-testing-the-collat/40367384#40367384"">@hidefromkgb's answer</a>.  (This answer hit the 30k char limit from the large Godbolt URLs, but <a href=""https://meta.stackoverflow.com/questions/319549/how-are-we-supposed-to-post-godbolt-links-now-that-url-shortening-is-blocked/319594#319594"">shortlinks can rot</a> and were too long for goo.gl anyway.)</p>
<p>Also improved the output-printing to convert to a string and make one <code>write()</code> instead of writing one char at a time. This minimizes impact on timing the whole program with <code>perf stat ./collatz</code> (to record performance counters), and I de-obfuscated some of the non-critical asm.</p>
<hr />
<p><strong>@Veedrac's code</strong></p>
<p>I got a minor speedup from right-shifting as much as we <em>know</em> needs doing, and checking to continue the loop. From 7.5s for limit=1e8 down to 7.275s, on Core2Duo (Merom), with an unroll factor of 16.</p>
<p>code + comments <a href=""http://gcc.godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZTUAHAvVAOwGdK0AbVAV2J4OmAIIcAtiADkABmmk0Exnh6YA8mwDCCAIZtgmGfICUpDgOLIj0gPS2A1BIx4AZnkzoHAN0zEOrGwOqK4OAGqYnsS6yGDSHA5oWCAApLKi9omCxJhsBD5%2BAeyJqMqqmAkA7pg8PA6VhAgOwMjIaRmOAMoAMuoA6g5a6gAi2A59AJIAKgASg92iAHIA4g4QmAAeBNEOAFIAsgAKCXhBBAiYDliufg58TCbt7ZnXt/eMV6gVwWyXAEZ4YAOITABAEAC0HAQbnyjFuwGIAkYpAc%2Bi87B4AE87phdL4qhcgsg%2BCIHERgr5iK4%2BJUAHRPdKZXQ8Cwo86XAIGNSQgiYD7vBz8EQJAAC0OuiIkAGtgH84glecgEGw8ABHfiYBmiFIAJgAzKdifwsA4UnqtMgOAR8HkzdgnvrDTxjZczVpWFacroJHatULTkC2N6KowYhzrWaAEJaq26FjIQWnAgANgALAB9fKc4BqND8PKmvXDByyKMOByZPMFkJkoSMBUIRH8UFki4ONjscGvYg5Lzvdqx%2BOJvJpzMOWOYzzp07pgVm4ulvWR8uZAVoNj4FjFSq6BXEDWo/Lshy5dGhY9YHi6SfoSHQ1z5fvpQd4BPrq0OP6oVB1U6e/gSLk%2BTzg4rjMiIUYxgQcavsOBB6jqY4iOquTWBA/BJghY4bCYpoAOzRukDoGq4G6YKEACqiwAErqN03TpkMVFTMR1ynJcVG0fRjHqMxDi0MmK6OPmiK1J%2B2ICQ4wigbuvJWiADh4bS%2BoJHCxD8ZgAAcTi6KcArQK0ACsykoloJCYDqwz8Kgaz7H4pS4TqtKpssMwAF6PER%2Bqnm47TluW775BheRYfkCJIumARua6RYOJxdEMUxiwsUufn%2BZkyyIpUCR/NiugycgRDqbQsi2HqawgXwwA6hAJVlbhKTYDqKSaQAnC12m0LSeGpp%2BhAcLhuJKsCAgbvS6T%2BRWjgTAQ8rjroNxSaEhCJPozRZSelLYoQfgwdujQCPkqCUtSqANAY42iJNgVwaOR0nTS6YAgQCQgcm5XgutEVRZcABU/E9RW/GyIuhFXf5N3BSmGb3X4p2VJFeDRYWxa0BR9GFloboUnDj3PRwkETeljj6NijBnbcNY6lJCT5VaTAlBuhCBApGJ5eOAZqH1WaYAQKIWPUlzIGtzI0lJ%2BRJjZx5PtqRPllDd3tijDgbIT4Py5hiH5FWwGxaDWqTZU0JcxA2wag1BFpZNUOhQ4UrK6DQmJFeBg6VK3yVCQpJJJcDTnA4abgs9dsOCAthW8TDjdLivjjveLCu%2BgZ1BK4JB3HGfiXZN5ZJ/hYNpK1GsjjD3NqwXRfwVrduGg7ZZTQ4Fw8GpoFpyJP48AG9SNFJWB5K%2BzIlCo3w1sefx8MgUparqepsb8DjTNg1HppGvRaAA0hADWGVjRGyIXFUEdzytBLqgngmwZa2P9Y8BA4v3h3vBfl9nKTbwy%2B/%2BW4azB/OIFsBby4damh1NGWKUpDRlj%2BF6SeS58LFmrmwNoIDdSgOXK/HessP7lhPrFII/1yooNLqlPCwxcL12WIsCigxxzQV5IBPI4JNiMByBwIoF9d77xeOwOI%2BRU7EEMEePQgjLhrjWmBMSh1Wz/FQAQIgEgURokFjQ1QdRfieDJDZfgjB0AZxKPmYROQ2Tfkus8Rw2cW7EAgEmKS85ZCFmXHgN04UtGI2RmWFBKC8BkMrKUFQah/CgX4LUTE4I25iXOMIFEfx%2BDaxdkCJO3wVp/F0OgLEpjzHmIXkvFe6h16bzrpkYAMibKHT8LOb8jB0ynnLH%2BXkKTgihCgbiSeHDyxZOXqvDejxUqtPnlMReHTcldLLnvNp/TsmdPyT0zBYyBk5Lyd0/OjpKI0QSjxPidoHCpnfrMiZQypn51GX0uZkzFk7OOXshZIz97tPmcM6Z08fKuGIl/eK3EkpTELGMTS5zbmnOubswZVyHlHL%2Bfss5vSwXAqWXqJ5LyVlcUSrxZKXz%2BLNUheMoF9zDk3MxXcg5vy8X/JBbik54Ky7eSZs83pL5kDpl3CIYgBAIBvKRRs80IEBIol1DqMJdQgFEBstCUEPKIXq3MZkWl9LWF%2BGZc4ypP0UYgXAYg7lOpeVsFEvy0a%2BQEkcDYDwnSBBhqBX0AQUVAKlprBVQmMAYAQLytcZgbxjhApMPUnqg10h8i5F0GPcMME6UMtlaHCA5zrp%2BHUm6bGPK%2BV6ILJ6w1Eg4zDXlRzaK6CL7qpGTMpWvo9T2lio6n6lqgEeNitTf6xakaalgfXKYIx1AKWJPoIEcJWF4AkDWhs0k/ZNE2NsfKBxjhSTOG2GWz83BWM4GbehwEdTJlPnmjlsVjq4zOk6zyubJoTinDOfsyDkHTPMSkEh9RjaYAgDgrGq6Hobp%2BmKg22dMjDBqNedRmBfBBCgfoJUFQs7ZxtlXKEMJlbpiehhHgCd0yFTcrUK9YrzE4MLYW4sIGHxq3MWWo9aH44FJJugG0QJ7bSSTnPU4UjPzQKnl5Ei/F674A4H6rmx4OyhM1e3O4FSzQADEI6TRfTZFa7Bwx8kPKiMknbfaEko2PVAE8fC6CEGapwgIwQ4ypDSADhsL1rGQxp%2BGm687nKnbU/cc7cLZlzDqjxR6YVf1oAxtwNwcgFk9BnYAHgEh8NbNJGWV8/LDBshAPUWbIy0G6ShxzacqBCnyGtC%2BBb83DC6n5ELYWIv5uwI53%2BsUr1ZYi8A5cJ8QH0bWJ0SIDc8ASlKDKOU8RUScGqGQc9r4mjMh3JiBIeqHDUytHyE4M7cRnno2nJyW6/IzDROCBAP4vDHiUH424ks3ad13BIT8u51HFBbQYOaKprBOF5rN9AqQJpCkuPlLQ%2Bx1BhA0YzTcgRRbYmioiCTOQgSzZ4ERvTKCIsok894TufAXoNPnt0Q4jWvB4lQNVzuepwSLZEwWbo2AroUa9QkZAQh4wD1DOcA2u3QDA2svWCxDgZidD6LSeNBAQB6mQBAVHohcJsBAKmBMTO0e1UeHhLQSxSEoOu7diAOpHggNEMMYYKCbthD8i0ZAClaC8qYN5tOlPqcQx1fTxnzPWfs858znnp7%2BeLEFyA4XYRRfi5XtzzLE1IzDD6LYToa9ugKQZ5%2BTAwsLuDFl8rWgpOUS0DaBNKY0ITg5QqBCYWpIry8kQZiFEHZgQVEsId9c1JXwvRpxT6blQccJ9RJIeoAhvuClJJ0GY1FwR2i0Dx8nluocOElxg%2B%2B5yFYlzYIwHLuCiv8UtZ3scbBIqNmPgVwfmsxw0h/nlrNyZMt1olY4ZNKqgQRISAhIOK01DzZsp7fwQtfHlHUodRgMTR0SeYZ%2B1gQoCj%2BECFEi/0l3Bzw7HSDvSZFYEGUMrGfK1eN2we9Q4SxLUcFiwR8oQo1Ssf9GBS0dUitOV%2B9/9zVpkAsJo%2BghF55WwBBQR8hPYgkvA/hLgmAWBk0eAUR9FVBnZW0rhqsvdZE/B5dWg0VSc1d1INcacdYdcucWdsEQBDIExZcUEq9qIUEjc9QbdLdrcZdbt%2BMMkh8fUv1x8ksC1aBMMMlrYv8S4MB0AqllCQJ8tVDssGpSsStlx1Dj1ND/JFCuNKhZ9ix8sF1F8wZrD/JwC7DZ8G9dD9DcgQDP1cgNC3DsNQFUZ%2B90Ip8CATAUD8MaDXZSMAI/hm8etA5g4UkvBCFXtUBGEthqkRBQxoheQsQUQ%2B0JN/cmNAJzBgxWw4x548gahBhDgKJutuFvUTwO4u0gxeR2h29aMagv5SxGQV9sQSBARTgB4qpXwSiDoL9YDFN/Bc8JB%2BBhoD9SR1t5DroEDy0wjCEnCF9ENrCPC9jCtACjCotTDit%2B9HMFJEsosKVYUWRNQhiOYuRMAeQxNdDgh1IAi2AUQIgogYg5pRjPMgweB0kNdm04lbAFcHBBCo5udJD%2B9pCxd%2B9ZcIBZAJsjkjiStBITi9QG8r074HACFStCsFJCSst%2BJH0jkQjOV7i4U5Z/JT1pc%2BiqUnYrMRFuNd5xUnY%2Bhvw7V5Cv4KSV1UYAETNQhhStAqTw0IZI1MYY11UPC7FXBJQDMxZSiNhlYeV5TzQVYdSpS4hM1DSSVywcgCBBAiQbMrDJpmSI5mSnYjZyhTZ9xnUngSEp5HREFnQTQ3QrRUk8A/haQEBfR0hrFk1Thp14t%2BFkAUQlQlNfpfolNgBvAxTGSgMxxk1NSQJ9Y0zIidINhHFrS4JbYOiADYpaAtIc1rZOBARfgvAchGBSzdZUYgirUIAky2hVDhgxcdkGymzlY4xYd2z%2BFvBX5wtX5Bciy%2BF0IazgA6zU84CixHYGzMYFz%2Bz3FD1IwGzeccUXicxvcti9YAVMgABNAQVaIIemD4Wops2wamYgn3UkIaJoEeWbUkPQAmVpJkRTZ0S4JOfgf1cWEo6EYaXsZY74ckQgExUZHzCIkKKuPAP/TtQgMsRCzZfsxwZqWBcEcELxYzXpLQ%2BCpCZWZCDURBS9LxS1SaIU16AtfM1MzBZ%2BfMki65JizMtC2KQs3cl%2Bd01pW0xk/i2WK6P0kAFASRaNXU9i/U4BambUiSqUzMzDUzGdczICLdLDcSldKUnldBLMTmN4tcK06XdVaSjkstLSmS3S3dLwCjcMtgfsIsOSiy6y6cEfBy1BPyPMXWG9A06QI0vyh5Xi0QaQMwHgGQQyBQNnaQWgBQVAGQLGTc8cdPV0fUGK0gOnOQEKswKUenJSVMVqTSPCVqVMNMAqvUWgPCPCUgMK6QVMBQKQEqWQUgKK%2BQBgGQBQLgJqjK0wUgOAWAJARbE/cgbgY/fxFAOJPUVqJq9wKDQoSgP4YwBQJQOdTQLERa0gfAHIQqPAfEdapMGoRaswUgwILgaQHkdAecOc/gWzcLRzcEYYVldZZKecSScEPoUWBwN6gdHYcEVwSkL8EQcEdbT69QD6ZNKwYMosNAHIHUEK6q8KyK9auKvy1Kruf2DYTSZMcENMOIoEPUWkVqWkVq7qrK0gHKnUTSZyQyVMWgVqEqEqZMVqAqnUeG2qxGzKtq6QDqkALqw63qmARAMSsofxYaiAQasa4AZMFmma3kfwea9a5aoCVazEdaza73FgXajm/amqnq469gU686y6tga6zc2gXqN6j6r6rYH6v6vwAGt44G8EUGz6iQHgNyZAAscECQP4LtamL2n2xCr28034ecDgKUTEK8d2OGmqiK5qpGmQaeRzDUzG7G3qGE5MZSBQEmkwbK%2BnVMIm1MPCWQM2vUSakqzSVMBdVmuq0gBqkGOOjm5G7m3mzKnO1m2Ghu1qpu9Kw6swSkNhdnIAA"" rel=""noreferrer"">on Godbolt</a>. Don't use this version with clang; it does something silly with the defer-loop. Using a tmp counter <code>k</code> and then adding it to <code>count</code> later changes what clang does, but that <em>slightly</em> hurts gcc.</p>
<p>See discussion in comments: Veedrac's code is <em>excellent</em> on CPUs with BMI1 (i.e. not Celeron/Pentium)</p>
",224132,,224132,,10/31/2021 19:15,10/31/2021 19:15,,,,78,,,,CC BY-SA 4.0
55557758,2,,16476924,4/7/2019 10:03,,2058,,"<blockquote>
<h2>How to iterate over rows in a DataFrame in Pandas</h2>
</blockquote>
<h1>Answer: DON'T<sup>*</sup>!</h1>
<p>Iteration in Pandas is an anti-pattern and is something you should only do when you have exhausted every other option. You should not use any function with &quot;<code>iter</code>&quot; in its name for more than a few thousand rows or you will have to get used to a <strong>lot</strong> of waiting.</p>
<p>Do you want to print a DataFrame? Use <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_string.html"" rel=""noreferrer""><strong><code>DataFrame.to_string()</code></strong></a>.</p>
<p>Do you want to compute something? In that case, search for methods in this order (list modified from <a href=""https://stackoverflow.com/questions/24870953/does-iterrows-have-performance-issues"">here</a>):</p>
<ol>
<li>Vectorization</li>
<li><a href=""https://en.wikipedia.org/wiki/Cython"" rel=""noreferrer"">Cython</a> routines</li>
<li>List Comprehensions (vanilla <code>for</code> loop)</li>
<li><a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html"" rel=""noreferrer""><strong><code>DataFrame.apply()</code></strong></a>: i) ¬†Reductions that can be performed in Cython, ii) Iteration in Python space</li>
<li><a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.itertuples.html"" rel=""noreferrer""><strong><code>DataFrame.itertuples()</code></strong></a> and <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iteritems.html#pandas.DataFrame.iteritems"" rel=""noreferrer""><strong><code>iteritems()</code></strong></a></li>
<li><a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows"" rel=""noreferrer""><strong><code>DataFrame.iterrows()</code></strong></a></li>
</ol>
<p><code>iterrows</code> and <code>itertuples</code> (both receiving many votes in answers to this question) should be used in very rare circumstances, such as generating row objects/nametuples for sequential processing, which is really the only thing these functions are useful for.</p>
<p><strong>Appeal to Authority</strong></p>
<p><a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#iteration"" rel=""noreferrer"">The documentation page</a> on iteration has a huge red warning box that says:</p>
<blockquote>
<p>Iterating through pandas objects is generally slow. In many cases, iterating manually over the rows is not needed [...].</p>
</blockquote>
<p><sub>* It's actually a little more complicated than &quot;don't&quot;. <code>df.iterrows()</code> is the correct answer to this question, but &quot;vectorize your ops&quot; is the better one. I will concede that there are circumstances where iteration cannot be avoided (for example, some operations where the result depends on the value computed for the previous row). However, it takes some familiarity with the library to know when. If you're not sure whether you need an iterative solution, you probably don't. PS: To know more about my rationale for writing this answer, skip to the very bottom.</sub></p>
<hr />
<h2>Faster than Looping: <a href=""https://stackoverflow.com/questions/1422149/what-is-vectorization"">Vectorization</a>, <a href=""https://cython.org"" rel=""noreferrer"">Cython</a></h2>
<p>A good number of basic operations and computations are &quot;vectorised&quot; by pandas (either through NumPy, or through Cythonized functions). This includes arithmetic, comparisons, (most) reductions, reshaping (such as pivoting), joins, and groupby operations. Look through the documentation on <a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#essential-basic-functionality"" rel=""noreferrer"">Essential Basic Functionality</a> to find a suitable vectorised method for your problem.</p>
<p>If none exists, feel free to write your own using custom <a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/enhancingperf.html#cython-writing-c-extensions-for-pandas"" rel=""noreferrer"">Cython extensions</a>.</p>
<hr />
<h2>Next Best Thing: <a href=""https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"" rel=""noreferrer"">List Comprehensions</a><sup>*</sup></h2>
<p>List comprehensions should be your next port of call if 1) there is no vectorized solution available, 2) performance is important, but not important enough to go through the hassle of cythonizing your code, and 3) you're trying to perform elementwise transformation on your code. There is a <a href=""https://stackoverflow.com/questions/54028199/for-loops-with-pandas-when-should-i-care"">good amount of evidence</a> to suggest that list comprehensions are sufficiently fast (and even sometimes faster) for many common Pandas tasks.</p>
<p>The formula is simple,</p>
<pre><code># Iterating over one column - `f` is some function that processes your data
result = [f(x) for x in df['col']]
# Iterating over two columns, use `zip`
result = [f(x, y) for x, y in zip(df['col1'], df['col2'])]
# Iterating over multiple columns - same data type
result = [f(row[0], ..., row[n]) for row in df[['col1', ...,'coln']].to_numpy()]
# Iterating over multiple columns - differing data type
result = [f(row[0], ..., row[n]) for row in zip(df['col1'], ..., df['coln'])]
</code></pre>
<p>If you can encapsulate your business logic into a function, you can use a list comprehension that calls it. You can make arbitrarily complex things work through the simplicity and speed of raw Python code.</p>
<p><strong>Caveats</strong></p>
<p>List comprehensions assume that your data is easy to work with - what that means is your data types are consistent and you don't have NaNs, but this cannot always be guaranteed.</p>
<ol>
<li>The first one is more obvious, but when dealing with NaNs, prefer in-built pandas methods if they exist (because they have much better corner-case handling logic), or ensure your business logic includes appropriate NaN handling logic.</li>
<li>When dealing with mixed data types you should iterate over <code>zip(df['A'], df['B'], ...)</code> instead of <code>df[['A', 'B']].to_numpy()</code> as the latter implicitly upcasts data to the most common type. As an example if A is numeric and B is string, <code>to_numpy()</code> will cast the entire array to string, which may not be what you want. Fortunately <code>zip</code>ping your columns together is the most straightforward workaround to this.</li>
</ol>
<p><sub>*Your mileage may vary for the reasons outlined in the <strong>Caveats</strong> section above.</sub></p>
<hr />
<h2>An Obvious Example</h2>
<p>Let's demonstrate the difference with a simple example of adding two pandas columns <code>A + B</code>. This is a vectorizable operation, so it will be easy to contrast the performance of the methods discussed above.</p>
<img src=""https://i.stack.imgur.com/y44RJ.png"" width=""600"" />
<p><a href=""https://gist.github.com/Coldsp33d/948f96b384ca5bdf6e8ce203ac97c9a0"" rel=""noreferrer"">Benchmarking code, for your reference</a>. The line at the bottom measures a function written in numpandas, a style of Pandas that mixes heavily with NumPy to squeeze out maximum performance. Writing numpandas code should be avoided unless you know what you're doing. Stick to the API where you can (i.e., prefer <code>vec</code> over <code>vec_numpy</code>).</p>
<p>I should mention, however, that it isn't always this cut and dry. Sometimes the answer to &quot;what is the best method for an operation&quot; is &quot;it depends on your data&quot;. My advice is to test out different approaches on your data before settling on one.</p>
<hr />
<h2>My Personal Opinion <sup>*</sup></h2>
<p>Most of the analyses performed on the various alternatives to the iter family has been through the lens of performance. However, in most situations you will typically be working on a reasonably sized dataset (nothing beyond a few thousand or 100K rows) and performance will come second to simplicity/readability of the solution.</p>
<p>Here is my personal preference when selecting a method to use for a problem.</p>
<p>For the novice:</p>
<blockquote>
<p><em>Vectorization</em> (when possible)<em>; <code>apply()</code>; List Comprehensions; <code>itertuples()</code>/<code>iteritems()</code>; <code>iterrows()</code>; Cython</em></p>
</blockquote>
<p>For the more experienced:</p>
<blockquote>
<p><em>Vectorization</em> (when possible)<em>; <code>apply()</code>; List Comprehensions; Cython; <code>itertuples()</code>/<code>iteritems()</code>; <code>iterrows()</code></em></p>
</blockquote>
<p>Vectorization prevails as the most idiomatic method for any problem that can be vectorized. Always seek to vectorize! When in doubt, consult the docs, or look on Stack Overflow for an existing question on your particular task.</p>
<p>I do tend to go on about how bad <code>apply</code> is in a lot of my posts, but I do concede it is easier for a beginner to wrap their head around what it's doing. Additionally, there are quite a few use cases for <code>apply</code> has explained in <a href=""https://stackoverflow.com/questions/54432583/when-should-i-not-want-to-use-pandas-apply-in-my-code"">this post of mine</a>.</p>
<p>Cython ranks lower down on the list because it takes more time and effort to pull off correctly. You will usually never need to write code with pandas that demands this level of performance that even a list comprehension cannot satisfy.</p>
<p><sub>* As with any personal opinion, please take with heaps of salt!</sub></p>
<hr />
<h2>Further Reading</h2>
<ul>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html"" rel=""noreferrer"">10 Minutes to pandas</a>, and <a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html"" rel=""noreferrer"">Essential Basic Functionality</a> - Useful links that introduce you to Pandas and its library of vectorized*/cythonized functions.</p>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/enhancingperf.html"" rel=""noreferrer"">Enhancing Performance</a> - A primer from the documentation on enhancing standard Pandas operations</p>
</li>
<li><p><em><a href=""https://stackoverflow.com/questions/54028199/for-loops-with-pandas-when-should-i-care"">Are for-loops in pandas really bad? When should I care?</a></em> - a detailed write-up by me on list comprehensions and their suitability for various operations (mainly ones involving non-numeric data)</p>
</li>
<li><p><em><a href=""https://stackoverflow.com/questions/54432583/when-should-i-ever-want-to-use-pandas-apply-in-my-code"">When should I (not) want to use pandas apply() in my code?</a></em> - <code>apply</code> is slow (but not as slow as the <code>iter*</code> family. There are, however, situations where one can (or should) consider <code>apply</code> as a serious alternative, especially in some <code>GroupBy</code> operations).</p>
</li>
</ul>
<p><sub>* Pandas string methods are &quot;vectorized&quot; in the sense that they are specified on the series but operate on each element. The underlying mechanisms are still iterative, because string operations are inherently hard to vectorize.</sub></p>
<hr />
<h2>Why I Wrote this Answer</h2>
<p>A common trend I notice from new users is to ask questions of the form &quot;How can I iterate over my df to do X?&quot;. Showing code that calls <code>iterrows()</code> while doing something inside a <code>for</code> loop. Here is why. A new user to the library who has not been introduced to the concept of vectorization will likely envision the code that solves their problem as iterating over their data to do something. Not knowing how to iterate over a DataFrame, the first thing they do is Google it and end up here, at this question. They then see the accepted answer telling them how to, and they close their eyes and run this code without ever first questioning if iteration is the right thing to do.</p>
<p>The aim of this answer is to help new users understand that iteration is not necessarily the solution to every problem, and that better, faster and more idiomatic solutions could exist, and that it is worth investing time in exploring them. I'm not trying to start a war of iteration vs. vectorization, but I want new users to be informed when developing solutions to their problems with this library.</p>
",4909087,,63550,user17242583,9/19/2022 17:18,9/19/2022 17:18,,,,26,,,,CC BY-SA 4.0
1750435,1,1750453,,11/17/2009 17:26,,2055,923458,"<p>I know that Java enums are compiled to classes with private constructors and a bunch of public static members. When comparing two members of a given enum, I've always used <code>.equals()</code>, e.g.</p>

<pre><code>public useEnums(SomeEnum a)
{
    if(a.equals(SomeEnum.SOME_ENUM_VALUE))
    {
        ...
    }
    ...
}
</code></pre>

<p>However, I just came across some code that uses the equals operator <code>==</code> instead of .equals():</p>

<pre><code>public useEnums2(SomeEnum a)
{
    if(a == SomeEnum.SOME_ENUM_VALUE)
    {
        ...
    }
    ...
}
</code></pre>

<p>Which operator is the one I should be using?</p>
",139010,,139010,,11/9/2019 16:13,9/17/2021 7:15,Comparing Java enum members: == or equals()?,<java><enums>,15,3,345,,,CC BY-SA 3.0
10889873,6,,,6/4/2012 23:48,,2046,,"<p>Actions speak louder than words. You may look at my profile for the former in detail, but at least a few of the latter are necessary, so here's why I would be a good moderator:</p>

<h3>I have lots of time to moderate.</h3>

<p>I've visited Stack Overflow for 404 days out of less than 425 that I've been registered, with 270 of those days being consecutive. During the average of 3 hours daily I spend on Stack Overflow, I actively answer questions and seek out terrible questions to close and non-answers to delete, spam to clean up and misguided Facebook users to redirect.</p>

<h3>I make the right decisions.</h3>

<p>The only ""proof"" of this is 1234 helpful flags, 20 declined, all but one of which were long in the past. But I've never closed anything unfairly and I've never downvoted for any of the wrong reasons.</p>

<h3>I always prefer to clean up than erase.</h3>

<p>There's no feeling better than a huge edit!</p>

<h3>Whatever the outcome, I can still help without being a moderator.</h3>

<p>Anybody with more than 20,000 reputation gets access to a wide range of moderator tools, which I've used. Lots. <strong>But I'd like to make a bigger impact.</strong> Please consider me, and thank you Stack Overflow.</p>
",707111,,707111,,6/10/2012 23:19,6/10/2012 23:19,,,,31,,,6/4/2012 23:48,CC BY-SA 3.0
3180202,2,,3177733,7/5/2010 14:19,,2018,,"<p>The use of <em>scriptlets</em> (those <code>&lt;% %&gt;</code> things) in <a href=""https://stackoverflow.com/tags/jsp/info"">JSP</a> is indeed highly discouraged since the birth of <em>taglibs</em> (like <a href=""https://stackoverflow.com/tags/jstl/info"">JSTL</a>) and <a href=""https://stackoverflow.com/tags/el/info"">EL</a> (<a href=""https://stackoverflow.com/tags/el/info"">Expression Language</a>, those <code>${}</code> things) way back in 2001.</p>
<p>The major disadvantages of <em>scriptlets</em> are:</p>
<ol>
<li><strong>Reusability:</strong> you can't reuse scriptlets.</li>
<li><strong>Replaceability:</strong> you can't make scriptlets abstract.</li>
<li><strong>OO-ability:</strong> you can't make use of inheritance/composition.</li>
<li><strong>Debuggability:</strong> if scriptlet throws an exception halfway, all you get is a blank page.</li>
<li><strong>Testability:</strong> scriptlets are not unit-testable.</li>
<li><strong>Maintainability:</strong> per saldo more time is needed to maintain mingled/cluttered/duplicated code logic.</li>
</ol>
<p><strike>Sun</strike> Oracle itself also recommends in the <a href=""https://www.oracle.com/technical-resources/articles/javase/code-convention.html"" rel=""noreferrer"">JSP coding conventions</a> to avoid use of <em>scriptlets</em> whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:</p>
<blockquote>
<p>From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help <strong>reduce the need for JSP scriptlets</strong> in your pages. Pages that use JSTL are, in general, easier to read and maintain.</p>
<p>...</p>
<p>Where possible, <strong>avoid JSP scriptlets</strong> whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but de-emphasizes the use of scriptlets).</p>
<p>...</p>
<p>In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic, <strong>JSP scriptlets should not be used</strong> for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called &quot;value objects&quot;) returned from processing the client's requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.</p>
</blockquote>
<hr />
<p><strong>How to replace <em>scriptlets</em> entirely depends on the sole purpose of the code/logic. More than often this code is to be placed in a fullworthy Java class:</strong></p>
<ul>
<li><p>If you want to invoke the <strong>same</strong> Java code on <em>every</em> request, less-or-more regardless of the requested page, e.g. checking if a user is logged in, then implement a <a href=""https://stackoverflow.com/tags/servlet-filters/info"">filter</a> and write code accordingly in <a href=""https://jakarta.ee/specifications/platform/9/apidocs/jakarta/servlet/filter#doFilter-jakarta.servlet.ServletRequest-jakarta.servlet.ServletResponse-jakarta.servlet.FilterChain-"" rel=""noreferrer""><code>doFilter()</code></a> method. E.g.:</p>
  <pre class=""lang-java prettyprint-override""><code>  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {
      if (((HttpServletRequest) request).getSession().getAttribute(&quot;user&quot;) == null) {
          ((HttpServletResponse) response).sendRedirect(&quot;login&quot;); // Not logged in, redirect to login page.
      } else {
          chain.doFilter(request, response); // Logged in, just continue request.
      }
  }
</code></pre>
<p>When mapped on an appropriate <code>&lt;url-pattern&gt;</code> covering the JSP pages of interest, then you don't need to copypaste the same piece of code overall JSP pages.</p>
<hr />
</li>
<li><p>If you want to invoke some Java code to <strong>process a GET request</strong>, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a <a href=""https://stackoverflow.com/tags/servlets/info"">servlet</a> and write code accordingly in <a href=""https://jakarta.ee/specifications/platform/9/apidocs/jakarta/servlet/http/httpservlet#doGet-jakarta.servlet.http.HttpServletRequest-jakarta.servlet.http.HttpServletResponse-"" rel=""noreferrer""><code>doGet()</code></a> method. E.g.:</p>
  <pre class=""lang-java prettyprint-override""><code>  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      try {
          List&lt;Product&gt; products = productService.list(); // Obtain all products.
          request.setAttribute(&quot;products&quot;, products); // Store products in request scope.
          request.getRequestDispatcher(&quot;/WEB-INF/products.jsp&quot;).forward(request, response); // Forward to JSP page to display them in a HTML table.
      } catch (SQLException e) {
          throw new ServletException(&quot;Retrieving products failed!&quot;, e);
      }
  }
</code></pre>
<p>This way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an <code>&lt;error-page&gt;</code> in <code>web.xml</code>.</p>
<hr />
</li>
<li><p>If you want to invoke some Java code to <strong>process a POST request</strong>, such as gathering data from a submitted HTML form and doing some business stuff with it (conversion, validation, saving in DB, etcetera), then implement a <a href=""https://stackoverflow.com/tags/servlets/info"">servlet</a> and write code accordingly in <a href=""https://jakarta.ee/specifications/platform/9/apidocs/jakarta/servlet/http/httpservlet#doPost-jakarta.servlet.http.HttpServletRequest-jakarta.servlet.http.HttpServletResponse-"" rel=""noreferrer""><code>doPost()</code></a> method. E.g.:</p>
  <pre class=""lang-java prettyprint-override""><code>  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      String username = request.getParameter(&quot;username&quot;);
      String password = request.getParameter(&quot;password&quot;);
      User user = userService.find(username, password);

      if (user != null) {
          request.getSession().setAttribute(&quot;user&quot;, user); // Login user.
          response.sendRedirect(&quot;home&quot;); // Redirect to home page.
      } else {
          request.setAttribute(&quot;message&quot;, &quot;Unknown username/password. Please retry.&quot;); // Store error message in request scope.
          request.getRequestDispatcher(&quot;/WEB-INF/login.jsp&quot;).forward(request, response); // Forward to JSP page to redisplay login form with error.
      }
  }
</code></pre>
<p>This way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using <code>${message}</code> in <a href=""https://stackoverflow.com/tags/el/info"">EL</a>), or just taking to the desired target page in case of success.</p>
<hr />
</li>
<li><p>If you want to invoke some Java code to <strong>control</strong> the execution plan and/or the destination of the request and the response, then implement a <a href=""https://stackoverflow.com/tags/servlets/info"">servlet</a> according to the <a href=""https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297"">MVC's Front Controller Pattern</a>. E.g.:</p>
  <pre class=""lang-java prettyprint-override""><code>  protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      try {
          Action action = ActionFactory.getAction(request);
          String view = action.execute(request, response);

          if (view.equals(request.getPathInfo().substring(1)) {
              request.getRequestDispatcher(&quot;/WEB-INF/&quot; + view + &quot;.jsp&quot;).forward(request, response);
          } else {
              response.sendRedirect(view);
          }
      } catch (Exception e) {
          throw new ServletException(&quot;Executing action failed.&quot;, e);
      }
  }
</code></pre>
<p>Or just adopt an MVC framework like <a href=""https://stackoverflow.com/tags/jsf/info"">JSF</a>, <a href=""https://stackoverflow.com/tags/spring-mvc/info"">Spring MVC</a>, <a href=""https://stackoverflow.com/tags/wicket/info"">Wicket</a>, etc so that you end up with just a JSP/Facelets page and a JavaBean class without the need for a custom servlet.</p>
<hr />
</li>
<li><p>If you want to invoke some Java code to <strong>control the flow</strong> inside a JSP page, then you need to grab an (existing) flow control taglib like <a href=""https://jakarta.ee/specifications/tags/1.2/tagdocs/c/tld-summary.html"" rel=""noreferrer"">JSTL core</a>. E.g. displaying <code>List&lt;Product&gt;</code> in a table:</p>
  <pre class=""lang-html prettyprint-override""><code>  &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;
  ...
  &lt;table&gt;
      &lt;c:forEach items=&quot;${products}&quot; var=&quot;product&quot;&gt;
          &lt;tr&gt;
              &lt;td&gt;${product.name}&lt;/td&gt;
              &lt;td&gt;${product.description}&lt;/td&gt;
              &lt;td&gt;${product.price}&lt;/td&gt;
          &lt;/tr&gt;
      &lt;/c:forEach&gt;
  &lt;/table&gt;
</code></pre>
<p>With XML-style tags which fit nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces (<em>&quot;Where the heck does this closing brace belong to?&quot;</em>). An easy aid is to configure your web application to throw an exception whenever <em>scriptlets</em> are still been used by adding the following piece to <code>web.xml</code>:</p>
  <pre class=""lang-xml prettyprint-override""><code>  &lt;jsp-config&gt;
      &lt;jsp-property-group&gt;
          &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;
          &lt;scripting-invalid&gt;true&lt;/scripting-invalid&gt;
      &lt;/jsp-property-group&gt;
  &lt;/jsp-config&gt;
</code></pre>
<p>In <a href=""https://stackoverflow.com/tags/facelets/info"">Facelets</a>, the successor of JSP, which is part of the Java EE provided MVC framework <a href=""https://stackoverflow.com/tags/jsf/info"">JSF</a>, it is already <strong>not</strong> possible to use <em>scriptlets</em>. This way you're automatically forced to do things &quot;the right way&quot;.</p>
<hr />
</li>
<li><p>If you want to invoke some Java code to <strong>access and display</strong> &quot;backend&quot; data inside a JSP page, then you need to use EL (Expression Language), those <code>${}</code> things. E.g. redisplaying submitted input values:</p>
  <pre class=""lang-html prettyprint-override""><code>  &lt;input type=&quot;text&quot; name=&quot;foo&quot; value=&quot;${param.foo}&quot; /&gt;
</code></pre>
<p>The <code>${param.foo}</code> displays the outcome of <code>request.getParameter(&quot;foo&quot;)</code>.</p>
<hr />
</li>
<li><p>If you want to invoke some <strong>utility</strong> Java code directly in the JSP page (typically <code>public static</code> methods), then you need to define them as EL functions. There's a standard <a href=""https://jakarta.ee/specifications/tags/1.2/tagdocs/fn/tld-summary.html"" rel=""noreferrer"">functions taglib</a> in JSTL, but <a href=""https://stackoverflow.com/questions/6395621/how-to-call-a-static-method-in-jsp-el"">you can also easily create functions yourself</a>. Here's an example how JSTL <code>fn:escapeXml</code> is useful to prevent <a href=""https://en.wikipedia.org/wiki/Cross-site_scripting"" rel=""noreferrer"">XSS attacks</a>.</p>
  <pre class=""lang-html prettyprint-override""><code>  &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; prefix=&quot;fn&quot; %&gt;
  ...
  &lt;input type=&quot;text&quot; name=&quot;foo&quot; value=&quot;${fn:escapeXml(param.foo)}&quot; /&gt;
</code></pre>
<p>Note that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in <strong>every</strong> web application you develop. The problem of <em>scriptlets</em> is that it provides no way of builtin preventions, at least not using the standard Java API. JSP's successor Facelets has already implicit HTML escaping, so you don't need to worry about XSS holes in Facelets.</p>
</li>
</ul>
<h3>See also:</h3>
<ul>
<li><a href=""https://stackoverflow.com/questions/2095397/what-is-the-difference-between-jsf-servlet-and-jsp/2097732#2097732"">What's the difference between JSP, Servlet and JSF?</a></li>
<li><a href=""https://stackoverflow.com/questions/3106452/java-servlet-instantiation-and-session-variables/3106909#3106909"">How does Servlet, ServletContext, HttpSession and HttpServletRequest/Response work?</a></li>
<li><a href=""https://stackoverflow.com/questions/5003142/jsp-using-mvc-and-jdbc"">Basic MVC example with JSP, Servlet and JDBC</a></li>
<li><a href=""https://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/"">Design patterns in Java web applications</a></li>
<li><a href=""https://balusc.omnifaces.org/2010/01/hidden-features-of-jspservlet.html"" rel=""noreferrer"">Hidden features of JSP/Servlet</a></li>
</ul>
",157882,,157882,,6/6/2022 12:00,6/6/2022 12:00,,,,4,,,,CC BY-SA 4.0
7325306,2,,7325278,9/6/2011 19:46,,1999,,"<p>Absolutely - you basically want:</p>

<pre><code>var results = from p in persons
              group p.car by p.PersonId into g
              select new { PersonId = g.Key, Cars = g.ToList() };
</code></pre>

<p>Or as a non-query expression:</p>

<pre><code>var results = persons.GroupBy(
    p =&gt; p.PersonId, 
    p =&gt; p.car,
    (key, g) =&gt; new { PersonId = key, Cars = g.ToList() });
</code></pre>

<p>Basically the contents of the group (when viewed as an <code>IEnumerable&lt;T&gt;</code>) is a sequence of whatever values were in the projection (<code>p.car</code> in this case) present for the given key.</p>

<p>For more on how <code>GroupBy</code> works, see my <a href=""http://codeblog.jonskeet.uk/2011/01/01/reimplementing-linq-to-objects-part-21-groupby/"" rel=""noreferrer"">Edulinq post on the topic</a>.</p>

<p>(I've renamed <code>PersonID</code> to <code>PersonId</code> in the above, to follow <a href=""https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions"" rel=""noreferrer"">.NET naming conventions</a>.)</p>

<p>Alternatively, you could use a <code>Lookup</code>:</p>

<pre><code>var carsByPersonId = persons.ToLookup(p =&gt; p.PersonId, p =&gt; p.car);
</code></pre>

<p>You can then get the cars for each person very easily:</p>

<pre><code>// This will be an empty sequence for any personId not in the lookup
var carsForPerson = carsByPersonId[personId];
</code></pre>
",22656,,3739391,,4/6/2020 15:26,4/6/2020 15:26,,,,10,,,,CC BY-SA 4.0
3577662,2,,3577641,8/26/2010 17:19,,1987,,"<h2>Native XML Extensions</h2>
<p>I prefer using one of the <a href=""https://php.net/manual/en/refs.xml.php"" rel=""noreferrer"">native XML extensions</a> since they come bundled with PHP, are usually faster than all the 3rd party libs and give me all the control I need over the markup.</p>
<h3><a href=""https://php.net/manual/en/book.dom.php"" rel=""noreferrer"">DOM</a></h3>
<blockquote>
<p>The DOM extension allows you to operate on XML documents through the DOM API with PHP 5. It is an implementation of the W3C's Document Object Model Core Level 3, a platform- and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure and style of documents.</p>
</blockquote>
<p>DOM is capable of parsing and modifying real world (broken) HTML and it can do <a href=""http://schlitt.info/opensource/blog/0704_xpath.html"" rel=""noreferrer"">XPath queries</a>. It is based on <a href=""http://xmlsoft.org/html/libxml-HTMLparser.html"" rel=""noreferrer"">libxml</a>.</p>
<p>It takes some time to get productive with DOM, but that time is well worth it IMO. Since DOM is a language-agnostic interface, you'll find implementations in many languages, so if you need to change your programming language, chances are you will already know how to use that language's DOM API then.</p>
<p>How to use the DOM extension has been <a href=""https://stackoverflow.com/search?q=DOM+HTML+%5BPHP%5D&amp;submit=search"">covered extensively</a> on StackOverflow, so if you choose to use it, you can be sure most of the issues you run into can be solved by searching/browsing Stack Overflow.</p>
<p>A <a href=""https://stackoverflow.com/a/3820783"">basic usage example</a> and a <a href=""https://stackoverflow.com/a/4983721"">general conceptual overview</a> are available in other answers.</p>
<h3><a href=""https://php.net/manual/en/book.xmlreader.php"" rel=""noreferrer"">XMLReader</a></h3>
<blockquote>
<p>The XMLReader extension is an XML pull parser. The reader acts as a cursor going forward on the document stream and stopping at each node on the way.</p>
</blockquote>
<p>XMLReader, like DOM, is based on libxml. I am not aware of how to trigger the HTML Parser Module, so chances are using XMLReader for parsing broken HTML might be less robust than using DOM where you can explicitly tell it to use libxml's HTML Parser Module.</p>
<p>A <a href=""https://stackoverflow.com/a/3299140"">basic usage example</a> is available in another answer.</p>
<h3><a href=""https://php.net/manual/en/book.xml.php"" rel=""noreferrer"">XML Parser</a></h3>
<blockquote>
<p>This extension lets you create XML parsers and then define handlers for different XML events. Each XML parser also has a few parameters you can adjust.</p>
</blockquote>
<p>The XML Parser library is also based on libxml, and implements a <a href=""http://en.wikipedia.org/wiki/Simple_API_for_XML"" rel=""noreferrer"">SAX</a> style XML push parser. It may be a better choice for memory management than DOM or SimpleXML, but will be more difficult to work with than the pull parser implemented by XMLReader.</p>
<h3><a href=""https://php.net/manual/en/book.simplexml.php"" rel=""noreferrer"">SimpleXml</a></h3>
<blockquote>
<p>The SimpleXML extension provides a very simple and easily usable toolset to convert XML to an object that can be processed with normal property selectors and array iterators.</p>
</blockquote>
<p>SimpleXML is an option when you know the HTML is valid XHTML. If you need to parse broken HTML, don't even consider SimpleXml because it will choke.</p>
<p>A <a href=""https://stackoverflow.com/a/4906459"">basic usage example</a> is available, and there are <a href=""https://php.net/manual/en/simplexml.examples-basic.php"" rel=""noreferrer"">lots of additional examples in the PHP Manual</a>.</p>
<hr />
<h2>3rd Party Libraries (libxml based)</h2>
<p>If you prefer to use a 3rd-party lib, I'd suggest using a lib that actually uses <a href=""http://php.net/manual/en/book.dom.php"" rel=""noreferrer"">DOM</a>/<a href=""http://xmlsoft.org/"" rel=""noreferrer"">libxml</a> underneath instead of string parsing.</p>
<h3><a href=""https://github.com/ThomasWeinert/FluentDOM"" rel=""noreferrer"">FluentDom</a></h3>
<blockquote>
<p>FluentDOM provides a jQuery-like fluent XML interface for the DOMDocument in PHP. Selectors are written in XPath or CSS (using a CSS to XPath converter). Current versions extend the DOM implementing standard interfaces and add features from the DOM Living Standard. FluentDOM can load formats like JSON, CSV, JsonML, RabbitFish and others. Can be installed via Composer.</p>
</blockquote>
<h3><a href=""https://github.com/wasinger/htmlpagedom"" rel=""noreferrer"">HtmlPageDom</a></h3>
<blockquote>
<p><code>Wa72\HtmlPageDom</code> is a PHP library for easy manipulation of HTML
documents using DOM. It requires <a href=""https://github.com/symfony/DomCrawler"" rel=""noreferrer"">DomCrawler from Symfony2
components</a> for traversing
the DOM tree and extends it by adding methods for manipulating the
DOM tree of HTML documents.</p>
</blockquote>
<h3><a href=""https://github.com/electrolinux/phpquery"" rel=""noreferrer"">phpQuery</a></h3>
<blockquote>
<p>phpQuery is a server-side, chainable, CSS3 selector driven Document Object Model (DOM) API based on jQuery JavaScript Library.
The library is written in PHP5 and provides additional Command Line Interface (CLI).</p>
</blockquote>
<p>This is described as &quot;abandonware and buggy: use at your own risk&quot; but does appear to be minimally maintained.</p>
<h3><a href=""https://docs.laminas.dev/laminas-dom/"" rel=""noreferrer"">laminas-dom</a></h3>
<blockquote>
<p>The Laminas\Dom component (formerly Zend_DOM) provides tools for working with DOM documents and structures. Currently, we offer <code>Laminas\Dom\Query</code>, which provides a unified interface for querying DOM documents utilizing both XPath and CSS selectors.</p>
<p>This package is considered feature-complete, and is now in security-only maintenance mode.</p>
</blockquote>
<h3><a href=""http://github.com/theseer/fDOMDocument"" rel=""noreferrer"">fDOMDocument</a></h3>
<blockquote>
<p>fDOMDocument extends the standard DOM to use exceptions at all occasions of errors instead of PHP warnings or notices. They also add various custom methods and shortcuts for convenience and to simplify the usage of DOM.</p>
</blockquote>
<h3><a href=""http://sabre.io/xml/"" rel=""noreferrer"">sabre/xml</a></h3>
<blockquote>
<p>sabre/xml is a library that wraps and extends the XMLReader and XMLWriter classes to create a simple &quot;xml to object/array&quot; mapping system and design pattern. Writing and reading XML is single-pass and can therefore be fast and require low memory on large xml files.</p>
</blockquote>
<h3><a href=""https://github.com/servo-php/fluidxml"" rel=""noreferrer"">FluidXML</a></h3>
<blockquote>
<p>FluidXML is a PHP library for manipulating XML with a concise and fluent API.
It leverages XPath and the fluent programming pattern to be fun and effective.</p>
</blockquote>
<hr />
<h2>3rd-Party (not libxml-based)</h2>
<p>The benefit of building upon DOM/libxml is that you get good performance out of the box because you are based on a native extension. However, not all 3rd-party libs go down this route. Some of them listed below</p>
<h3><a href=""https://simplehtmldom.sourceforge.io/docs/1.9/index.html"" rel=""noreferrer"">PHP Simple HTML DOM Parser</a></h3>
<blockquote>
<ul>
<li>An HTML DOM parser written in PHP5+ lets you manipulate HTML in a very easy way!</li>
<li>Require PHP 5+.</li>
<li>Supports invalid HTML.</li>
<li>Find tags on an HTML page with selectors just like jQuery.</li>
<li>Extract contents from HTML in a single line.</li>
</ul>
</blockquote>
<p>I generally do not recommend this parser. The codebase is horrible and the parser itself is rather slow and memory hungry. Not all jQuery Selectors (such as <a href=""https://api.jquery.com/child-selector/"" rel=""noreferrer"">child selectors</a>) are possible. Any of the libxml based libraries should outperform this easily.</p>
<h3><a href=""https://github.com/paquettg/php-html-parser"" rel=""noreferrer"">PHP Html Parser</a></h3>
<blockquote>
<p>PHPHtmlParser is a simple, flexible, html parser which allows you to select tags using any css selector, like jQuery. The goal is to assiste in the development of tools which require a quick, easy way to scrape html, whether it's valid or not! This project was original supported by sunra/php-simple-html-dom-parser but the support seems to have stopped so this project is my adaptation of his previous work.</p>
</blockquote>
<p>Again, I would not recommend this parser. It is rather slow with high CPU usage. There is also no function to clear memory of created DOM objects. These problems scale particularly with nested loops. The documentation itself is inaccurate and misspelled, with no responses to fixes since 14 Apr 16.</p>
<hr />
<h2>HTML 5</h2>
<p>You can use the above for parsing HTML5, but <a href=""https://stackoverflow.com/q/4029341"">there can be quirks</a> due to the markup HTML5 allows. So for HTML5 you may want to consider using a dedicated parser. Note that these are written in PHP, so suffer from slower performance and increased memory usage compared to a compiled extension in a lower-level language.</p>
<h3><a href=""https://github.com/ivopetkov/html5-dom-document-php/"" rel=""noreferrer"">HTML5DomDocument</a></h3>
<blockquote>
<p>HTML5DOMDocument extends the native DOMDocument library. It fixes some bugs and adds some new functionality.</p>
<ul>
<li>Preserves html entities (DOMDocument does not)</li>
<li>Preserves void tags (DOMDocument does not)</li>
<li>Allows inserting HTML code that moves the correct parts to their proper places (head elements are inserted in the head, body elements in the body)</li>
<li>Allows querying the DOM with CSS selectors (currently available: <code>*</code>, <code>tagname</code>, <code>tagname#id</code>, <code>#id</code>, <code>tagname.classname</code>, <code>.classname</code>, <code>tagname.classname.classname2</code>, <code>.classname.classname2</code>, <code>tagname[attribute-selector]</code>, <code>[attribute-selector]</code>, <code>div, p</code>, <code>div p</code>, <code>div &gt; p</code>, <code>div + p</code>, and <code>p ~ ul</code>.)</li>
<li>Adds support for element-&gt;classList.</li>
<li>Adds support for element-&gt;innerHTML.</li>
<li>Adds support for element-&gt;outerHTML.</li>
</ul>
</blockquote>
<h3><a href=""https://github.com/Masterminds/html5-php"" rel=""noreferrer"">HTML5</a></h3>
<blockquote>
<p>HTML5 is a standards-compliant HTML5 parser and writer written entirely in PHP. It is stable and used in many production websites, and has well over five million downloads.</p>
<p>HTML5 provides the following features.</p>
</blockquote>
<blockquote>
<ul>
<li>An HTML5 serializer</li>
<li>Support for PHP namespaces</li>
<li>Composer support</li>
<li>Event-based (SAX-like) parser</li>
<li>A DOM tree builder</li>
<li>Interoperability with QueryPath</li>
<li>Runs on PHP 5.3.0 or newer</li>
</ul>
</blockquote>
<hr />
<h2>Regular Expressions</h2>
<p>Last and <strong>least recommended</strong>, you can extract data from HTML with <a href=""https://stackoverflow.com/search?q=regular%20expression%20tutorials"">regular expressions</a>. In general using Regular Expressions on HTML is discouraged.</p>
<p>Most of the snippets you will find on the web to match markup are brittle. In most cases they are only working for a very particular piece of HTML. Tiny markup changes, like adding whitespace somewhere, or adding, or changing attributes in a tag, can make the RegEx fails when it's not properly written. You should know what you are doing before using RegEx on HTML.</p>
<p>HTML parsers already know the syntactical rules of HTML. Regular expressions have to be taught for each new RegEx you write. RegEx are fine in some cases, but it really depends on your use-case.</p>
<p>You <a href=""https://stackoverflow.com/a/4234491"">can write more reliable parsers</a>, but writing a <em>complete and reliable</em> custom parser with regular expressions is a waste of time when the aforementioned libraries already exist and do a much better job on this.</p>
<p>Also see <a href=""http://www.codinghorror.com/blog/2009/11/parsing-html-the-cthulhu-way.html"" rel=""noreferrer"">Parsing Html The Cthulhu Way</a></p>
<hr />
<h2>Books</h2>
<p>If you want to spend some money, have a look at</p>
<ul>
<li><a href=""http://www.phparch.com/books/phparchitects-guide-to-web-scraping-with-php"" rel=""noreferrer"">PHP Architect's Guide to Webscraping with PHP</a></li>
</ul>
<p>I am not affiliated with PHP Architect or the authors.</p>
",208809,,8398549,,5/23/2022 6:45,5/23/2022 6:45,,,,15,,,,CC BY-SA 4.0
4009032,2,,4009013,10/24/2010 16:09,,1969,,"<p>Like this:</p>

<pre><code>public Sample(string str) : this(int.Parse(str)) { }
</code></pre>
",34397,,3800096,,8/20/2019 18:13,8/20/2019 18:13,,,,14,,,,CC BY-SA 4.0
37365955,2,,37364973,5/21/2016 17:19,,1960,,"<p><strong>Promise</strong></p>
<p>A <code>Promise</code> handles a <strong>single event</strong> when an async operation completes or fails.</p>
<p>Note: There are <code>Promise</code> libraries out there that support cancellation, but ES6 <code>Promise</code> doesn't so far.</p>
<p><strong>Observable</strong></p>
<p>An <code>Observable</code> is like a <strong><code>Stream</code></strong> (in many languages) and allows to pass zero or more events where the callback is called for each event.</p>
<p>Often <code>Observable</code> is preferred over <code>Promise</code> because it provides the features of <code>Promise</code> and more. With <code>Observable</code> it doesn't matter if you want to handle 0, 1, or multiple events. You can utilize the same API in each case.</p>
<p><code>Observable</code> also has the advantage over <code>Promise</code> to be <strong>cancellable</strong>. If the result of an HTTP request to a server or some other expensive async operation isn't needed anymore, the <code>Subscription</code> of an <code>Observable</code> allows to cancel the subscription, while a <code>Promise</code> will eventually call the success or failed callback even when you don't need the notification or the result it provides anymore.</p>
<p>While a <code>Promise</code> starts immediately, an <code>Observable</code> only starts if you subscribe to it. This is why Observables are called lazy.</p>
<p>Observable provides <strong>operators</strong> like <code>map</code>, <code>forEach</code>, <code>reduce</code>, ... similar to an array</p>
<p>There are also powerful operators like <code>retry()</code>, or <code>replay()</code>, ... that are often quite handy.
<a href=""https://rxjs-dev.firebaseapp.com/guide/operators"" rel=""noreferrer"">A list of operators shipped with rxjs</a></p>
<p>Lazy execution allows to build up a chain of operators before the observable is executed by subscribing, to do a more declarative kind of programming.</p>
",217408,,217408,,11/3/2020 18:00,11/3/2020 18:00,,,,29,,,,CC BY-SA 4.0
3106909,2,,3106452,6/24/2010 2:41,,1930,,"<h2><code>ServletContext</code></h2>
<p>When the servlet container (like <a href=""http://tomcat.apache.org"" rel=""noreferrer"">Apache Tomcat</a>) starts up, it will deploy and load all its web applications. When a web application is loaded, the servlet container creates the <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContext.html"" rel=""noreferrer""><code>ServletContext</code></a> once and keeps it in the server's memory. The web app's <code>web.xml</code> and all of included <code>web-fragment.xml</code> files is parsed, and each <code>&lt;servlet&gt;</code>, <code>&lt;filter&gt;</code> and <code>&lt;listener&gt;</code> found (or each class annotated with <code>@WebServlet</code>, <code>@WebFilter</code> and <code>@WebListener</code> respectively) will be instantiated once and be kept in the server's memory as well, registred via the <code>ServletContext</code>. For each instantiated filter, its <code>init()</code> method is invoked with a new <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/FilterConfig.html"" rel=""noreferrer""><code>FilterConfig</code></a> argument which in turn contains the involved <code>ServletContext</code>.</p>
<p>When a <code>Servlet</code> has a <code>&lt;servlet&gt;&lt;load-on-startup&gt;</code> or <code>@WebServlet(loadOnStartup)</code> value greater than <code>0</code>, then its <code>init()</code> method is also invoked during startup with a new <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletConfig.html"" rel=""noreferrer""><code>ServletConfig</code></a> argument which in turn contains the involved <code>ServletContext</code>. Those servlets are initialized in the same order specified by that value (<code>1</code> is 1st, <code>2</code> is 2nd, etc). If the same value is specified for more than one servlet, then each of those servlets is loaded in the same order as they appear in the <code>web.xml</code>, <code>web-fragment.xml</code>, or <code>@WebServlet</code> classloading. In the event the &quot;load-on-startup&quot; value is absent, the <code>init()</code> method will be invoked whenever the <a href=""https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_message"" rel=""noreferrer"">HTTP request</a> hits that servlet for the very first time.</p>
<p>When the servlet container is finished with all of the above described initialization steps, then the <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContextListener.html#contextInitialized-javax.servlet.ServletContextEvent-"" rel=""noreferrer""><code>ServletContextListener#contextInitialized()</code></a> will be invoked with a <code>ServletContextEvent</code> argument which in turn contains the involved <code>ServletContext</code>. This will allow the developer the opportunity to programmatically register yet another <code>Servlet</code>, <code>Filter</code> or <code>Listener</code>.</p>
<p>When the servlet container shuts down, it unloads all web applications, invokes the <code>destroy()</code> method of all its initialized servlets and filters, and all <code>Servlet</code>, <code>Filter</code> and <code>Listener</code> instances registered via the <code>ServletContext</code> are trashed. Finally the <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContextListener.html#contextDestroyed-javax.servlet.ServletContextEvent-"" rel=""noreferrer""><code>ServletContextListener#contextDestroyed()</code></a> will be invoked and the <code>ServletContext</code> itself will be trashed.</p>
<h2><code>HttpServletRequest</code> and <code>HttpServletResponse</code></h2>
<p>The servlet container is attached to a web server that listens for HTTP requests on a certain port number (port 8080 is usually used during development and port 80 in production). When a client (e.g. user with a web browser, or <a href=""https://stackoverflow.com/questions/2793150/how-to-use-java-net-urlconnection-to-fire-and-handle-http-requests"">programmatically using <code>URLConnection</code></a>) sends an HTTP request, the servlet container creates new <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletRequest.html"" rel=""noreferrer""><code>HttpServletRequest</code></a> and <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpServletResponse.html"" rel=""noreferrer""><code>HttpServletResponse</code></a> objects and passes them through any defined <code>Filter</code> in the chain and, eventually, the <code>Servlet</code> instance.</p>
<p>In the case of <a href=""https://stackoverflow.com/tags/servlet-filters/info"">filters</a>, the <code>doFilter()</code> method is invoked. When the servlet container's code calls <code>chain.doFilter(request, response)</code>, the request and response continue on to the next filter, or hit the servlet if there are no remaining filters.</p>
<p>In the case of <a href=""https://stackoverflow.com/tags/servlets/info"">servlets</a>, the <code>service()</code> method is invoked. By default, this method determines which one of the <code>doXxx()</code> methods to invoke based off of  <code>request.getMethod()</code>. If the determined method is absent from the servlet, then an HTTP 405 error is returned in the response.</p>
<p>The request object provides access to all of the information about the HTTP request, such as its <a href=""https://en.wikipedia.org/wiki/URL"" rel=""noreferrer"">URL</a>, <a href=""https://en.wikipedia.org/wiki/List_of_HTTP_header_fields"" rel=""noreferrer"">headers</a>, <a href=""https://en.wikipedia.org/wiki/Query_string"" rel=""noreferrer"">query string</a> and body. The response object provides the ability to control and send the HTTP response the way you want by, for instance, allowing you to set the headers and the body (usually with generated HTML content from a JSP file). When the HTTP response is committed and finished, both the request and response objects are recycled and made available for reuse.</p>
<h2><code>HttpSession</code></h2>
<p>When a client visits the webapp for the first time and/or the <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/HttpSession.html"" rel=""noreferrer""><code>HttpSession</code></a> is obtained for the first time via <code>request.getSession()</code>, the servlet container creates a new <code>HttpSession</code> object, generates a long and unique ID (which you can get by <code>session.getId()</code>), and stores it in the server's memory. The servlet container also sets a <a href=""https://javaee.github.io/javaee-spec/javadocs/javax/servlet/http/Cookie.html"" rel=""noreferrer""><code>Cookie</code></a> in the <code>Set-Cookie</code> header of the HTTP response with <code>JSESSIONID</code> as its name and the unique session ID as its value.</p>
<p>As per the <a href=""http://www.faqs.org/rfcs/rfc2965.html"" rel=""noreferrer"">HTTP cookie specification</a> (a contract any decent web browser and web server must adhere to), the client (the web browser) is required to send this <a href=""https://en.wikipedia.org/wiki/HTTP_cookie"" rel=""noreferrer"">cookie</a> back in subsequent requests in the <code>Cookie</code> header for as long as the cookie is valid (i.e. the unique ID must refer to an unexpired session and the domain and path are correct). Using your browser's built-in HTTP traffic monitor, you can verify that the cookie is valid (press F12 in Chrome / Firefox 23+ / IE9+, and check the <em>Net/Network</em> tab). The servlet container will check the <code>Cookie</code> header of every incoming HTTP request for the presence of the cookie with the name <code>JSESSIONID</code> and use its value (the session ID) to get the associated <code>HttpSession</code> from server's memory.</p>
<p>The <code>HttpSession</code> stays alive until it has been idle (i.e. not used in a request) for more than the timeout value specified in <code>&lt;session-timeout&gt;</code>, a setting in <code>web.xml</code>. The timeout value defaults to 30 minutes. So, when the client doesn't visit the web app for longer than the time specified, the servlet container trashes the <a href=""https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#HTTP_session"" rel=""noreferrer"">session</a>. Every subsequent request, even with the cookie specified, will not have access to the same session anymore; the servlet container will create a new session.</p>
<p>On the client side, the session cookie stays alive for as long as the browser instance is running. So, if the client closes the browser instance (all tabs/windows), then the session is trashed on the client's side. In a new browser instance, the cookie associated with the session wouldn't exist, so it would no longer be sent. This causes an entirely new <code>HttpSession</code> to be created, with an entirely new session cookie being used.</p>
<h2>In a nutshell</h2>
<ul>
<li>The <code>ServletContext</code> lives for as long as the web app lives. It is shared among <em>all</em> requests in <em>all</em> sessions.</li>
<li>The <code>HttpSession</code> lives for as long as the client is interacting with the web app with the same browser instance, and the session hasn't timed out at the server side. It is shared among <em>all</em> requests in the <em>same</em> session.</li>
<li>The <code>HttpServletRequest</code> and <code>HttpServletResponse</code> live from the time the servlet receives an HTTP request from the client, until the complete response (the web page) has arrived. It is <em>not</em> shared elsewhere.</li>
<li>All <code>Servlet</code>, <code>Filter</code> and <code>Listener</code> instances live as long as the web app lives. They are shared among <em>all</em> requests in <em>all</em> sessions.</li>
<li>Any <code>attribute</code> that is defined in <code>ServletContext</code>, <code>HttpServletRequest</code> and <code>HttpSession</code> will live as long as the object in question lives. The object itself represents the &quot;scope&quot; in bean management frameworks such as JSF, CDI, Spring, etc. Those frameworks store their scoped beans as an <code>attribute</code> of its closest matching scope.</li>
</ul>
<h2>Thread Safety</h2>
<p>That said, your major concern is possibly <a href=""https://en.wikipedia.org/wiki/Thread_safety"" rel=""noreferrer""><em>thread safety</em></a>. You should now know that servlets and filters are shared among all requests. That's the nice thing about Java, it's multithreaded and different threads (read: HTTP requests) can make use of the same instance. It would otherwise be too expensive to recreate, <code>init()</code> and <code>destroy()</code> them for every single request.</p>
<p>You should also realize that you should <strong>never</strong> assign any request or session scoped data as an <em>instance</em> variable of a servlet or filter. It will be shared among all other requests in other sessions. That's <strong>not</strong> thread-safe! The below example illustrates this:</p>
<pre><code>public class ExampleServlet extends HttpServlet {

    private Object thisIsNOTThreadSafe;

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Object thisIsThreadSafe;

        thisIsNOTThreadSafe = request.getParameter(&quot;foo&quot;); // BAD!! Shared among all requests!
        thisIsThreadSafe = request.getParameter(&quot;foo&quot;); // OK, this is thread safe.
    } 
}
</code></pre>
<h3>See also:</h3>
<ul>
<li><a href=""https://stackoverflow.com/questions/2095397/what-is-the-difference-between-jsf-servlet-and-jsp"">What is the difference between JSF, Servlet and JSP?</a></li>
<li><a href=""https://stackoverflow.com/questions/1700390/best-option-for-session-management-in-java"">Best option for Session management in Java</a></li>
<li><a href=""https://stackoverflow.com/questions/4140448/difference-between-and-in-servlet-mapping-url-pattern"">Difference between / and /* in servlet mapping url pattern</a></li>
<li><a href=""https://stackoverflow.com/questions/2349633/doget-and-dopost-in-servlets"">doGet and doPost in Servlets</a></li>
<li><a href=""https://stackoverflow.com/questions/8011138/servlet-seems-to-handle-multiple-concurrent-requests-synchronously/"">Servlet seems to handle multiple concurrent browser requests synchronously</a></li>
<li><a href=""https://stackoverflow.com/questions/9555842/why-servlets-are-not-thread-safe/"">Why Servlets are not thread Safe?</a></li>
</ul>
",157882,,157882,,12/2/2021 16:54,12/2/2021 16:54,,,,23,,,,CC BY-SA 4.0
30359308,2,,123198,5/20/2015 20:01,,1928,,"<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Function</th>
<th>Copies<br>metadata</th>
<th>Copies<br>permissions</th>
<th>Uses file object</th>
<th>Destination<br>may be directory</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href=""https://docs.python.org/3/library/shutil.html#shutil.copy"" rel=""noreferrer"">shutil.copy</a></td>
<td>No</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td><a href=""https://docs.python.org/3/library/shutil.html#shutil.copyfile"" rel=""noreferrer"">shutil.copyfile</a></td>
<td>No</td>
<td>No</td>
<td>No</td>
<td>No</td>
</tr>
<tr>
<td><a href=""https://docs.python.org/3/library/shutil.html#shutil.copy2"" rel=""noreferrer"">shutil.copy2</a></td>
<td>Yes</td>
<td>Yes</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td><a href=""https://docs.python.org/3/library/shutil.html#shutil.copyfileobj"" rel=""noreferrer"">shutil.copyfileobj</a></td>
<td>No</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
</tr>
</tbody>
</table>
</div>",2901002,,7568866,,2/2/2021 9:06,2/2/2021 9:06,,,,1,,,,CC BY-SA 4.0
4526286,2,,4526273,12/24/2010 12:21,,1918,,"<p>When you make a POST request, you have to encode the data that forms the body of the request in some way.</p>
<p>HTML forms provide <a href=""https://www.w3.org/html/wg/spec/association-of-controls-and-forms.html#attr-fs-enctype"" rel=""noreferrer"">three methods of encoding</a>.</p>
<ul>
<li><code>application/x-www-form-urlencoded</code> (the default)</li>
<li><code>multipart/form-data</code></li>
<li><code>text/plain</code></li>
</ul>
<p>Work was being done on adding <a href=""http://www.w3.org/TR/html-json-forms/"" rel=""noreferrer""><code>application/json</code></a>, but that has been abandoned.</p>
<p>(Other encodings are possible with HTTP requests generated using other means than an HTML form submission. JSON is a common format for use with web services and some still use SOAP.)</p>
<p>The specifics of the formats don't matter to most developers. The important points are:</p>
<ul>
<li>Never use <code>text/plain</code>.</li>
</ul>
<p>When you are writing client-side code:</p>
<ul>
<li>use <code>multipart/form-data</code> when your form includes any <code>&lt;input type=&quot;file&quot;&gt;</code> elements</li>
<li>otherwise you can use <code>multipart/form-data</code> or <code>application/x-www-form-urlencoded</code> but <code>application/x-www-form-urlencoded</code> will be more efficient</li>
</ul>
<p>When you are writing server-side code:</p>
<ul>
<li>Use a prewritten form handling library</li>
</ul>
<p>Most (such as Perl's <code>CGI-&gt;param</code> or the one exposed by PHP's <code>$_POST</code> superglobal) will take care of the differences for you. Don't bother trying to parse the raw input received by the server.</p>
<p>Sometimes you will find a library that can't handle both formats.  Node.js's most popular library for handling form data is <a href=""https://github.com/expressjs/body-parser"" rel=""noreferrer"">body-parser</a> which cannot handle multipart requests (but has documentation that recommends some alternatives which can).</p>
<hr />
<p>If you are writing (or debugging) a library for parsing or generating the raw data, then you need to start worrying about the format. You might also want to know about it for interest's sake.</p>
<p><code>application/x-www-form-urlencoded</code> is more or less the same as a query string on the end of the URL.</p>
<p><code>multipart/form-data</code> is significantly more complicated but it allows entire files to be included in the data. An example of the result can be found in the <a href=""http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4"" rel=""noreferrer"">HTML 4 specification</a>.</p>
<p><code>text/plain</code> is introduced by HTML 5 and is useful only for debugging ‚Äî from <a href=""http://www.w3.org/TR/html5/forms.html#text/plain-encoding-algorithm"" rel=""noreferrer"">the spec</a>: <em>They are not reliably interpretable by computer</em> ‚Äî and I'd argue that the others combined with tools (like <a href=""https://developers.google.com/web/tools/chrome-devtools/network"" rel=""noreferrer"">the Network Panel</a> in the developer tools of most browsers) are better for that).</p>
",19068,,1357094,,7/7/2022 22:15,7/7/2022 22:15,,,,8,,,,CC BY-SA 4.0
176274,2,,176264,10/6/2008 21:29,,1903,,"<p>From <a href=""http://www.ietf.org/rfc/rfc3986.txt"" rel=""noreferrer"">RFC 3986</a>:</p>
<blockquote>
<p>A URI can be further classified as a locator, a name, or both.  The
term &quot;Uniform Resource Locator&quot; (URL) refers to the subset of URIs
that, in addition to identifying a resource, provide a means of
locating the resource by describing its primary access mechanism
(e.g., its network &quot;location&quot;).  The term &quot;Uniform Resource Name&quot;
(URN) has been used historically to refer to both URIs under the
&quot;urn&quot; scheme <a href=""https://www.ietf.org/rfc/rfc2141.txt"" rel=""noreferrer"">[RFC2141]</a>, which are required to remain globally unique
and persistent even when the resource ceases to exist or becomes
unavailable, and to any other URI with the properties of a name.</p>
</blockquote>
<p>So all URLs are URIs, and all URNs are URIs - but URNs and URLs are different, so you can't say that all URIs are URLs.</p>
<p>If you haven't already read <a href=""https://stackoverflow.com/a/1984225/22656"">Roger Pate's answer</a>, I'd advise doing so as well.</p>
",22656,Jon Skeet,294313,,2/14/2021 23:51,2/14/2021 23:51,,,,17,,,,CC BY-SA 4.0
3654309,2,,3654295,9/6/2010 21:10,,1901,,"<p>As you're dealing with an array of strings, you can simply use <a href=""https://secure.php.net/manual/en/function.array-filter.php"" rel=""noreferrer""><code>array_filter()</code></a>, which conveniently handles all this for you:</p>
<pre><code>print_r(array_filter($linksArray));
</code></pre>
<p>Keep in mind that <strong>if no callback is supplied</strong>, all entries of array equal to <code>FALSE</code> (see <a href=""http://php.net/manual/en/language.types.boolean.php#language.types.boolean.casting"" rel=""noreferrer"">converting to boolean</a>) will be removed. So if you need to preserve elements that are i.e. exact string <code>'0'</code>, you will need a custom callback:</p>
<pre><code>// PHP 7.4 and later
print_r(array_filter($linksArray, fn($value) =&gt; !is_null($value) &amp;&amp; $value !== ''));

// PHP 5.3 and later
print_r(array_filter($linksArray, function($value) { return !is_null($value) &amp;&amp; $value !== ''; }));

// PHP &lt; 5.3
print_r(array_filter($linksArray, create_function('$value', 'return $value !== &quot;&quot;;')));
</code></pre>
<br>
<p>Note: If you need to reindex the array after removing the empty elements, use: <code>$linksArray = array_values(array_filter($linksArray));</code></p>
",106224,,1066234,,11/27/2021 12:26,11/27/2021 12:26,,,,19,,,,CC BY-SA 4.0
1534343,2,,1534210,10/7/2009 21:33,,1886,,"<p><strong>NOTE:</strong> For <strong>Python 3.3+</strong>, see The Aelfinn's <a href=""https://stackoverflow.com/a/39713544/1450294"">answer</a> below.</p>
<hr />
<p>Use the <code>--python</code> (or short <code>-p</code>) option when creating a virtualenv instance to specify the Python executable you want to use, e.g.:</p>
<pre><code>virtualenv --python=&quot;/usr/bin/python2.6&quot; &quot;/path/to/new/virtualenv/&quot;
</code></pre>
",104349,,365102,,6/20/2022 6:37,6/20/2022 6:37,,,,20,,,,CC BY-SA 4.0
4660142,1,4660186,,1/11/2011 16:48,,1872,1961778,"<p>I have some code and when it executes, it throws a <code>NullReferenceException</code>, saying:</p>

<blockquote>
  <p>Object reference not set to an instance of an object.</p>
</blockquote>

<p>What does this mean, and what can I do to fix this error?</p>
",76337,,6908525,,9/3/2017 16:06,9/16/2022 13:21,"What is a NullReferenceException, and how do I fix it?",<c#><.net><vb.net><null><nullreferenceexception>,27,4,512,,7/30/2015 8:22,CC BY-SA 3.0
4216767,2,,4216745,11/18/2010 15:55,,1813,,"<p>That's the hard way, and those <code>java.util.Date</code> setter methods have been deprecated since Java 1.1 (1997). Moreover, the whole <code>java.util.Date</code> class was de-facto deprecated (discommended) since introduction of <code>java.time</code> API in Java 8 (2014).</p>
<p>Simply format the date using <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html"" rel=""noreferrer""><code>DateTimeFormatter</code></a> with a pattern matching the input string (<a href=""https://docs.oracle.com/javase/tutorial/datetime/iso/format.html"" rel=""noreferrer"">the tutorial is available here</a>).</p>
<p>In your specific case of &quot;January 2, 2010&quot; as the input string:</p>
<ol>
<li>&quot;January&quot; is the full text month, so use the <code>MMMM</code> pattern for it</li>
<li>&quot;2&quot; is the short day-of-month, so use the <code>d</code> pattern for it.</li>
<li>&quot;2010&quot; is the 4-digit year, so use the <code>yyyy</code> pattern for it.</li>
</ol>

<pre><code>String string = &quot;January 2, 2010&quot;;
DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;MMMM d, yyyy&quot;, Locale.ENGLISH);
LocalDate date = LocalDate.parse(string, formatter);
System.out.println(date); // 2010-01-02
</code></pre>
<p>Note: if your format pattern happens to contain the time part as well, then use <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html#parse-java.lang.CharSequence-java.time.format.DateTimeFormatter-"" rel=""noreferrer""><code>LocalDateTime#parse(text, formatter)</code></a> instead of <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html#parse-java.lang.CharSequence-java.time.format.DateTimeFormatter-"" rel=""noreferrer""><code>LocalDate#parse(text, formatter)</code></a>. And, if your format pattern happens to contain the time zone as well, then use <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html#parse-java.lang.CharSequence-java.time.format.DateTimeFormatter-"" rel=""noreferrer""><code>ZonedDateTime#parse(text, formatter)</code></a> instead.</p>
<p>Here's an extract of relevance from <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html"" rel=""noreferrer"">the javadoc</a>, listing all available format patterns:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Symbol</th>
<th>Meaning</th>
<th>Presentation</th>
<th>Examples</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>G</code></td>
<td>era</td>
<td>text</td>
<td>AD; Anno Domini; A</td>
</tr>
<tr>
<td><code>u</code></td>
<td>year</td>
<td>year</td>
<td>2004; 04</td>
</tr>
<tr>
<td><code>y</code></td>
<td>year-of-era</td>
<td>year</td>
<td>2004; 04</td>
</tr>
<tr>
<td><code>D</code></td>
<td>day-of-year</td>
<td>number</td>
<td>189</td>
</tr>
<tr>
<td><code>M</code>/<code>L</code></td>
<td>month-of-year</td>
<td>number/text</td>
<td>7; 07; Jul; July; J</td>
</tr>
<tr>
<td><code>d</code></td>
<td>day-of-month</td>
<td>number</td>
<td>10</td>
</tr>
<tr>
<td><code>Q</code>/<code>q</code></td>
<td>quarter-of-year</td>
<td>number/text</td>
<td>3; 03; Q3; 3rd quarter</td>
</tr>
<tr>
<td><code>Y</code></td>
<td>week-based-year</td>
<td>year</td>
<td>1996; 96</td>
</tr>
<tr>
<td><code>w</code></td>
<td>week-of-week-based-year</td>
<td>number</td>
<td>27</td>
</tr>
<tr>
<td><code>W</code></td>
<td>week-of-month</td>
<td>number</td>
<td>4</td>
</tr>
<tr>
<td><code>E</code></td>
<td>day-of-week</td>
<td>text</td>
<td>Tue; Tuesday; T</td>
</tr>
<tr>
<td><code>e</code>/<code>c</code></td>
<td>localized day-of-week</td>
<td>number/text</td>
<td>2; 02; Tue; Tuesday; T</td>
</tr>
<tr>
<td><code>F</code></td>
<td>week-of-month</td>
<td>number</td>
<td>3</td>
</tr>
<tr>
<td><code>a</code></td>
<td>am-pm-of-day</td>
<td>text</td>
<td>PM</td>
</tr>
<tr>
<td><code>h</code></td>
<td>clock-hour-of-am-pm (1-12)</td>
<td>number</td>
<td>12</td>
</tr>
<tr>
<td><code>K</code></td>
<td>hour-of-am-pm (0-11)</td>
<td>number</td>
<td>0</td>
</tr>
<tr>
<td><code>k</code></td>
<td>clock-hour-of-am-pm (1-24)</td>
<td>number</td>
<td>0</td>
</tr>
<tr>
<td><code>H</code></td>
<td>hour-of-day (0-23)</td>
<td>number</td>
<td>0</td>
</tr>
<tr>
<td><code>m</code></td>
<td>minute-of-hour</td>
<td>number</td>
<td>30</td>
</tr>
<tr>
<td><code>s</code></td>
<td>second-of-minute</td>
<td>number</td>
<td>55</td>
</tr>
<tr>
<td><code>S</code></td>
<td>fraction-of-second</td>
<td>fraction</td>
<td>978</td>
</tr>
<tr>
<td><code>A</code></td>
<td>milli-of-day</td>
<td>number</td>
<td>1234</td>
</tr>
<tr>
<td><code>n</code></td>
<td>nano-of-second</td>
<td>number</td>
<td>987654321</td>
</tr>
<tr>
<td><code>N</code></td>
<td>nano-of-day</td>
<td>number</td>
<td>1234000000</td>
</tr>
<tr>
<td><code>V</code></td>
<td>time-zone ID</td>
<td>zone-id</td>
<td>America/Los_Angeles; Z; -08:30</td>
</tr>
<tr>
<td><code>z</code></td>
<td>time-zone name</td>
<td>zone-name</td>
<td>Pacific Standard Time; PST</td>
</tr>
<tr>
<td><code>O</code></td>
<td>localized zone-offset</td>
<td>offset-O</td>
<td>GMT+8; GMT+08:00; UTC-08:00;</td>
</tr>
<tr>
<td><code>X</code></td>
<td>zone-offset 'Z' for zero</td>
<td>offset-X</td>
<td>Z; -08; -0830; -08:30; -083015; -08:30:15;</td>
</tr>
<tr>
<td><code>x</code></td>
<td>zone-offset</td>
<td>offset-x</td>
<td>+0000; -08; -0830; -08:30; -083015; -08:30:15;</td>
</tr>
<tr>
<td><code>Z</code></td>
<td>zone-offset</td>
<td>offset-Z</td>
<td>+0000; -0800; -08:00;</td>
</tr>
</tbody>
</table>
</div>
<p>Do note that it has several <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#predefined"" rel=""noreferrer"">predefined formatters</a> for the more popular patterns. So instead of e.g. <code>DateTimeFormatter.ofPattern(&quot;EEE, d MMM yyyy HH:mm:ss Z&quot;, Locale.ENGLISH);</code>, you could use <code>DateTimeFormatter.RFC_1123_DATE_TIME</code>. This is possible because they are, on the contrary to <code>SimpleDateFormat</code>, thread safe. You could thus also define your own, if necessary.</p>
<p>For a particular input string format, you don't need to use an explicit <code>DateTimeFormatter</code>: a standard <a href=""https://en.wikipedia.org/wiki/ISO_8601"" rel=""noreferrer"">ISO 8601</a> date, like 2016-09-26T17:44:57Z, can be parsed directly with <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html#parse-java.lang.CharSequence-"" rel=""noreferrer""><code>LocalDateTime#parse(text)</code></a> as it already uses the <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE_TIME"" rel=""noreferrer""><code>ISO_LOCAL_DATE_TIME</code></a> formatter. Similarly, <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html#parse-java.lang.CharSequence-"" rel=""noreferrer""><code>LocalDate#parse(text)</code></a> parses an ISO date without the time component (see <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_DATE"" rel=""noreferrer""><code>ISO_LOCAL_DATE</code></a>), and <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html#parse-java.lang.CharSequence-"" rel=""noreferrer""><code>ZonedDateTime#parse(text)</code></a> parses an ISO date with an offset and time zone added (see <a href=""https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_ZONED_DATE_TIME"" rel=""noreferrer""><code>ISO_ZONED_DATE_TIME</code></a>).</p>
<hr />
<h2>Pre-Java 8</h2>
<p>In case you're not on Java 8 yet, or are forced to use <code>java.util.Date</code>, then format the date using <a href=""http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html"" rel=""noreferrer""><code>SimpleDateFormat</code></a> using a format pattern matching the input string.</p>

<pre><code>String string = &quot;January 2, 2010&quot;;
DateFormat format = new SimpleDateFormat(&quot;MMMM d, yyyy&quot;, Locale.ENGLISH);
Date date = format.parse(string);
System.out.println(date); // Sat Jan 02 00:00:00 GMT 2010
</code></pre>
<p>Note the importance of the explicit <code>Locale</code> argument. If you omit it, then it will use the <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#getDefault--"" rel=""noreferrer"">default locale</a> which is not necessarily English as used in the month name of the input string. If the locale doesn't match with the input string, then you would confusingly get a <code>java.text.ParseException</code> even though when the format pattern seems valid.</p>
<p>Here's an extract of relevance from <a href=""http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html"" rel=""noreferrer"">the javadoc</a>, listing all available format patterns:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Letter</th>
<th>Date or Time Component</th>
<th>Presentation</th>
<th>Examples</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>G</code></td>
<td>Era designator</td>
<td>Text</td>
<td>AD</td>
</tr>
<tr>
<td><code>y</code></td>
<td>Year</td>
<td>Year</td>
<td>1996; 96</td>
</tr>
<tr>
<td><code>Y</code></td>
<td>Week year</td>
<td>Year</td>
<td>2009; 09</td>
</tr>
<tr>
<td><code>M</code>/<code>L</code></td>
<td>Month in year</td>
<td>Month</td>
<td>July; Jul; 07</td>
</tr>
<tr>
<td><code>w</code></td>
<td>Week in year</td>
<td>Number</td>
<td>27</td>
</tr>
<tr>
<td><code>W</code></td>
<td>Week in month</td>
<td>Number</td>
<td>2</td>
</tr>
<tr>
<td><code>D</code></td>
<td>Day in year</td>
<td>Number</td>
<td>189</td>
</tr>
<tr>
<td><code>d</code></td>
<td>Day in month</td>
<td>Number</td>
<td>10</td>
</tr>
<tr>
<td><code>F</code></td>
<td>Day of week in month</td>
<td>Number</td>
<td>2</td>
</tr>
<tr>
<td><code>E</code></td>
<td>Day in week</td>
<td>Text</td>
<td>Tuesday; Tue</td>
</tr>
<tr>
<td><code>u</code></td>
<td>Day number of week</td>
<td>Number</td>
<td>1</td>
</tr>
<tr>
<td><code>a</code></td>
<td>Am/pm marker</td>
<td>Text</td>
<td>PM</td>
</tr>
<tr>
<td><code>H</code></td>
<td>Hour in day (0-23)</td>
<td>Number</td>
<td>0</td>
</tr>
<tr>
<td><code>k</code></td>
<td>Hour in day (1-24)</td>
<td>Number</td>
<td>24</td>
</tr>
<tr>
<td><code>K</code></td>
<td>Hour in am/pm (0-11)</td>
<td>Number</td>
<td>0</td>
</tr>
<tr>
<td><code>h</code></td>
<td>Hour in am/pm (1-12)</td>
<td>Number</td>
<td>12</td>
</tr>
<tr>
<td><code>m</code></td>
<td>Minute in hour</td>
<td>Number</td>
<td>30</td>
</tr>
<tr>
<td><code>s</code></td>
<td>Second in minute</td>
<td>Number</td>
<td>55</td>
</tr>
<tr>
<td><code>S</code></td>
<td>Millisecond</td>
<td>Number</td>
<td>978</td>
</tr>
<tr>
<td><code>z</code></td>
<td>Time zone</td>
<td>General time zone</td>
<td>Pacific Standard Time; PST; GMT-08:00</td>
</tr>
<tr>
<td><code>Z</code></td>
<td>Time zone</td>
<td>RFC 822 time zone</td>
<td>-0800</td>
</tr>
<tr>
<td><code>X</code></td>
<td>Time zone</td>
<td>ISO 8601 time zone</td>
<td>-08; -0800; -08:00</td>
</tr>
</tbody>
</table>
</div>
<p>Note that the patterns are case sensitive and that text based patterns of four characters or more represent the full form; otherwise a short or abbreviated form is used if available. So e.g. <code>MMMMM</code> or more is unnecessary.</p>
<p>Here are some examples of valid <code>SimpleDateFormat</code> patterns to parse a given string to date:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>Input string</th>
<th>Pattern</th>
</tr>
</thead>
<tbody>
<tr>
<td>2001.07.04 AD at 12:08:56 PDT</td>
<td><code>yyyy.MM.dd G 'at' HH:mm:ss z</code></td>
</tr>
<tr>
<td>Wed, Jul 4, '01</td>
<td><code>EEE, MMM d, ''yy</code></td>
</tr>
<tr>
<td>12:08 PM</td>
<td><code>h:mm a</code></td>
</tr>
<tr>
<td>12 o'clock PM, Pacific Daylight Time</td>
<td><code>hh 'o''clock' a, zzzz</code></td>
</tr>
<tr>
<td>0:08 PM, PDT</td>
<td><code>K:mm a, z</code></td>
</tr>
<tr>
<td>02001.July.04 AD 12:08 PM</td>
<td><code>yyyyy.MMMM.dd GGG hh:mm aaa</code></td>
</tr>
<tr>
<td>Wed, 4 Jul 2001 12:08:56 -0700</td>
<td><code>EEE, d MMM yyyy HH:mm:ss Z</code></td>
</tr>
<tr>
<td>010704120856-0700</td>
<td><code>yyMMddHHmmssZ</code></td>
</tr>
<tr>
<td>2001-07-04T12:08:56.235-0700</td>
<td><code>yyyy-MM-dd'T'HH:mm:ss.SSSZ</code></td>
</tr>
<tr>
<td>2001-07-04T12:08:56.235-07:00</td>
<td><code>yyyy-MM-dd'T'HH:mm:ss.SSSXXX</code></td>
</tr>
<tr>
<td>2001-W27-3</td>
<td><code>YYYY-'W'ww-u</code></td>
</tr>
</tbody>
</table>
</div>
<p>An important note is that <code>SimpleDateFormat</code> is <strong>not</strong> thread safe. In other words, you should never declare and assign it as a static or instance variable and then reuse it from different methods/threads. You should always create it brand new within the method local scope.</p>
",157882,,157882,,9/1/2021 18:57,9/1/2021 18:57,,,,5,,,,CC BY-SA 4.0
20279484,1,20279485,,11/29/2013 6:13,,1798,578021,"<p>I have a constructor function which registers an event handler:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function MyConstructor(data, transport) {
    this.data = data;
    transport.on('data', function () {
        alert(this.data);
    });
}

// Mock transport object
var transport = {
    on: function(event, callback) {
        setTimeout(callback, 1000);
    }
};

// called as
var obj = new MyConstructor('foo', transport);</code></pre>
</div>
</div>
</p>
<p>However, I'm not able to access the <code>data</code> property of the created object inside the callback. It looks like <code>this</code> does not refer to the object that was created, but to another one.</p>
<p>I also tried to use an object method instead of an anonymous function:</p>
<pre><code>function MyConstructor(data, transport) {
    this.data = data;
    transport.on('data', this.alert);
}

MyConstructor.prototype.alert = function() {
    alert(this.name);
};
</code></pre>
<p>but it exhibits the same problems.</p>
<p>How can I access the correct object?</p>
",218196,,63550,,7/25/2021 20:19,10/19/2021 21:37,How to access the correct `this` inside a callback,<javascript><callback><this>,13,4,839,,,CC BY-SA 4.0
541506,2,,541487,2/12/2009 14:32,,1797,,"<p>Yes: implements <code>Runnable</code> is the preferred way to do it, IMO. You're not really specialising the thread's behaviour.  You're just giving it something to run. That means <a href=""http://en.wikipedia.org/wiki/Object_composition"" rel=""noreferrer"">composition</a> is the <em>philosophically</em> &quot;purer&quot; way to go.</p>
<p>In <em>practical</em> terms, it means you can implement <code>Runnable</code> and extend from another class as well... and you can also implement <code>Runnable</code> via a lambda expression as of Java 8.</p>
",22656,Jon Skeet,22656,,10/26/2020 14:02,10/26/2020 14:02,,,,33,,,,CC BY-SA 4.0
12289888,2,,12289853,9/5/2012 21:11,,1794,,"<p>One of the versions you posted <a href=""http://jsfiddle.net/5TKjB/"">actually works</a> for all modern browsers (where <a href=""http://www.w3.org/TR/css3-selectors/"">CSS selectors level 3</a> are <a href=""http://caniuse.com/#feat=css-sel3"">supported</a>):</p>

<pre><code>div ul:not(:first-child) {
    background-color: #900;
}
</code></pre>

<p>If you need to support legacy browsers, or if you are hindered by the <code>:not</code> selector's <a href=""http://www.w3.org/TR/css3-selectors/#negation"">limitation</a> (it only accepts a <a href=""http://www.w3.org/TR/css3-selectors/#simple-selectors-dfn"">simple selector</a> as an argument) then you can use another technique:</p>

<p>Define a rule that has greater scope than what you intend and then ""revoke"" it conditionally, limiting its scope to what you do intend:</p>

<pre><code>div ul {
    background-color: #900;  /* applies to every ul */
}

div ul:first-child {
    background-color: transparent; /* limits the scope of the previous rule */
}
</code></pre>

<p>When limiting the scope use the <a href=""http://www.w3.org/TR/CSS2/colors.html#background-properties"">default value</a> for each CSS attribute that you are setting.</p>
",50079,,672989,,2/24/2016 13:53,2/24/2016 13:53,,,,7,,,,CC BY-SA 3.0
1255015,2,,28002,8/10/2009 13:50,,1791,,"<h2>static_cast</h2>
<p><code>static_cast</code> is used for cases where you basically want to reverse an implicit conversion, with a few restrictions and additions. <code>static_cast</code> performs no runtime checks. This should be used if you know that you refer to an object of a specific type, and thus a check would be unnecessary. Example:</p>
<pre><code>void func(void *data) {
  // Conversion from MyClass* -&gt; void* is implicit
  MyClass *c = static_cast&lt;MyClass*&gt;(data);
  ...
}

int main() {
  MyClass c;
  start_thread(&amp;func, &amp;c)  // func(&amp;c) will be called
      .join();
}
</code></pre>
<p>In this example, you know that you passed a <code>MyClass</code> object, and thus there isn't any need for a runtime check to ensure this.</p>
<h2>dynamic_cast</h2>
<p><code>dynamic_cast</code> is useful when you don't know what the dynamic type of the object is. It returns a null pointer if the object referred to doesn't contain the type casted to as a base class (when you cast to a reference, a <code>bad_cast</code> exception is thrown in that case).</p>
<pre><code>if (JumpStm *j = dynamic_cast&lt;JumpStm*&gt;(&amp;stm)) {
  ...
} else if (ExprStm *e = dynamic_cast&lt;ExprStm*&gt;(&amp;stm)) {
  ...
}
</code></pre>
<p>You can <strong>not</strong> use <code>dynamic_cast</code> for downcast (casting to a derived class) <strong>if</strong> the argument type is not polymorphic. For example, the following code is not valid, because <code>Base</code> doesn't contain any virtual function:</p>
<pre><code>struct Base { };
struct Derived : Base { };
int main() {
  Derived d; Base *b = &amp;d;
  dynamic_cast&lt;Derived*&gt;(b); // Invalid
}
</code></pre>
<p>An &quot;up-cast&quot; (cast to the base class) is always valid with both <code>static_cast</code> and <code>dynamic_cast</code>, and also without any cast, as an &quot;up-cast&quot; is an implicit conversion (assuming the base class is accessible, i.e. it's a <code>public</code> inheritance).</p>
<h2>Regular Cast</h2>
<p>These casts are also called C-style cast. A C-style cast is basically identical to trying out a range of sequences of C++ casts, and taking the first C++ cast that works, without ever considering <code>dynamic_cast</code>. Needless to say, this is much more powerful as it combines all of <code>const_cast</code>, <code>static_cast</code> and <code>reinterpret_cast</code>, but it's also unsafe, because it does not use <code>dynamic_cast</code>.</p>
<p>In addition, C-style casts not only allow you to do this, but they also allow you to safely cast to a private base-class, while the &quot;equivalent&quot; <code>static_cast</code> sequence would give you a compile-time error for that.</p>
<p>Some people prefer C-style casts because of their brevity. I use them for numeric casts only, and use the appropriate C++ casts when user defined types are involved, as they provide stricter checking.</p>
",34509,,8740349,,7/11/2022 21:21,7/11/2022 21:21,,,,14,,,,CC BY-SA 4.0
18302624,2,,18302603,8/18/2013 18:56,,1787,,"<p>Since Android Studio uses <a href=""http://tools.android.com/tech-docs/new-build-system/user-guide"" rel=""noreferrer"">the new Gradle-based build system</a>, you should be <a href=""http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Project-Structure"" rel=""noreferrer"">putting <code>assets/</code> inside of the source sets</a> (e.g., <code>src/main/assets/</code>).</p>
<p>In a typical Android Studio project, you will have an <code>app/</code> module, with a <code>main/</code> sourceset (<code>app/src/main/</code> off of the project root), and so your primary assets would go in <code>app/src/main/assets/</code>. However:</p>
<ul>
<li><p>If you need assets specific to a build type, such as <code>debug</code> versus <code>release</code>, you can create sourcesets for those roles (e.g,. <code>app/src/release/assets/</code>)</p>
</li>
<li><p>Your product flavors can also have sourcesets with assets (e.g., <code>app/src/googleplay/assets/</code>)</p>
</li>
<li><p>Your instrumentation tests can have an <code>androidTest</code> sourceset with custom assets (e.g., <code>app/src/androidTest/assets/</code>), though be sure to ask the <code>InstrumentationRegistry</code> for <code>getContext()</code>, not <code>getTargetContext()</code>, to access those assets</p>
</li>
</ul>
<p>Also, a quick reminder: assets are read-only at runtime. Use <a href=""https://commonsware.com/blog/2014/04/07/storage-situation-internal-storage.html"" rel=""noreferrer"">internal storage</a>, <a href=""https://commonsware.com/blog/2014/04/08/storage-situation-external-storage.html"" rel=""noreferrer"">external storage</a>, or <a href=""http://developer.android.com/guide/topics/providers/document-provider.html"" rel=""noreferrer"">the Storage Access Framework</a> for read/write content.</p>
",115145,,2911458,,7/17/2020 3:28,7/17/2020 3:28,,,,12,,,,CC BY-SA 4.0
8539107,2,,2717480,12/16/2011 19:21,,1778,,"<p>This is one of the most well-known examples of authors misunderstanding how <code>:first-child</code> works. <a href=""https://www.w3.org/TR/CSS21/selector.html#first-child"" rel=""noreferrer"">Introduced in CSS2</a>, the <code>:first-child</code> pseudo-class represents <strong>the very first child of its parent</strong>. That's it. There's a very common misconception that it picks up whichever child element is the first to match the conditions specified by the rest of the compound selector. Due to the way selectors work (see <a href=""https://stackoverflow.com/questions/5545649/can-i-combine-nth-child-or-nth-of-type-with-an-arbitrary-selector/5546296#5546296"">here</a> for an explanation), that is simply not true.</p>
<p><a href=""https://www.w3.org/TR/css3-selectors/#first-of-type-pseudo"" rel=""noreferrer"">Selectors level 3 introduces a <code>:first-of-type</code> pseudo-class</a>, which represents the first element among siblings of its element type. <a href=""https://stackoverflow.com/questions/24657555/what-is-the-difference-between-first-child-and-first-of-type/24657721#24657721"">This answer</a> explains, with illustrations, the difference between <code>:first-child</code> and <code>:first-of-type</code>. However, as with <code>:first-child</code>, it does not look at any other conditions or attributes. In HTML, the element type is represented by the tag name. In the question, that type is <code>p</code>.</p>
<p>Unfortunately, there is no similar <code>:first-of-class</code> pseudo-class for matching the first child element of a given class. At the time this answer was first posted, <a href=""https://www.w3.org/TR/2011/WD-selectors4-20110929/#nth-match"" rel=""noreferrer"">the newly published FPWD of Selectors level 4 introduced an <code>:nth-match()</code> pseudo-class</a>, designed around existing selector mechanics as I mentioned in the first paragraph by adding a selector-list argument, through which you can supply the rest of the compound selector to get the desired filtering behavior. In recent years this functionality was <a href=""https://www.w3.org/TR/selectors-4/#the-nth-child-pseudo"" rel=""noreferrer"">subsumed into <code>:nth-child()</code> itself</a>, with the selector list appearing as an optional second argument, to simplify things as well as averting the false impression that <code>:nth-match()</code> matched across the entire document (see the final note below).</p>
<p>While we await <a href=""https://caniuse.com/css-nth-child-of"" rel=""noreferrer"">cross-browser support</a> (seriously, it's been nearly 10 years, and there has only been a single implementation for the last 5 of those years), one workaround that <a href=""https://stackoverflow.com/questions/5287272/css-select-first-element-with-a-certain-class/5293095#5293095"">Lea Verou</a> and I developed independently (she did it first!) is to first apply your desired styles to <em>all</em> your elements with that class:</p>
<pre class=""lang-css prettyprint-override""><code>/* 
 * Select all .red children of .home, including the first one,
 * and give them a border.
 */
.home &gt; .red {
    border: 1px solid red;
}
</code></pre>
<p>... then &quot;undo&quot; the styles for elements with the class that <em>come after the first one</em>, using <a href=""https://www.w3.org/TR/selectors/#general-sibling-combinators"" rel=""noreferrer"">the general sibling combinator <code>~</code></a> in an overriding rule:</p>
<pre class=""lang-css prettyprint-override""><code>/* 
 * Select all but the first .red child of .home,
 * and remove the border from the previous rule.
 */
.home &gt; .red ~ .red {
    border: none;
}
</code></pre>
<p>Now only the first element with <code>class=&quot;red&quot;</code> will have a border.</p>
<p>Here's an illustration of how the rules are applied:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.home &gt; .red {
    border: 1px solid red;
}

.home &gt; .red ~ .red {
    border: none;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""home""&gt;
  &lt;span&gt;blah&lt;/span&gt;         &lt;!-- [1] --&gt;
  &lt;p class=""red""&gt;first&lt;/p&gt;  &lt;!-- [2] --&gt;
  &lt;p class=""red""&gt;second&lt;/p&gt; &lt;!-- [3] --&gt;
  &lt;p class=""red""&gt;third&lt;/p&gt;  &lt;!-- [3] --&gt;
  &lt;p class=""red""&gt;fourth&lt;/p&gt; &lt;!-- [3] --&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<ol>
<li><p><strong>No rules are applied; no border is rendered.</strong><br />
This element does not have the class <code>red</code>, so it's skipped.</p>
</li>
<li><p><strong>Only the first rule is applied; a red border is rendered.</strong><br />
This element has the class <code>red</code>, but it's not preceded by any elements with the class <code>red</code> in its parent. Thus the second rule is not applied, only the first, and the element keeps its border.</p>
</li>
<li><p><strong>Both rules are applied; no border is rendered.</strong><br />
This element has the class <code>red</code>. It is also preceded by at least one other element with the class <code>red</code>. Thus both rules are applied, and the second <code>border</code> declaration overrides the first, thereby &quot;undoing&quot; it, so to speak.</p>
</li>
</ol>
<p>As a bonus, although it was introduced in Selectors 3, the general sibling combinator is actually pretty well-supported by IE7 and newer, unlike <code>:first-of-type</code> and <code>:nth-of-type()</code> which are only supported by IE9 onward. If you need good browser support, you're in luck.</p>
<p>In fact, the fact that the sibling combinator is the only important component in this technique, <em>and</em> it has such amazing browser support, makes this technique very versatile ‚Äî you can adapt it for filtering elements by other things, besides class selectors:</p>
<ul>
<li><p>You can use this to work around <code>:first-of-type</code> in IE7 and IE8, by simply supplying a type selector instead of a class selector (again, more on its incorrect usage in the question in a later section):</p>
 <pre class=""lang-css prettyprint-override""><code> article &gt; p {
     /* Apply styles to article &gt; p:first-of-type, which may or may not be :first-child */
 }

 article &gt; p ~ p {
     /* Undo the above styles for every subsequent article &gt; p */
 }
</code></pre>
</li>
<li><p>You can filter by <a href=""https://stackoverflow.com/questions/7128406/css-select-the-first-child-from-elements-with-particular-attribute/7128429#7128429"">attribute selectors</a> or any other simple selectors instead of classes.</p>
</li>
<li><p>You can also combine this overriding technique with <a href=""https://stackoverflow.com/questions/8535686/first-child-not-working/8535800#8535800"">pseudo-elements</a> even though pseudo-elements technically aren't simple selectors.</p>
</li>
</ul>
<p>Note that in order for this to work, you will need to know in advance what the default styles will be for your other sibling elements so you can override the first rule. Additionally, since this involves overriding rules in CSS, you can't achieve the same thing with a single selector for use with the <a href=""https://www.w3.org/TR/selectors-api"" rel=""noreferrer"">Selectors API</a>, or <a href=""https://www.selenium.dev"" rel=""noreferrer"">Selenium</a>'s CSS locators.</p>
<p>On a final note, keep in mind that this answer assumes that the question is looking for <em>any number of</em> first child elements having a given class. There is neither a pseudo-class nor even a generic CSS solution for the nth match of a complex selector <em>across the entire document</em> ‚Äî whether a solution exists depends heavily on the document structure. jQuery provides <code>:eq()</code>, <code>:first</code>, <code>:last</code> and more for this purpose, but note again that <a href=""https://stackoverflow.com/questions/9983297/difference-between-css-selector-and-jquery-filter/10835694#10835694"">they function very differently from <code>:nth-child()</code> et al</a>. Using the Selectors API, you can either use <code>document.querySelector()</code> to obtain the very first match:</p>
<pre class=""lang-js prettyprint-override""><code>var first = document.querySelector('.home &gt; .red');
</code></pre>
<p>Or use <code>document.querySelectorAll()</code> with an indexer to pick any specific match:</p>
<pre class=""lang-js prettyprint-override""><code>var redElements = document.querySelectorAll('.home &gt; .red');
var first = redElements[0];
var second = redElements[1];
// etc
</code></pre>
<hr />
<p>Although the <code>.red:nth-of-type(1)</code> solution in the original accepted answer by <a href=""https://stackoverflow.com/questions/2717480/css-selector-for-first-element-with-class/2717515#2717515"">Philip Daubmeier</a> works (which was originally written by <a href=""https://stackoverflow.com/users/264276/martyn"">Martyn</a> but deleted since), it does not behave the way you'd expect it to.</p>
<p>For example, if you only wanted to select the <code>p</code> here:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;p class=&quot;red&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;red&quot;&gt;&lt;/div&gt;
</code></pre>
<p>... then you can't use <code>.red:first-of-type</code> (equivalent to <code>.red:nth-of-type(1)</code>), because each element is the first (and only) one of its type (<code>p</code> and <code>div</code> respectively), so <em>both</em> will be matched by the selector.</p>
<p>When the first element of a certain class <em>is also the first of its type</em>, the pseudo-class will work, but <strong>this happens only by coincidence</strong>. This behavior is demonstrated in Philip's answer. The moment you stick in an element of the same type before this element, the selector will fail. Taking the markup from the question:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;div class=&quot;home&quot;&gt;
  &lt;span&gt;blah&lt;/span&gt;
  &lt;p class=&quot;red&quot;&gt;first&lt;/p&gt;
  &lt;p class=&quot;red&quot;&gt;second&lt;/p&gt;
  &lt;p class=&quot;red&quot;&gt;third&lt;/p&gt;
  &lt;p class=&quot;red&quot;&gt;fourth&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>Applying a rule with <code>.red:first-of-type</code> will work, but once you add another <code>p</code> without the class:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;div class=&quot;home&quot;&gt;
  &lt;span&gt;blah&lt;/span&gt;
  &lt;p&gt;dummy&lt;/p&gt;
  &lt;p class=&quot;red&quot;&gt;first&lt;/p&gt;
  &lt;p class=&quot;red&quot;&gt;second&lt;/p&gt;
  &lt;p class=&quot;red&quot;&gt;third&lt;/p&gt;
  &lt;p class=&quot;red&quot;&gt;fourth&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>... the selector will immediately fail, because the first <code>.red</code> element is now the <em>second</em> <code>p</code> element.</p>
",106224,,106224,,4/2/2021 9:02,4/2/2021 9:02,,,,6,,,,CC BY-SA 4.0
21694054,2,,21692193,2/11/2014 5:43,,1776,,"<p>There are some good answers here. I would add to them the following points.</p>
<blockquote>
<p>What is the correct C# way of representing a data structure, which, &quot;logically&quot; (that is to say, &quot;to the human mind&quot;) is just a list of things with a few bells and whistles?</p>
</blockquote>
<p>Ask any ten non-computer-programmer people who are familiar with the existence of football to fill in the blank:</p>
<blockquote>
<p>A football team is a particular kind of _____</p>
</blockquote>
<p>Did <em>anyone</em> say &quot;list of football players with a few bells and whistles&quot;, or did they all say &quot;sports team&quot; or &quot;club&quot; or &quot;organization&quot;?  Your notion that a football team is <em>a particular kind of list of players</em> is in your human mind and your human mind alone.</p>
<p><code>List&lt;T&gt;</code> is a <em>mechanism</em>.  Football team is a <em>business object</em> -- that is, an object that represents some concept that is in the <em>business domain</em> of the program. Don't mix those! A football team <em>is a kind of</em> team; it <em>has a</em> roster, a roster <em>is a list of players</em>. A roster is not a <em>particular kind of list of players</em>. A roster <em>is</em> a list of players. So make a property called <code>Roster</code> that is a <code>List&lt;Player&gt;</code>. And make it <code>ReadOnlyList&lt;Player&gt;</code> while you're at it, unless you believe that everyone who knows about a football team gets to delete players from the roster.</p>
<blockquote>
<p>Is inheriting from <code>List&lt;T&gt;</code> always unacceptable?</p>
</blockquote>
<p>Unacceptable to whom? Me? No.</p>
<blockquote>
<p>When is it acceptable?</p>
</blockquote>
<p>When you're building a mechanism that <em>extends the <code>List&lt;T&gt;</code> mechanism</em>.</p>
<blockquote>
<p>What must a programmer consider, when deciding whether to inherit from <code>List&lt;T&gt;</code> or not?</p>
</blockquote>
<p>Am I building a <em>mechanism</em> or a <em>business object</em>?</p>
<blockquote>
<p>But that's a lot of code! What do I get for all that work?</p>
</blockquote>
<p>You spent more time typing up your question that it would have taken you to write forwarding methods for the relevant members of <code>List&lt;T&gt;</code> fifty times over. You're clearly not afraid of verbosity, and we are talking about a very small amount of code here; this is a few minutes work.</p>
<h2>UPDATE</h2>
<p>I gave it some more thought and there is another reason to not model a football team as a list of players. In fact it might be a bad idea to model a football team as <em>having</em> a list of players too. The problem with a team as/having a list of players is that what you've got is a <em>snapshot</em> of the team <em>at a moment in time</em>. I don't know what your business case is for this class, but if I had a class that represented a football team I would want to ask it questions like &quot;how many Seahawks players missed games due to injury between 2003 and 2013?&quot; or &quot;What Denver player who previously played for another team had the largest year-over-year increase in yards ran?&quot; or &quot;<a href=""http://theoatmeal.com/comics/working_home"" rel=""noreferrer"">Did the Piggers go all the way this year?</a>&quot;</p>
<p>That is, a football team seems to me to be well modeled as <em>a collection of historical facts</em> such as when a player was recruited, injured, retired, etc. Obviously the current player roster is an important fact that should probably be front-and-center, but there may be other interesting things you want to do with this object that require a more historical perspective.</p>
",88656,,,user17242583,3/20/2022 15:34,3/20/2022 15:34,,,,25,,,,CC BY-SA 4.0
263416,2,,263400,11/4/2008 20:56,,1771,,"<p>I usually go with something like the implementation given in Josh Bloch's <em>fabulous</em> <a href=""https://rads.stackoverflow.com/amzn/click/com/0321356683"" rel=""noreferrer"" rel=""nofollow noreferrer"">Effective Java</a>. It's fast and creates a pretty good hash which is unlikely to cause collisions. Pick two different prime numbers, e.g. 17 and 23, and do:</p>
<pre><code>public override int GetHashCode()
{
    unchecked // Overflow is fine, just wrap
    {
        int hash = 17;
        // Suitable nullity checks etc, of course :)
        hash = hash * 23 + field1.GetHashCode();
        hash = hash * 23 + field2.GetHashCode();
        hash = hash * 23 + field3.GetHashCode();
        return hash;
    }
}
</code></pre>
<p>As noted in comments, you may find it's better to pick a large prime to multiply by instead. Apparently 486187739 is good... and although most examples I've seen with small numbers tend to use primes, there are at least similar algorithms where non-prime numbers are often used. In the not-quite-<a href=""https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function"" rel=""noreferrer"">FNV</a> example later, for example, I've used numbers which apparently work well - but the initial value isn't a prime. (The multiplication constant <em>is</em> prime though. I don't know quite how important that is.)</p>
<p>This is better than the common practice of <code>XOR</code>ing hashcodes for two main reasons. Suppose we have a type with two <code>int</code> fields:</p>
<pre><code>XorHash(x, x) == XorHash(y, y) == 0 for all x, y
XorHash(x, y) == XorHash(y, x) for all x, y
</code></pre>
<p>By the way, the earlier algorithm is the one currently used by the C# compiler for anonymous types.</p>
<p><a href=""http://eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx"" rel=""noreferrer"">This page</a> gives quite a few options. I think for most cases the above is &quot;good enough&quot; and it's incredibly easy to remember and get right. The <a href=""http://eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx#fnv"" rel=""noreferrer"">FNV</a> alternative is similarly simple, but uses different constants and <code>XOR</code> instead of <code>ADD</code> as a combining operation. It looks <em>something</em> like the code below, but the normal FNV algorithm operates on individual bytes, so this would require modifying to perform one iteration per byte, instead of per 32-bit hash value. FNV is also designed for variable lengths of data, whereas the way we're using it here is always for the same number of field values. Comments on this answer suggest that the code here doesn't actually work as well (in the sample case tested) as the addition approach above.</p>
<pre><code>// Note: Not quite FNV!
public override int GetHashCode()
{
    unchecked // Overflow is fine, just wrap
    {
        int hash = (int) 2166136261;
        // Suitable nullity checks etc, of course :)
        hash = (hash * 16777619) ^ field1.GetHashCode();
        hash = (hash * 16777619) ^ field2.GetHashCode();
        hash = (hash * 16777619) ^ field3.GetHashCode();
        return hash;
    }
}
</code></pre>
<p>Note that one thing to be aware of is that ideally you should prevent your equality-sensitive (and thus hashcode-sensitive) state from changing after adding it to a collection that depends on the hash code.</p>
<p>As per the <a href=""https://learn.microsoft.com/en-us/dotnet/api/system.object.gethashcode#notes-to-inheritors"" rel=""noreferrer"">documentation</a>:</p>
<blockquote>
<p>You can override GetHashCode for immutable reference types. In general, for mutable reference types, you should override GetHashCode only if:</p>
<ul>
<li>You can compute the hash code from fields that are not mutable; or</li>
<li>You can ensure that the hash code of a mutable object does not change while the object is contained in a collection that relies on its hash code.</li>
</ul>
</blockquote>
<p>The link to the <a href=""http://eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx"" rel=""noreferrer"">FNV</a> article is broken but here is a copy in the Internet Archive: <a href=""https://archive.vn/KJeJy"" rel=""noreferrer"">Eternally Confuzzled - The Art of Hashing</a></p>
",22656,Jon Skeet,375958,Jon Skeet,2/19/2021 8:00,2/19/2021 8:00,,,,87,,,,CC BY-SA 4.0
18093928,1,18093929,,8/7/2013 3:02,,1768,3953754,"<p>A common problem that new Java developers experience is that their programs fail to run with the error message:  <code>Could not find or load main class ...</code></p>

<p>What does this mean, what causes it, and how should you fix it?</p>
",139985,,139985,,1/7/2018 6:58,6/11/2022 18:44,"What does ""Could not find or load main class"" mean?",<java><class><program-entry-point>,61,3,594,,,CC BY-SA 3.0
32723127,2,,32723111,9/22/2015 17:24,,1768,,"<h3>(original answer see below)</h3>
<hr />
<p>Update Sept. 2016: Docker 1.13: <a href=""https://github.com/docker/docker/pull/26108"" rel=""noreferrer"">PR 26108</a> and <a href=""https://github.com/docker/docker/commit/86de7c000f5d854051369754ad1769194e8dd5e1"" rel=""noreferrer"">commit 86de7c0</a> introduce a few new commands to help facilitate visualizing how much space the docker daemon data is taking on disk and allowing for easily cleaning up &quot;unneeded&quot; excess.</p>
<p><a href=""https://docs.docker.com/engine/reference/commandline/system_prune/"" rel=""noreferrer""><strong><code>docker system prune</code></strong></a> will delete ALL dangling data (i.e. In order: containers stopped, volumes without containers and images with no containers). Even unused data, with <code>-a</code> option.</p>
<p>You also have:</p>
<ul>
<li><a href=""https://docs.docker.com/engine/reference/commandline/container_prune/"" rel=""noreferrer""><code>docker container prune</code></a></li>
<li><a href=""https://docs.docker.com/engine/reference/commandline/image_prune/"" rel=""noreferrer""><code>docker image prune</code></a></li>
<li><a href=""https://docs.docker.com/engine/reference/commandline/network_prune/"" rel=""noreferrer""><code>docker network prune</code></a></li>
<li><a href=""https://docs.docker.com/engine/reference/commandline/volume_prune/"" rel=""noreferrer""><code>docker volume prune</code></a></li>
</ul>
<p>For <em>unused</em> images, use <code>docker image prune -a</code> (for removing dangling <em>and</em> ununsed images).<br />
Warning: '<em>unused</em>' means &quot;images not referenced by any container&quot;: be careful before using <code>-a</code>.</p>
<p>As illustrated in <a href=""https://stackoverflow.com/users/1207596/a-l"">A L</a>'s <a href=""https://stackoverflow.com/a/50405599/6309"">answer</a>, <code>docker system prune --all</code> will remove all <em>unused</em> images not just dangling ones... which can be a bit too much.</p>
<p>Combining <code>docker xxx prune</code> with the <a href=""https://docs.docker.com/engine/reference/commandline/system_prune/#filtering"" rel=""noreferrer""><code>--filter</code> option</a> can be a great way to limit the pruning (<a href=""https://docs.docker.com/develop/sdk/#api-version-matrix"" rel=""noreferrer"">docker SDK API 1.28 minimum, so docker 17.04+</a>)</p>
<blockquote>
<p>The currently supported filters are:</p>
</blockquote>
<ul>
<li><code>until (&lt;timestamp&gt;)</code> - only remove containers, images, and networks created before given timestamp</li>
<li><code>label</code> (<code>label=&lt;key&gt;</code>, <code>label=&lt;key&gt;=&lt;value&gt;</code>, <code>label!=&lt;key&gt;</code>, or <code>label!=&lt;key&gt;=&lt;value&gt;</code>) - only remove containers, images, networks, and volumes with (or <em>without</em>, in case <code>label!=...</code> is used) the specified labels.</li>
</ul>
<p>See &quot;<a href=""https://docs.docker.com/config/pruning/#prune-images"" rel=""noreferrer"">Prune images</a>&quot; for an example.</p>
<h1>Original answer (Sep. 2016)</h1>
<p>I usually do:</p>
<pre><code>docker rmi $(docker images --filter &quot;dangling=true&quot; -q --no-trunc)
</code></pre>
<p>I have an [alias for removing those <a href=""https://github.com/docker/docker/blob/634a848b8e3bdd8aed834559f3b2e0dfc7f5ae3a/man/docker-images.1.md#options"" rel=""noreferrer"">dangling images</a>: <code>drmi</code>]<a href=""https://github.com/docker/docker/blob/634a848b8e3bdd8aed834559f3b2e0dfc7f5ae3a/man/docker-images.1.md#options"" rel=""noreferrer"">13</a></p>
<blockquote>
<p>The <code>dangling=true</code> filter finds unused images</p>
</blockquote>
<p>That way, any intermediate image no longer referenced by a labelled image is removed.</p>
<p>I do the same <strong>first</strong> for <a href=""https://github.com/VonC/b2d/blob/b010ab51974ac7de6162cdcbff795d7b9e84fd67/.bash_aliases#L21"" rel=""noreferrer"">exited processes (containers)</a></p>
<pre><code>alias drmae='docker rm $(docker ps -qa --no-trunc --filter &quot;status=exited&quot;)'
</code></pre>
<p>As <a href=""https://stackoverflow.com/users/95750/haridsv"">haridsv</a> points out <a href=""https://stackoverflow.com/questions/32723111/how-to-remove-old-and-unused-docker-images/32723127#comment63457575_32723127"">in the comments</a>:</p>
<blockquote>
<p>Technically, <strong>you should first clean up containers before cleaning up images, as this will catch more dangling images and less errors</strong>.</p>
</blockquote>
<hr />
<p><a href=""https://github.com/jfrazelle"" rel=""noreferrer"">Jess Frazelle (jfrazelle)</a> has the <a href=""https://github.com/jfrazelle/dotfiles/blob/a7fd3df6ab423e6dd04f27727f653753453db837/.dockerfunc#L8-L11"" rel=""noreferrer"">bashrc function</a>:</p>
<pre><code>dcleanup(){
    docker rm -v $(docker ps --filter status=exited -q 2&gt;/dev/null) 2&gt;/dev/null
    docker rmi $(docker images --filter dangling=true -q 2&gt;/dev/null) 2&gt;/dev/null
}
</code></pre>
<hr />
<p>To remove old images, and not just &quot;unreferenced-dangling&quot; images, you can consider <a href=""https://github.com/spotify/docker-gc"" rel=""noreferrer""><strong><code>docker-gc</code></strong></a>:</p>
<hr />
<blockquote>
<p>A simple Docker container and image garbage collection script.</p>
</blockquote>
<blockquote>
<ul>
<li>Containers that exited more than an hour ago are removed.</li>
<li>Images that don't belong to any remaining container after that are removed.</li>
</ul>
</blockquote>
",6309,,362951,,4/11/2022 19:25,4/11/2022 19:25,,,,34,,,,CC BY-SA 4.0
1604212,2,,1604091,10/21/2009 23:26,,1753,,"<p>You don't quite have SQL Server's proprietary <code>UPDATE FROM</code> syntax down. Also not sure why you needed to join on the <code>CommonField</code> and also filter on it afterward.  Try this:</p>
<pre><code>UPDATE t1
  SET t1.CalculatedColumn = t2.[Calculated Column]
  FROM dbo.Table1 AS t1
  INNER JOIN dbo.Table2 AS t2
  ON t1.CommonField = t2.[Common Field]
  WHERE t1.BatchNo = '110';
</code></pre>
<p>If you're doing something silly - like constantly trying to set the value of one column to the aggregate of another column (which violates the principle of avoiding storing redundant data), you can use a CTE (common table expression) - see <a href=""http://technet.microsoft.com/en-us/library/ms190766.aspx"" rel=""noreferrer"">here</a> and <a href=""https://blogs.sentryone.com/aaronbertrand/backtobasics-ctes/"" rel=""noreferrer"">here</a> for more details:</p>
<pre><code>;WITH t2 AS
(
  SELECT [key], CalculatedColumn = SUM(some_column)
    FROM dbo.table2
    GROUP BY [key]
)
UPDATE t1
  SET t1.CalculatedColumn = t2.CalculatedColumn
  FROM dbo.table1 AS t1
  INNER JOIN t2
  ON t1.[key] = t2.[key];
</code></pre>
<p>The reason this is silly, is that you're going to have to re-run this entire update every single time any row in <code>table2</code> changes. A <code>SUM</code> is something you can always calculate at runtime and, in doing so, never have to worry that the result is stale.</p>
",61305,,61305,,12/15/2021 16:00,12/15/2021 16:00,,,,7,,,,CC BY-SA 4.0
